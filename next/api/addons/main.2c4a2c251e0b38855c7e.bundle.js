(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{121:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return boxplotAddon}));__webpack_require__(1),__webpack_require__(20),__webpack_require__(50),__webpack_require__(13),__webpack_require__(18),__webpack_require__(14),__webpack_require__(11),__webpack_require__(24),__webpack_require__(4),__webpack_require__(119),__webpack_require__(311),__webpack_require__(1447),__webpack_require__(5),__webpack_require__(8),__webpack_require__(10),__webpack_require__(25),__webpack_require__(51),__webpack_require__(22);var react=__webpack_require__(0),react_default=__webpack_require__.n(react);__webpack_require__(495),__webpack_require__(284),__webpack_require__(1450),__webpack_require__(1452),__webpack_require__(1453),__webpack_require__(1458),__webpack_require__(1460),__webpack_require__(1461),__webpack_require__(1462),__webpack_require__(1463),__webpack_require__(1464),__webpack_require__(1465),__webpack_require__(1466),__webpack_require__(1467),__webpack_require__(1468),__webpack_require__(1469),__webpack_require__(1470),__webpack_require__(1472),__webpack_require__(1473),__webpack_require__(1474),__webpack_require__(1475),__webpack_require__(1476),__webpack_require__(1477),__webpack_require__(1478),__webpack_require__(1479),__webpack_require__(1480),__webpack_require__(1481),__webpack_require__(1482);function quantilesInterpolate(arr,length,interpolate){var n1=length-1,compute=function(q){var index=q*n1,lo=Math.floor(index),h=index-lo,a=arr[lo];return 0===h?a:interpolate(a,arr[Math.min(lo+1,n1)],h)};return{q1:compute(.25),median:compute(.5),q3:compute(.75)}}function quantilesType7(arr,length){return void 0===length&&(length=arr.length),quantilesInterpolate(arr,length,(function(a,b,alpha){return a+alpha*(b-a)}))}function fivenum(arr,length){void 0===length&&(length=arr.length);var n=length,n4=Math.floor((n+3)/2)/2,compute=function(d){return.5*(arr[Math.floor(d)-1]+arr[Math.ceil(d)-1])};return{q1:compute(n4),median:compute((n+1)/2),q3:compute(n+1-n4)}}var methodLookup={hinges:fivenum,fivenum:fivenum,type7:quantilesType7,quantiles:quantilesType7,linear:function quantilesLinear(arr,length){return void 0===length&&(length=arr.length),quantilesInterpolate(arr,length,(function(i,j,fraction){return i+(j-i)*fraction}))},lower:function quantilesLower(arr,length){return void 0===length&&(length=arr.length),quantilesInterpolate(arr,length,(function(i){return i}))},higher:function quantilesHigher(arr,length){return void 0===length&&(length=arr.length),quantilesInterpolate(arr,length,(function(_,j){return j}))},nearest:function quantilesNearest(arr,length){return void 0===length&&(length=arr.length),quantilesInterpolate(arr,length,(function(i,j,fraction){return.5>fraction?i:j}))},midpoint:function quantilesMidpoint(arr,length){return void 0===length&&(length=arr.length),quantilesInterpolate(arr,length,(function(i,j){return.5*(i+j)}))}};function boxplot(data,options){void 0===options&&(options={});for(var v,min=Number.POSITIVE_INFINITY,max=Number.NEGATIVE_INFINITY,sum=0,valid=0,length=data.length,_determineStatsOption=function determineStatsOptions(options){var _options$coef,_options$quantiles,q;return void 0===options&&(options={}),{coef:null!==(_options$coef=options.coef)&&void 0!==_options$coef?_options$coef:1.5,quantiles:(q=null!==(_options$quantiles=options.quantiles)&&void 0!==_options$quantiles?_options$quantiles:"type7","function"==typeof q?q:methodLookup[q]||quantilesType7)}}(options),quantiles=_determineStatsOption.quantiles,coef=_determineStatsOption.coef,vs=new Float32Array(length),i=0;i<length;++i)null==(v=data[i])||Number.isNaN(v)||(vs[valid]=v,valid++,v<min&&(min=v),v>max&&(max=v),sum+=v);var missing=length-valid;if(0===valid)return{min:NaN,max:NaN,mean:NaN,missing:missing,count:length,whiskerHigh:NaN,whiskerLow:NaN,outlier:[],median:NaN,q1:NaN,q3:NaN};for(var _v,s=vs.subarray(0,valid).sort((function(a,b){return a===b?0:a<b?-1:1})),_quantiles=quantiles(s,valid),median=_quantiles.median,q1=_quantiles.q1,q3=_quantiles.q3,iqr=q3-q1,coefValid="number"==typeof coef&&0<coef,left=coefValid?Math.max(min,q1-coef*iqr):min,right=coefValid?Math.min(max,q3+coef*iqr):max,outlier=[],whiskerLow=left,_i=0;_i<valid;++_i){if(left<(_v=s[_i])){whiskerLow=_v;break}0!==outlier.length&&outlier[outlier.length-1]===_v||outlier.push(_v)}for(var _v2,whiskerHigh=right,reversedOutliers=[],_i2=valid-1;0<=_i2;--_i2){if((_v2=s[_i2])<right){whiskerHigh=_v2;break}0!==reversedOutliers.length&&reversedOutliers[reversedOutliers.length-1]===_v2||0!==outlier.length&&outlier[outlier.length-1]===_v2||reversedOutliers.push(_v2)}return{min:min,max:max,count:length,missing:missing,mean:sum/valid,whiskerHigh:whiskerHigh,whiskerLow:whiskerLow,outlier:outlier.concat(reversedOutliers.reverse()),median:median,q1:q1,q3:q3}}function round2(v){return Math.round(100*v)/100}try{round2.displayName="round2",round2.__docgenInfo={description:"@upsetjs /addons\nhttps://github.com/upsetjs/upsetjs\n\nCopyright (c) 2020 Samuel Gratzl <sam\n@sgratzl .com>",displayName:"round2",props:{toString:{defaultValue:null,description:"Returns a string representation of an object.\n@param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.",name:"toString",required:!1,type:{name:"(radix?: number) => string"}},toFixed:{defaultValue:null,description:"Returns a string representing a number in fixed-point notation.\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.",name:"toFixed",required:!0,type:{name:"(fractionDigits?: number) => string"}},toExponential:{defaultValue:null,description:"Returns a string containing a number represented in exponential notation.\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.",name:"toExponential",required:!0,type:{name:"(fractionDigits?: number) => string"}},toPrecision:{defaultValue:null,description:"Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\n@param precision Number of significant digits. Must be in the range 1 - 21, inclusive.",name:"toPrecision",required:!0,type:{name:"(precision?: number) => string"}},valueOf:{defaultValue:null,description:"Returns the primitive value of the specified object.",name:"valueOf",required:!1,type:{name:"() => number"}},toLocaleString:{defaultValue:null,description:"Converts a number to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",name:"toLocaleString",required:!1,type:{name:"(locales?: string | string[], options?: NumberFormatOptions) => string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/utils.ts#round2"]={docgenInfo:round2.__docgenInfo,name:"round2",path:"src/components/utils.ts#round2"})}catch(__react_docgen_typescript_loader_error){}function _extends(){return(_extends=Object.assign||function(target){for(var source,i=1;i<arguments.length;i++)for(var key in source=arguments[i])Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key]);return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],0<=excluded.indexOf(key)||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],0<=excluded.indexOf(key)||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var _ref2=react_default.a.createElement("g",null),Boxplot=function(_ref){var _ref$theme=_ref.theme,theme=void 0===_ref$theme?"light":_ref$theme,_ref$mode=_ref.mode,mode=void 0===_ref$mode?"normal":_ref$mode,values=_ref.values,_ref$orient=_ref.orient,orient=void 0===_ref$orient?"horizontal":_ref$orient,w=_ref.width,h=_ref.height,min=_ref.min,max=_ref.max,boxStyle=_ref.boxStyle,lineStyle=_ref.lineStyle,outlierStyle=_ref.outlierStyle,_ref$boxPadding=_ref.boxPadding,bpp=void 0===_ref$boxPadding?.1:_ref$boxPadding,_ref$outlierRadius=_ref.outlierRadius,outlierRadius=void 0===_ref$outlierRadius?3:_ref$outlierRadius,_ref$numberFormat=_ref.numberFormat,nf=void 0===_ref$numberFormat?function(v){return v.toFixed(2)}:_ref$numberFormat,b=boxplot(values,_objectWithoutProperties(_ref,["theme","mode","values","orient","width","height","min","max","boxStyle","lineStyle","outlierStyle","boxPadding","outlierRadius","numberFormat"]));if(Number.isNaN(b.median))return _ref2;var o="indicator"===mode?1:0,hor="horizontal"===orient,n=function normalize(domain){var delta=domain[1]-domain[0];return function(v){return(v-domain[0])/delta}}([min,max]),dn=function denormalize(range){var delta=range[1]-range[0];return function(v){return v*delta+range[0]}}([0,hor?w:h]),scale=function(v){return round2(dn(n(v)))},s={max:scale(b.max),avg:scale(b.mean),med:scale(b.median),min:scale(b.min),q1:scale(b.q1),q3:scale(b.q3),wh:scale(b.whiskerHigh),wl:scale(b.whiskerLow)},title=react_default.a.createElement("title",null,"Min: ".concat(nf(b.min),", 25% Quantile: ").concat(nf(b.q1),", Median: ").concat(nf(b.median),", 75% Quantile: ").concat(nf(b.q3),", Max: ").concat(nf(b.max))),inner="light"===theme?"#d3d3d3":"#666666",styles={box:Object.assign({fill:inner},boxStyle),line:Object.assign({fill:"none",stroke:"light"===theme?"black":"#cccccc"},lineStyle),outlier:Object.assign({fill:inner},outlierStyle)};if(hor){var c=h/2,bp=round2(h*bpp)+o,hp=h-bp-o,w1="M".concat(s.wl,",").concat(o," l0,").concat(h-2*o," M").concat(s.wl,",").concat(c," L").concat(s.q1,",").concat(c),w2="M".concat(s.q3,",").concat(c," L").concat(s.wh,",").concat(c," M").concat(s.wh,",").concat(o," L").concat(s.wh,",").concat(h-o),box="M".concat(s.q1,",").concat(bp," L").concat(s.q3,",").concat(bp," L").concat(s.q3,",").concat(hp," L").concat(s.q1,",").concat(hp," L").concat(s.q1,",").concat(bp," M").concat(s.med,",").concat(bp," l0,").concat(hp-bp),p=react_default.a.createElement("path",{d:"".concat(w1,"  ").concat(w2," ").concat(box),style:styles.line});return"indicator"===mode?p:react_default.a.createElement("g",null,title,"normal"===mode&&react_default.a.createElement("rect",{x:s.q1,y:bp,width:s.q3-s.q1,height:h-2*bp,style:styles.box}),p,";",b.outlier.map((function(o){return react_default.a.createElement("circle",{key:o,r:outlierRadius,cy:c,cx:scale(o),style:styles.outlier},react_default.a.createElement("title",null,"$",nf(o)))})))}var _c=w/2,_bp=round2(w*bpp)+o,wp=w-_bp-o,_w="M".concat(o,",").concat(s.wl," l").concat(w-2*o,",0 M").concat(_c,",").concat(s.wl," L").concat(_c,",").concat(s.q1),_w2="M".concat(_c,",").concat(s.q3," L").concat(_c,",").concat(s.wh," M").concat(o,",").concat(s.wh," L").concat(w-o,",").concat(s.wh),_box="M".concat(_bp,",").concat(s.q1," L").concat(_bp,",").concat(s.q3," l").concat(wp-_bp,",0 L").concat(wp,",").concat(s.q1," L").concat(_bp,",").concat(s.q1," M").concat(_bp,",").concat(s.med," l").concat(wp-_bp,",0"),_p=react_default.a.createElement("path",{d:"".concat(_w," ").concat(_w2," ").concat(_box),style:styles.line});return"indicator"===mode?_p:react_default.a.createElement("g",null,title,"normal"===mode&&react_default.a.createElement("rect",{y:s.q1,x:_bp,height:s.q3-s.q1,width:w-2*_bp,style:styles.box}),_p,b.outlier.map((function(o){return react_default.a.createElement("circle",{key:o,r:outlierRadius,cx:_c,cy:scale(o),style:styles.outlier},react_default.a.createElement("title",null,"$",nf(o)))})))},BoxplotMemo=react_default.a.memo(Boxplot);Boxplot.__docgenInfo={description:"",methods:[],displayName:"Boxplot",props:{theme:{defaultValue:{value:"'light'",computed:!1},required:!1,tsType:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}]},description:""},mode:{defaultValue:{value:"'normal'",computed:!1},required:!1,tsType:{name:"union",raw:"'normal' | 'box' | 'indicator'",elements:[{name:"literal",value:"'normal'"},{name:"literal",value:"'box'"},{name:"literal",value:"'indicator'"}]},description:""},orient:{defaultValue:{value:"'horizontal'",computed:!1},required:!1,tsType:{name:"union",raw:"'horizontal' | 'vertical'",elements:[{name:"literal",value:"'horizontal'"},{name:"literal",value:"'vertical'"}]},description:""},boxPadding:{defaultValue:{value:"0.1",computed:!1},required:!1,tsType:{name:"number"},description:""},outlierRadius:{defaultValue:{value:"3",computed:!1},required:!1,tsType:{name:"number"},description:""},numberFormat:{defaultValue:{value:"(v) => v.toFixed(2)",computed:!1},required:!1},values:{required:!0,tsType:{name:"Array",elements:[{name:"number"}],raw:"number[]"},description:""},width:{required:!0,tsType:{name:"number"},description:""},height:{required:!0,tsType:{name:"number"},description:""},min:{required:!0,tsType:{name:"number"},description:""},max:{required:!0,tsType:{name:"number"},description:""},children:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},boxStyle:{required:!1,tsType:{name:"CSSProperties"},description:""},lineStyle:{required:!1,tsType:{name:"CSSProperties"},description:""},outlierStyle:{required:!1,tsType:{name:"CSSProperties"},description:""}},composes:["BoxplotStatsOptions"]};__webpack_exports__.b=Boxplot;function boxplotAddon(prop,elems){var _ref3=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{},_ref3$size=_ref3.size,size=void 0===_ref3$size?100:_ref3$size,position=_ref3.position,_ref3$name=_ref3.name,name=void 0===_ref3$name?prop.toString():_ref3$name,extras=_objectWithoutProperties(_ref3,["size","position","name"]),acc="function"==typeof prop?prop:function(v){return v[prop]},min=Number.POSITIVE_INFINITY,max=Number.NEGATIVE_INFINITY;if(Array.isArray(elems))elems.forEach((function(elem){var v=acc(elem);null==v||Number.isNaN(v)||(v<min&&(min=v),v>max&&(max=v))}));else{var d=elems;min=d.min,max=d.max}return{name:name,position:position,size:size,render:function render(_ref4){var width=_ref4.width,height=_ref4.height,set=_ref4.set,theme=_ref4.theme,values=set.elems.map(acc);return react_default.a.createElement(BoxplotMemo,_extends({values:values,width:width,height:height,min:min,max:max,theme:theme},extras))},renderSelection:function renderSelection(_ref5){var width=_ref5.width,height=_ref5.height,overlap=_ref5.overlap,selectionColor=_ref5.selectionColor,theme=_ref5.theme;if(null==overlap||0===overlap.length)return null;var values=overlap.map(acc);return react_default.a.createElement(BoxplotMemo,_extends({values:values,width:width,height:height,min:min,max:max,mode:"box",lineStyle:{stroke:selectionColor},outlierStyle:{fill:selectionColor},theme:theme},extras))},renderQuery:function renderQuery(_ref6){var width=_ref6.width,height=_ref6.height,overlap=_ref6.overlap,query=_ref6.query,secondary=_ref6.secondary,theme=_ref6.theme;if(null==overlap||0===overlap.length)return null;var values=overlap.map(acc);return react_default.a.createElement(BoxplotMemo,_extends({values:values,width:width,height:height,min:min,max:max,mode:secondary?"indicator":"box",lineStyle:{stroke:query.color},outlierStyle:{fill:query.color},theme:theme},extras))}}}try{Boxplot.displayName="Boxplot",Boxplot.__docgenInfo={description:"",displayName:"Boxplot",props:{values:{defaultValue:null,description:"",name:"values",required:!0,type:{name:"number[]"}},width:{defaultValue:null,description:"",name:"width",required:!0,type:{name:"number"}},height:{defaultValue:null,description:"",name:"height",required:!0,type:{name:"number"}},min:{defaultValue:null,description:"",name:"min",required:!0,type:{name:"number"}},max:{defaultValue:null,description:"",name:"max",required:!0,type:{name:"number"}},theme:{defaultValue:{value:"light"},description:"",name:"theme",required:!1,type:{name:'"light" | "dark"'}},mode:{defaultValue:{value:"normal"},description:"",name:"mode",required:!1,type:{name:'"normal" | "box" | "indicator"'}},orient:{defaultValue:{value:"horizontal"},description:"",name:"orient",required:!1,type:{name:'"horizontal" | "vertical"'}},boxStyle:{defaultValue:null,description:"",name:"boxStyle",required:!1,type:{name:"CSSProperties"}},lineStyle:{defaultValue:null,description:"",name:"lineStyle",required:!1,type:{name:"CSSProperties"}},outlierStyle:{defaultValue:null,description:"",name:"outlierStyle",required:!1,type:{name:"CSSProperties"}},boxPadding:{defaultValue:null,description:"",name:"boxPadding",required:!1,type:{name:"number"}},outlierRadius:{defaultValue:{value:3},description:"",name:"outlierRadius",required:!1,type:{name:"number"}},numberFormat:{defaultValue:null,description:"",name:"numberFormat",required:!1,type:{name:"(v: number) => string"}},coef:{defaultValue:{value:"1.5"},description:"",name:"coef",required:!1,type:{name:"number"}},quantiles:{defaultValue:{value:"type7"},description:"",name:"quantiles",required:!1,type:{name:'"quantiles" | "hinges" | "fivenum" | "type7" | "linear" | "lower" | "higher" | "nearest" | "midpoint" | CustomQuantileMethod'}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Boxplot.tsx#Boxplot"]={docgenInfo:Boxplot.__docgenInfo,name:"Boxplot",path:"src/components/Boxplot.tsx#Boxplot"})}catch(__react_docgen_typescript_loader_error){}"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Boxplot.tsx"]={name:"Boxplot",docgenInfo:Boxplot.__docgenInfo,path:"src/components/Boxplot.tsx"})},1435:function(module,exports,__webpack_require__){"use strict";__webpack_require__(1),__webpack_require__(52),__webpack_require__(50),__webpack_require__(79),__webpack_require__(43),__webpack_require__(1436),__webpack_require__(1437),__webpack_require__(8),__webpack_require__(51);var _clientApi=__webpack_require__(103),_clientLogger=__webpack_require__(59),_configFilename=__webpack_require__(1438);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var source,i=1;i<arguments.length;i++)source=null!=arguments[i]?arguments[i]:{},i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}));return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(_configFilename.args||_configFilename.argTypes)&&_clientLogger.logger.warn("Invalid args/argTypes in config, ignoring.",JSON.stringify({args:_configFilename.args,argTypes:_configFilename.argTypes})),_configFilename.decorators&&_configFilename.decorators.forEach((function(decorator){return(0,_clientApi.addDecorator)(decorator)})),(_configFilename.parameters||_configFilename.globalArgs||_configFilename.globalArgTypes)&&(0,_clientApi.addParameters)(_objectSpread(_objectSpread({},_configFilename.parameters),{},{globalArgs:_configFilename.globalArgs,globalArgTypes:_configFilename.globalArgTypes})),_configFilename.argTypesEnhancers&&_configFilename.argTypesEnhancers.forEach((function(enhancer){return(0,_clientApi.addArgTypesEnhancer)(enhancer)}))},1438:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var _storybook_react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(222),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(139);Object(_storybook_react__WEBPACK_IMPORTED_MODULE_0__.addParameters)({docs:{page:function page(){return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment,{},[react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.Title,{}),react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.Subtitle,{}),react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.Description,{}),react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.Props,{}),react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.Stories,{includePrimary:!0})])}}})},1439:function(module,exports,__webpack_require__){"use strict";(function(module){var _framework=__webpack_require__(222);module._StorybookPreserveDecorators=!0,(0,_framework.configure)([__webpack_require__(1440)],module)}).call(this,__webpack_require__(124)(module))},1440:function(module,exports,__webpack_require__){var map={"./components/Addon.stories.tsx":1488,"./components/Boxplot.stories.tsx":1483,"./index.stories.tsx":1484};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=1440},1483:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Default",(function(){return Default})),__webpack_require__.d(__webpack_exports__,"Vertical",(function(){return Vertical}));__webpack_require__(324),__webpack_require__(11);var react__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__),_Boxplot__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(121);__webpack_exports__.default={parameters:{storySource:{source:"/**\n * @upsetjs/addons\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2020 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport React from 'react';\nimport Boxplot from './Boxplot';\n\nexport default {\n  component: Boxplot,\n  title: 'Box plot Component',\n};\n\nexport const Default = () => {\n  const values = Array(100)\n    .fill(0)\n    .map(() => Math.random());\n  return (\n    <svg width={200} height={50}>\n      <Boxplot width={200} height={50} min={0} max={1} values={values} />\n    </svg>\n  );\n};\n\nexport const Vertical = () => {\n  const values = Array(100)\n    .fill(0)\n    .map(() => Math.random());\n  return (\n    <svg width={50} height={200}>\n      <Boxplot width={50} height={200} min={0} max={1} values={values} orient=\"vertical\" />\n    </svg>\n  );\n};\n",locationsMap:{"box-plot-component--default":{startLoc:{col:23,line:16},endLoc:{col:1,line:25},startBody:{col:23,line:16},endBody:{col:1,line:25}},"box-plot-component--vertical":{startLoc:{col:24,line:27},endLoc:{col:1,line:36},startBody:{col:24,line:27},endBody:{col:1,line:36}}}}},component:_Boxplot__WEBPACK_IMPORTED_MODULE_3__.b,title:"Box plot Component"};var Default=function(){var values=Array(100).fill(0).map((function(){return Math.random()}));return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("svg",{width:200,height:50},react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(_Boxplot__WEBPACK_IMPORTED_MODULE_3__.b,{width:200,height:50,min:0,max:1,values:values}))};Default.displayName="Default";var Vertical=function(){var values=Array(100).fill(0).map((function(){return Math.random()}));return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("svg",{width:50,height:200},react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(_Boxplot__WEBPACK_IMPORTED_MODULE_3__.b,{width:50,height:200,min:0,max:1,values:values,orient:"vertical"}))};Vertical.displayName="Vertical",Default.__docgenInfo={description:"",methods:[],displayName:"Default"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Boxplot.stories.tsx"]={name:"Default",docgenInfo:Default.__docgenInfo,path:"src/components/Boxplot.stories.tsx"}),Vertical.__docgenInfo={description:"",methods:[],displayName:"Vertical"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Boxplot.stories.tsx"]={name:"Vertical",docgenInfo:Vertical.__docgenInfo,path:"src/components/Boxplot.stories.tsx"})},1484:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default={title:"Welcome UpSet.js React Box Plot Addon"};try{indexstories.displayName="indexstories",indexstories.__docgenInfo={description:"@upsetjs /addons\nhttps://github.com/upsetjs/upsetjs\n\nCopyright (c) 2020 Samuel Gratzl <sam\n@sgratzl .com>",displayName:"indexstories",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/index.stories.tsx#indexstories"]={docgenInfo:indexstories.__docgenInfo,name:"indexstories",path:"src/index.stories.tsx#indexstories"})}catch(__react_docgen_typescript_loader_error){}},1488:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Default",(function(){return Default}));var react=__webpack_require__(0),react_default=__webpack_require__.n(react),Boxplot=__webpack_require__(121);__webpack_require__(1),__webpack_require__(12),__webpack_require__(26),__webpack_require__(20),__webpack_require__(191),__webpack_require__(324),__webpack_require__(52),__webpack_require__(1441),__webpack_require__(1442),__webpack_require__(50),__webpack_require__(33),__webpack_require__(87),__webpack_require__(13),__webpack_require__(18),__webpack_require__(14),__webpack_require__(69),__webpack_require__(11),__webpack_require__(67),__webpack_require__(23),__webpack_require__(284),__webpack_require__(1444),__webpack_require__(24),__webpack_require__(266),__webpack_require__(4),__webpack_require__(288),__webpack_require__(1445),__webpack_require__(119),__webpack_require__(1446),__webpack_require__(494),__webpack_require__(5),__webpack_require__(8),__webpack_require__(10),__webpack_require__(27),__webpack_require__(25),__webpack_require__(192),__webpack_require__(88),__webpack_require__(21),__webpack_require__(68),__webpack_require__(162),__webpack_require__(51),__webpack_require__(22);function len(a){return a instanceof Set?a.size:a.length}function setOverlapFactory(a,toElemKey){var elems=toElemKey?new Set((a instanceof Set?Array.from(a):a).map(toElemKey)):a instanceof Set?a:new Set(a),setA=elems.size,same={setA:setA,setB:setA,union:setA,intersection:setA};return function(b){if(b===a)return same;var intersection=0;b.forEach((function(e){(toElemKey&&elems.has(toElemKey(e))||!toElemKey&&elems.has(e))&&intersection++}));var setB=len(b);return{setA:setA,setB:setB,intersection:intersection,union:setA+setB-intersection}}}function setElemOverlapFactory(a,toElemKey){var elems=toElemKey?new Set((a instanceof Set?Array.from(a):a).map(toElemKey)):a instanceof Set?a:new Set(a),setA=Array.isArray(a)?a:Array.from(a),same={setA:setA,setB:setA,union:setA,intersection:setA};return function(b){if(b===a)return same;var intersection=[],union=setA.slice();return b.forEach((function(e){toElemKey&&elems.has(toElemKey(e))||!toElemKey&&elems.has(e)?intersection.push(e):union.push(e)})),{setA:setA,setB:Array.isArray(b)?b:Array.from(b),intersection:intersection,union:union}}}function isElemQuery(q){return Array.isArray(q.elems)}function isCalcQuery(q){return"function"==typeof q.overlap}function isSetQuery(q){return null!=q.set}function queryOverlap(q,what,toElemKey){if(isCalcQuery(q))return q.overlap;if(isSetQuery(q)&&q.set.overlap)return q.set.overlap;var f=setOverlapFactory(isElemQuery(q)?q.elems:q.set.elems,toElemKey);return function(s){return s.overlap&&isElemQuery(q)&&Array.isArray(q.elems)?s.overlap(q.elems):s.overlap&&isSetQuery(q)?s.overlap(q.set):f(s.elems)[what]}}function queryElemOverlap(q,what,toElemKey){if(isCalcQuery(q))return function(){return null};if("intersection"===what){var _f=function setElemIntersectionFactory(a,toElemKey){var arr=a instanceof Set?Array.from(a):a,elems=toElemKey?new Set(arr.map(toElemKey)):a instanceof Set?a:new Set(a);return function(b){if(b===a)return arr;var intersection=[];return b.forEach((function(e){(toElemKey&&elems.has(toElemKey(e))||!toElemKey&&elems.has(e))&&intersection.push(e)})),intersection}}(isElemQuery(q)?q.elems:q.set.elems,toElemKey);return function(s){return _f(s.elems)}}var f=setElemOverlapFactory(isElemQuery(q)?q.elems:q.set.elems,toElemKey);return function(s){return f(s.elems)[what]}}function isBaseSet(v){return null!=v&&"number"==typeof v.cardinality&&"string"==typeof v.name&&Array.isArray(v.elems)}function isSet(v){return isBaseSet(v)&&"set"===v.type}function isSetCombination(v){var vt=v;return isBaseSet(v)&&["composite","union","intersection"].includes(vt.type)&&vt.sets instanceof Set&&"number"==typeof vt.degree}function isSetLike(v){return isSet(v)||isSetCombination(v)}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _createForOfIteratorHelperLoose(o){var i=0;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(o=function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}(o)))return function(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}};throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(i=o[Symbol.iterator]()).next.bind(i)}function byName(a,b){return a.name.localeCompare(b.name)}function byCardinality(a,b){return b.cardinality-a.cardinality}function byDegree(a,b){return a.degree-b.degree}function byComposite(func){return function(a,b){return func.reduce((function(acc,f){return 0===acc?f(a,b):acc}),0)}}function negate(func){return function(a,b){return-func(a,b)}}function byGroup(sets){return function(a,b){var fixNotFound=function(v){return 0>v?Number.POSITIVE_INFINITY:v};return fixNotFound(sets.findIndex((function(s){return a.sets.has(s)})))-fixNotFound(sets.findIndex((function(s){return b.sets.has(s)})))}}function postprocessCombinations(sets,combinations,options){void 0===options&&(options={});var r=combinations;return options.order&&(r=r.sort(function toOrder(sets,order){if(!order)return byName;var arr=Array.isArray(order)?order:[order];return 0===arr.length?byName:byComposite(arr.map((function(o){switch(o){case"cardinality":case"cardinality:desc":return byCardinality;case"cardinality:asc":return negate(byCardinality);case"name:desc":return negate(byName);case"degree":case"degree:asc":return byDegree;case"degree:desc":return negate(byDegree);case"group":case"group:asc":return byGroup(sets);case"group:desc":return negate(byGroup(sets));default:return byName}})))}(sets,options.order))),null!=options.limit?r.slice(0,options.limit):r}function powerSetNumber(arr,onSet,_temp){for(var _ref=void 0===_temp?{}:_temp,_ref$min=_ref.min,min=void 0===_ref$min?0:_ref$min,_ref$max=_ref.max,max=void 0===_ref$max?1/0:_ref$max,total=Math.pow(2,arr.length),lastBit=0,lastBitAcc=1,i=0;i<total;i++){i>=lastBitAcc&&(lastBit++,lastBitAcc<<=1);for(var sub=[],j=0;j<lastBit;j++)i&1<<j&&sub.push(arr[j]);sub.length>=min&&sub.length<=max&&onSet(sub)}}function powerSetBigInt(arr,onSet,_temp2){for(var _ref2=void 0===_temp2?{}:_temp2,_ref2$min=_ref2.min,min=void 0===_ref2$min?0:_ref2$min,_ref2$max=_ref2.max,max=void 0===_ref2$max?1/0:_ref2$max,zero=BigInt(0),one=BigInt(1),total=BigInt(2)<<BigInt(arr.length),lastBit=0,lastBitAcc=one,bits=arr.map((function(_,i){return one<<BigInt(i)})),i=zero;i<total;i+=one){i>=lastBitAcc&&(lastBit++,lastBitAcc<<=one);for(var sub=[],j=0;j<lastBit;j++)(i&bits[j])!==zero&&sub.push(arr[j]);sub.length>=min&&sub.length<=max&&onSet(sub)}}function powerSetRecursive(arr,onSet,_temp3){var _ref3=void 0===_temp3?{}:_temp3,_ref3$min=_ref3.min,min=void 0===_ref3$min?0:_ref3$min,_ref3$max=_ref3.max,max=void 0===_ref3$max?1/0:_ref3$max,check=function(len){return len>=min&&len<=max};check(0)&&onSet([]),function iter(subset,start){if(!(subset.length>=max))for(var i=start;i<arr.length;i++)subset.push(arr[i]),check(subset.length)&&onSet(subset.slice()),iter(subset,i+1),subset.pop()}([],0)}var SET_JOINERS={intersection:" ∩ ",union:" ∪ ",composite:","};function intersectionBuilder(sets,allElements,notPartOfAnySet,toElemKey){var setElems=new Map(sets.map((function(s){return[s,toElemKey?new Set(s.elems.map(toElemKey)):new Set(s.elems)]}))),setDirectElems=toElemKey?null:setElems,setKeyElems=toElemKey?setElems:null;return function(intersection){if(0===intersection.length){if(Array.isArray(notPartOfAnySet))return notPartOfAnySet;if(setKeyElems&&toElemKey){var _lookup=Array.from(setKeyElems.values());return allElements.filter((function(e){var k=toElemKey(e);return _lookup.every((function(s){return!s.has(k)}))}))}var lookup=Array.from(setDirectElems.values());return allElements.filter((function(e){return lookup.every((function(s){return!s.has(e)}))}))}if(1===intersection.length)return intersection[0].elems;var smallest=intersection.reduce((function(acc,d){return!acc||acc.length>d.elems.length?d.elems:acc}),null);return setKeyElems&&toElemKey?smallest.filter((function(elem){var key=toElemKey(elem);return intersection.every((function(s){return setKeyElems.get(s).has(key)}))})):smallest.filter((function(elem){return intersection.every((function(s){return setDirectElems.get(s).has(elem)}))}))}}function unionBuilder(sets,allElements,notPartOfAnySet,toElemKey){return function(union){if(0===union.length){if(Array.isArray(notPartOfAnySet))return notPartOfAnySet;if(toElemKey){var _lookup2=new Set;return sets.forEach((function(set){set.elems.forEach((function(e){return _lookup2.add(toElemKey(e))}))})),allElements.filter((function(e){return!_lookup2.has(toElemKey(e))}))}var lookup=new Set;return sets.forEach((function(set){set.elems.forEach((function(e){return lookup.add(e)}))})),allElements.filter((function(e){return!lookup.has(e)}))}if(1===union.length)return union[0].elems;var largest=union.reduce((function(acc,d){return!acc||acc.length<d.elems.length?d.elems:acc}),null),all=largest.slice(),contained=toElemKey?new Set(all.map(toElemKey)):new Set(all);return union.forEach((function(set){set.elems!==largest&&set.elems.forEach((function(elem){if(toElemKey){var key=toElemKey(elem);contained.has(key)||(all.push(elem),contained.add(key))}else contained.has(elem)||(all.push(elem),contained.add(elem))}))})),all}}function generateCombinations(sets,_temp){var _SET_JOINERS$type,_ref=void 0===_temp?{}:_temp,_ref$type=_ref.type,type=void 0===_ref$type?"intersection":_ref$type,_ref$min=_ref.min,min=void 0===_ref$min?0:_ref$min,_ref$max=_ref.max,max=void 0===_ref$max?1/0:_ref$max,_ref$empty=_ref.empty,empty=void 0!==_ref$empty&&_ref$empty,_ref$elems=_ref.elems,allElements=void 0===_ref$elems?[]:_ref$elems,notPartOfAnySet=_ref.notPartOfAnySet,toElemKey=_ref.toElemKey,postprocess=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],0<=excluded.indexOf(key)||(target[key]=source[key]);return target}(_ref,["type","min","max","empty","elems","notPartOfAnySet","toElemKey"]),joiner=null!==(_SET_JOINERS$type=SET_JOINERS[type])&&void 0!==_SET_JOINERS$type?_SET_JOINERS$type:SET_JOINERS.intersection,combinations=[],compute=("union"===type?unionBuilder:intersectionBuilder)(sets,allElements,notPartOfAnySet,toElemKey);return function powerSet(arr,options){void 0===options&&(options={});var asForEach=function(f){return{forEach:function(cb){return f(arr,cb,options)}}};return Math.pow(2,arr.length)<Number.MAX_SAFE_INTEGER?asForEach(powerSetNumber):void 0!==window.BigInt?asForEach(powerSetBigInt):asForEach(powerSetRecursive)}(sets,{min:min,max:max}).forEach((function(combo){if(0===combo.length&&"number"==typeof notPartOfAnySet&&0<notPartOfAnySet)combinations.push({type:"composite",elems:[],sets:new Set,name:"()",cardinality:notPartOfAnySet,overlap:function(s){return s===this||isSetLike(s)&&s.name===this.name&&s.cardinality===this.cardinality?this.cardinality:0},degree:0});else{var elems=compute(combo);(empty||0!==elems.length)&&combinations.push({type:0===combo.length?"composite":type,elems:elems,sets:new Set(combo),name:1===combo.length?combo[0].name:"("+combo.map((function(d){return d.name})).join(joiner)+")",cardinality:elems.length,degree:combo.length})}})),postprocessCombinations(sets,combinations,postprocess)}function model_esm_toKey(s){return s.name+":"+s.type+"#"+s.cardinality}var model_esm_bandScale=function(domain,size,padding){var blocks=domain.length+padding,step=size/Math.max(1,blocks),start=size-step*domain.length,lookup=new Map(domain.map((function(d,i){return[d,i]}))),scale=function(v){var index=lookup.get(v);if(null!=index)return start+step*index};return scale.bandwidth=function(){return step/(1+padding)},scale};function hasOverlap(positions,heights,stride){void 0===stride&&(stride=1);for(var i=0;i<positions.length-stride;i+=stride){var pos_i=positions[i],pos_n=positions[i+1];if(pos_i<pos_n){if(pos_i+heights[i]/2>pos_n-heights[i+1]/2)return!0}else{var _left=pos_i-heights[i]/2;if(pos_n+heights[i+1]/2>_left)return!0}}return!1}function ensureLast(ticks,max,scale,heightPerTick,toStr){var last=ticks[ticks.length-1];if(!last.label)for(var j=ticks.length-2;0<j;--j)if(ticks[j].label){last=ticks[j];break}if(last.value<max){var pos_l=scale(last.value),pos_max=scale(max);if(pos_l<pos_max){pos_l+heightPerTick(last.value)/2<pos_max-heightPerTick(max)/2&&ticks.push({value:max,label:toStr(max)})}else{var _left2=pos_l-heightPerTick(last.value)/2;pos_max+heightPerTick(max)/2<_left2&&ticks.push({value:max,label:toStr(max)})}}return ticks}function genTicks(values,toStr,stride){return void 0===toStr&&(toStr=String),void 0===stride&&(stride=1),values.map((function(v,i){return{value:v,label:1===stride||0==i%stride?toStr(v):void 0}}))}function checkValues(values,scale,heightPerTick,max,toStr){var positions=values.map((function(v){return scale(v)})),heights=values.map((function(v){return heightPerTick(v)}));return hasOverlap(positions,heights)&&hasOverlap(positions,heights,2)?null:ensureLast(genTicks(values,toStr),max,scale,heightPerTick,toStr)}function toStr(v){return v.toLocaleString()}function range(max,inc){void 0===inc&&(inc=1);for(var values=[],v=0;v<=max;v+=inc)values.push(v);return values}function distributeTicks(max,maxCount,scale,heightPerTick){if(0>=maxCount)return[];for(var _step,_iterator=_createForOfIteratorHelperLoose(function niceFactors(max,maxCount){void 0===maxCount&&(maxCount=11);var digits=Math.max(0,Math.floor(Math.log10(max)-.5)),factor=Math.pow(10,digits),factors=[1,2,5],r=factors.map((function(f){return f*factor}));0<digits&&r.unshift(factors[factors.length-1]*Math.pow(10,digits-1)),r.push(factors[0]*Math.pow(10,digits+1));var lower=Math.ceil(max/maxCount);return r.filter((function(d){return d>=lower&&d<=max}))}(max,maxCount));!(_step=_iterator()).done;){var r=checkValues(range(max,_step.value),scale,heightPerTick,max,toStr);if(r)return r}return genTicks([0,max],toStr)}var linearScale=function(max,range,options){var size=range[1]-range[0],scale=function(v){return range[0]+v/max*size};return scale.ticks=function(count){if(void 0===count&&(count=10),"vertical"===options.orientation){var heightPerTick=Math.ceil(1.4*options.fontSizeHint);return distributeTicks(max,count+1,scale,(function(){return heightPerTick}))}var widthPerChar=options.fontSizeHint/1.4;return distributeTicks(max,count+1,scale,(function(v){return Math.ceil(toStr(v).length*widthPerChar)}))},scale.tickFormat=function(){return toStr},scale};function toStr$1(v){var orders=["","k","M","G"],order=Math.max(0,Math.min(Math.floor(Math.log10(v)/3),orders.length-1));return""+(Math.round(v/Math.pow(10,3*order-1))/10).toLocaleString()+orders[order]}function range$1(max,factor){for(var values=[],inc=Math.pow(10,factor),v=1;v<=max;v*=inc)values.push(v);return values}function generateInnerTicks(max,factor){for(var values=[],v=1,i=0;v<=max;v*=10,i++){values.push({value:v,label:1===factor||0==i%factor?toStr$1(v):void 0});for(var vv=v+v;vv<10*v&&vv<max;vv+=v*factor)values.push({value:vv})}return values}function distributeTicks$1(max,maxCount,scale,heightPerTick){if(0>=maxCount)return[];for(var _i=0,_arr=[1,2,5];_i<_arr.length;_i++){var factor=_arr[_i];if(checkValues(range$1(max,factor),scale,heightPerTick,max,toStr$1))return ensureLast(generateInnerTicks(max,factor),max,scale,heightPerTick,toStr$1)}return genTicks([0,max],toStr$1)}var logScale=function(max,range,options){var size=range[1]-range[0],domain=1>max?1:Math.log10(max),scale=function(v){var n=1>=v?0:Math.log10(v)/domain;return range[0]+n*size};return scale.ticks=function(count){if(void 0===count&&(count=10),"vertical"===options.orientation){var heightPerTick=Math.ceil(1.4*options.fontSizeHint);return distributeTicks$1(max,count+1,scale,(function(){return heightPerTick}))}var widthPerChar=options.fontSizeHint/1.4;return distributeTicks$1(max,count+1,scale,(function(v){return Math.ceil(toStr$1(v).length*widthPerChar)}))},scale.tickFormat=function(){return toStr$1},scale};__webpack_require__(130),__webpack_require__(495),__webpack_require__(256),__webpack_require__(156),__webpack_require__(125),__webpack_require__(317),__webpack_require__(206);function noop(){}function wrap(f){return f?function(set){return function(evt){return f.call(this,set,evt.nativeEvent)}}:noop}function clsx(){for(var _len=arguments.length,clazzes=Array(_len),_key=0;_key<_len;_key++)clazzes[_key]=arguments[_key];return clazzes.filter(Boolean).join(" ")}function addonPositionGenerator(total){var beforeAcc=0,afterAcc=0;return function(addon){var x=0;return"before"===addon.position?x=-(beforeAcc+=addon.size):(x=total+afterAcc,afterAcc+=addon.size),x}}function generateId(){return"upset-"+Math.random().toString(36).slice(4)}function deriveDataDependent(sets,combinations,sizes,numericScale,bandScale,barLabelFontSize,dotPadding,barPadding,tickFontSize,toKey,toElemKey,id){var numericScaleFactory=function resolveNumericScale(factory){return"linear"===factory?linearScale:"log"===factory?logScale:factory}(numericScale),bandScaleFactory=function resolveBandScale(factory){return"band"===factory?model_esm_bandScale:factory}(bandScale),cs=function areCombinations(combinations){return Array.isArray(combinations)}(combinations)?combinations:generateCombinations(sets,combinations),combinationX=bandScaleFactory(cs.map(toKey),sizes.cs.w,sizes.padding),maxCSCardinality=cs.reduce((function(acc,d){return Math.max(acc,d.cardinality)}),0),combinationY=numericScaleFactory(maxCSCardinality,[sizes.cs.h,barLabelFontSize],{orientation:"vertical",fontSizeHint:tickFontSize}),guessLabelWidth=function(v){return Math.floor(barLabelFontSize/1.4*.7*combinationY.tickFormat()(v).length)},maxSetCardinality=sets.reduce((function(acc,d){return Math.max(acc,d.cardinality)}),0),largestSetLabelWidth=guessLabelWidth(maxSetCardinality),largestCSLabelWidth=guessLabelWidth(maxCSCardinality),setX=numericScaleFactory(maxSetCardinality,[sizes.sets.w,largestSetLabelWidth],{orientation:"horizontal",fontSizeHint:tickFontSize}),setKeys=sets.map(toKey),setY=bandScaleFactory(setKeys.slice().reverse(),sizes.sets.h,sizes.padding),r=Math.min(setY.bandwidth(),combinationX.bandwidth())/2*dotPadding,triangleSize=Math.max(2,Math.min(setY.bandwidth(),combinationX.bandwidth())/2*barPadding);return{id:id||generateId(),r:r,triangleSize:triangleSize,sets:{v:sets,keys:setKeys,rv:sets.slice().reverse(),x:setX,xAxisWidth:sizes.sets.w-largestSetLabelWidth,y:function(s){return setY(toKey(s))},bandWidth:setY.bandwidth(),cy:setY.bandwidth()/2+sizes.cs.h,format:setX.tickFormat(),labelOffset:barLabelFontSize+9+2},cs:{v:cs,keys:cs.map(toKey),x:function(s){return combinationX(toKey(s))},y:combinationY,yAxisWidth:sizes.cs.h-barLabelFontSize,cx:combinationX.bandwidth()/2,bandWidth:combinationX.bandwidth(),format:combinationY.tickFormat(),has:function(v,s){var sk=toKey(s);return Array.from(v.sets).some((function(ss){return toKey(ss)===sk}))},labelOffset:largestCSLabelWidth+9+6},toKey:toKey,toElemKey:toElemKey}}var EMPTY_OBJECT={},EMPTY_ARRAY=[],DEFAULT_FONTSIZES={setLabel:"16px",axisTick:"10px",chartLabel:"16px",barLabel:"10px",legend:"10px"},DEFAULT_WIDTH_RATIO=[.18,.12,.7],DEFAULT_HEIGHT_RATIO=[.6,.4],DEFAULT_COMBINATIONS={type:"intersection"};function exportSVG(node,_ref){var _ref$type=_ref.type,type=void 0===_ref$type?"png":_ref$type,_ref$title=_ref.title,title=void 0===_ref$title?"UpSet":_ref$title,toRemove=_ref.toRemove,theme=node.dataset.theme,clone=node.cloneNode(!0);clone.style.backgroundColor="dark"===theme?"#303030":"white",toRemove&&Array.from(clone.querySelectorAll(toRemove)).forEach((function(d){return d.remove()}));var b=new Blob([(new XMLSerializer).serializeToString(clone)],{type:"image/svg+xml;charset=utf-8"}),url=URL.createObjectURL(b);return"svg"===type?(downloadUrl(url,title+"."+type,node.ownerDocument),URL.revokeObjectURL(url),Promise.resolve()):function toPNG(url,node){var canvas=node.ownerDocument.createElement("canvas"),bb=node.getBoundingClientRect();canvas.width=bb.width,canvas.height=bb.height;var ctx=canvas.getContext("2d"),img=new Image(canvas.width,canvas.height);return new Promise((function(resolve){img.onload=function(){ctx.drawImage(img,0,0);var png=canvas.toDataURL("image/png");resolve(png)},img.src=url}))}(url,node).then((function(purl){downloadUrl(purl,title+"."+type,node.ownerDocument),URL.revokeObjectURL(url)}))}function downloadUrl(url,title,doc){var a=doc.createElement("a");a.href=url,a.style.position="absolute",a.style.left="-10000px",a.style.top="-10000px",a.download=title,document.body.appendChild(a),a.click(),a.remove()}function react_esm_extends(){return(react_esm_extends=Object.assign||function(target){for(var source,i=1;i<arguments.length;i++)for(var key in source=arguments[i])Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key]);return target}).apply(this,arguments)}function exportChart(evt){var svg=evt.currentTarget.closest("svg"),type=evt.currentTarget.dataset.type||"png";"vega"!==type?exportSVG(svg,{type:type,toRemove:"."+evt.currentTarget.getAttribute("class")}):function exportVegaLite(svg,_temp){var _ref2,_svg$ownerDocument,_svg$ownerDocument$de,_svg$querySelector$da,_svg$querySelector,v,_ref$title=(void 0===_temp?{}:_temp).title,title=void 0===_ref$title?"UpSet":_ref$title,resolveStyle=null!==(_ref2=svg.getComputedStyle||(null===(_svg$ownerDocument=svg.ownerDocument)||void 0===_svg$ownerDocument||null===(_svg$ownerDocument$de=_svg$ownerDocument.defaultView)||void 0===_svg$ownerDocument$de?void 0:_svg$ownerDocument$de.getComputedStyle))&&void 0!==_ref2?_ref2:window.getComputedStyle,theme=svg.dataset.theme,styleId=Array.from(svg.classList).find((function(d){return d.startsWith("root-")})).slice(5),sets=Array.from(svg.querySelectorAll("[data-upset=sets] [data-cardinality]")).map((function(set){return{name:set.querySelector("text.setTextStyle-"+styleId).textContent,cardinality:Number.parseInt(set.dataset.cardinality,10)}})).reverse(),barLabelOffset=-Number.parseInt(svg.querySelector(".sBarTextStyle-"+styleId).getAttribute("dx"),10),color=resolveStyle(svg.querySelector(".fillPrimary-"+styleId)).fill,fillNotMember=resolveStyle(svg.querySelector(".fillNotMember-"+styleId)).fill,textColor=resolveStyle(svg.querySelector("text")).fill,csName=svg.querySelector(".cChartTextStyle-"+styleId).textContent,setName=svg.querySelector(".sChartTextStyle-"+styleId).textContent,combinations=Array.from(svg.querySelectorAll("[data-upset=cs] [data-cardinality]")).map((function(set){return{name:set.querySelector("text.hoverBarTextStyle-"+styleId).textContent,cardinality:Number.parseInt(set.dataset.cardinality,10),sets:Array.from(set.querySelectorAll(".fillPrimary-"+styleId+" > title")).map((function(n){return n.textContent}))}})),translateX=function(v){return Number.parseInt(v.getAttribute("transform").match(/(\d+),/)[1],10)},base=svg.querySelector("[data-upset=base]"),padding=translateX(base),setWidth=translateX(svg.querySelector("[data-upset=csaxis]")),csWidth=Number.parseInt(base.querySelector("g").firstElementChild.children[1].getAttribute("x2"),10),csHeight=(v=svg.querySelector("[data-upset=setaxis]"),Number.parseInt(v.getAttribute("transform").match(/,(\d+)/)[1],10)),labelWidth=Number.parseInt(svg.querySelector("defs rect").getAttribute("width"),10),setHeight=Number.parseInt(svg.querySelector("defs rect").getAttribute("height"),10),radius=Number.parseInt(svg.querySelector("[data-cardinality] circle").getAttribute("r"),10),hasPrimarySelection=null!=svg.querySelector("[data-upset=sets-s] [data-cardinality]"),hasQuery=null!=svg.querySelector("[data-upset=sets-q] [data-cardinality]"),hasSelection=hasPrimarySelection||hasQuery,selectionColor="orange";hasSelection&&(Array.from(svg.querySelectorAll("[data-upset=sets-"+(hasPrimarySelection?"s]":"q]:first-of-type")+" [data-cardinality]")).forEach((function(elem){var i=sets.length-Number.parseInt(elem.dataset.i,10)-1;sets[i].selection=Number.parseInt(elem.dataset.cardinality,10)})),Array.from(svg.querySelectorAll("[data-upset=cs-"+(hasPrimarySelection?"s]":"q:first-of-type")+" [data-cardinality]")).forEach((function(elem){var i=Number.parseInt(elem.dataset.i,10);combinations[i].selection=Number.parseInt(elem.dataset.cardinality,10)})),selectionColor=resolveStyle(svg.querySelector("[data-upset=sets-"+(hasPrimarySelection?"s":"q")+"] [data-cardinality]")).fill);var highlightedCombination=Number.parseInt(null!==(_svg$querySelector$da=null===(_svg$querySelector=svg.querySelector("[data-upset=cs-ss]"))||void 0===_svg$querySelector?void 0:_svg$querySelector.dataset.i)&&void 0!==_svg$querySelector$da?_svg$querySelector$da:"-1",10),filter=0<=highlightedCombination?{field:"partOf",oneOf:[1,2]}:{field:"partOf",equal:1},spec={$schema:"https://vega.github.io/schema/vega-lite/v4.json",title:title,datasets:{sets:sets,combinations:combinations.map((function(c,i){return Object.assign({},c,{partOf:highlightedCombination===i?2:1,nsets:[""]})})).concat(combinations.map((function(c){return{name:c.name,cardinality:c.cardinality,partOf:0,sets:[""],nsets:sets.filter((function(s){return!c.sets.includes(s.name)})).map((function(s){return s.name}))}})))},vconcat:[{hconcat:[{mark:"bar",width:setWidth+labelWidth-40,height:csHeight},{width:csWidth,height:csHeight,data:{name:"combinations"},transform:[{filter:filter}],layer:[{mark:{type:"bar",tooltip:!0}},{mark:{type:"text",align:"center",baseline:"bottom",dy:-barLabelOffset},encoding:{text:{field:"cardinality",type:"quantitative"}}},hasSelection&&{mark:{type:"bar",fill:selectionColor,tooltip:!0},encoding:{y:{field:"selection",type:"quantitative"}}}].filter(Boolean),encoding:{x:{field:"name",type:"ordinal",axis:null,sort:null},y:{field:"cardinality",type:"quantitative",axis:{grid:!1},title:csName}}}]},{hconcat:[{width:setWidth,height:setHeight,data:{name:"sets"},layer:[{mark:{type:"bar",tooltip:!0}},{mark:{type:"text",align:"right",baseline:"middle",dx:-barLabelOffset},encoding:{text:{field:"cardinality",type:"quantitative"}}},hasSelection&&{mark:{type:"bar",fill:selectionColor,tooltip:!0},encoding:{x:{field:"selection",type:"quantitative"}}}].filter(Boolean),encoding:{y:{field:"name",type:"ordinal",axis:null,sort:null},x:{field:"cardinality",type:"quantitative",title:setName,sort:"descending",axis:{grid:!1}}}},{data:{name:"sets"},width:labelWidth,height:setHeight,mark:{type:"text",align:"center",baseline:"middle",fontSize:Number.parseInt(resolveStyle(svg.querySelector(".setTextStyle-"+styleId)).fontSize,10)},encoding:{y:{field:"name",type:"ordinal",axis:null,sort:null},text:{field:"name",type:"ordinal"}}},{width:csWidth,height:setHeight,data:{name:"combinations"},transform:[{flatten:["sets"],as:["has_set"]},{flatten:["nsets"],as:["has_not_set"]},{calculate:"datum.has_set+datum.has_not_set",as:"set"}],layer:[{mark:{type:"circle",size:radius*radius*Math.PI,tooltip:!0},encoding:{color:{field:"partOf",type:"nominal",legend:null,scale:{range:[fillNotMember,color].concat(0<=highlightedCombination?[selectionColor]:[])}},y:{field:"set",type:"ordinal",axis:null,sort:null}}},{mark:"rule",transform:[{filter:filter},{calculate:"datum.sets[datum.sets.length -1]",as:"set_end"}],encoding:react_esm_extends({y:{field:"sets[0]",type:"ordinal",axis:null,sort:null},y2:{field:"set_end"}},0>highlightedCombination?{}:{color:{field:"partOf",type:"nominal",legend:null,scale:{range:[color,selectionColor]}}})}],encoding:{x:{field:"name",type:"ordinal",axis:null,sort:null}}}]}],config:{padding:padding,background:"dark"===theme?"#303030":"white",concat:{spacing:0},view:{stroke:null},bar:{fill:color},circle:{opacity:1},rule:{stroke:color,strokeWidth:Number.parseInt(resolveStyle(svg.querySelector("[data-upset=cs] [data-cardinality] line")).strokeWidth,10)},axis:{labelColor:textColor,labelFontSize:Number.parseInt(resolveStyle(svg.querySelector(".axisTextStyle-"+styleId)).fontSize,10),titleColor:textColor,titleFontSize:Number.parseInt(resolveStyle(svg.querySelector(".cChartTextStyle-"+styleId)).fontSize,10)},title:{color:textColor},text:{fill:textColor,fontSize:Number.parseInt(resolveStyle(svg.querySelector(".sBarTextStyle-"+styleId)).fontSize,10)}}},url=URL.createObjectURL(new Blob([JSON.stringify(spec,null,2)],{type:"application/json"}));downloadUrl(url,title+".json",svg.ownerDocument),URL.revokeObjectURL(url)}(svg)}function ExportButtons(_ref){var transform=_ref.transform,styleId=_ref.styleId;return react_default.a.createElement("g",{className:"exportButtons-"+styleId,transform:transform},react_default.a.createElement("g",{className:"exportButton-"+styleId,onClick:exportChart,"data-type":"png",transform:"translate(-50, 0)"},react_default.a.createElement("title",null,"Download PNG Image"),react_default.a.createElement("rect",{y:-9,width:24,height:11,rx:2,ry:2}),react_default.a.createElement("text",{className:"exportTextStyle-"+styleId,x:12},"PNG")),react_default.a.createElement("g",{className:"exportButton-"+styleId,onClick:exportChart,"data-type":"svg",transform:"translate(-24, 0)"},react_default.a.createElement("title",null,"Download SVG Image"),react_default.a.createElement("rect",{y:-9,width:24,height:11,rx:2,ry:2}),react_default.a.createElement("text",{className:"exportTextStyle-"+styleId,x:12},"SVG")),react_default.a.createElement("g",{className:"exportButton-"+styleId,onClick:exportChart,"data-type":"vega",transform:"translate(-84, 0)"},react_default.a.createElement("title",null,"Download VEGA-Lite Specification"),react_default.a.createElement("rect",{y:-9,width:32,height:11,rx:2,ry:2}),react_default.a.createElement("text",{className:"exportTextStyle-"+styleId,x:16},"VEGA")))}var QueryLegend=react_default.a.memo((function(_ref){var queries=_ref.queries,size=_ref.size,style=_ref.style,data=_ref.data;return react_default.a.createElement("text",{transform:"translate("+size.legend.x+",4)",style:style.styles.legend,className:clsx("legendTextStyle-"+style.id,style.classNames.legend)},queries.map((function(q,i){var count=null;return isSetQuery(q)?count=q.set.cardinality:isElemQuery(q)&&(count=q.elems instanceof Set?q.elems.size:q.elems.length),react_default.a.createElement(react_default.a.Fragment,{key:q.name},react_default.a.createElement("tspan",{className:"fillQ"+i+"-"+data.id},"  ⬤ "),react_default.a.createElement("tspan",null,q.name,null!=count?": "+data.sets.format(count):""))})))})),D3HorizontalTick=react_default.a.memo((function(_ref){var pos=_ref.pos,spacing=_ref.spacing,tickSizeInner=_ref.tickSizeInner,orient=_ref.orient,name=_ref.name,style=_ref.style,k="top"===orient||"left"===orient?-1:1;return react_default.a.createElement("g",{transform:"translate(0, "+(pos+.5)+")"},name&&react_default.a.createElement("text",{x:k*spacing,dy:"0.32em",className:clsx("axisTextStyle-"+style.id,"right"===orient?"startText-"+style.id:"endText-"+style.id,style.classNames.axisTick),style:style.styles.axisTick},name),react_default.a.createElement("line",{x2:k*tickSizeInner,className:"axisLine-"+style.id}))})),D3VerticalTick=react_default.a.memo((function(_ref2){var pos=_ref2.pos,name=_ref2.name,spacing=_ref2.spacing,orient=_ref2.orient,tickSizeInner=_ref2.tickSizeInner,style=_ref2.style,k="top"===orient||"left"===orient?-1:1;return react_default.a.createElement("g",{transform:"translate("+(pos+.5)+", 0)"},name&&react_default.a.createElement("text",{y:k*spacing,dy:"top"===orient?"0em":"0.71em",className:clsx("axisTextStyle-"+style.id,style.classNames.axisTick),style:style.styles.axisTick},name),react_default.a.createElement("line",{y2:k*tickSizeInner,className:"axisLine-"+style.id}))}));function D3Axis(_ref3){var scale=_ref3.scale,orient=_ref3.orient,_ref3$tickSizeInner=_ref3.tickSizeInner,tickSizeInner=void 0===_ref3$tickSizeInner?6:_ref3$tickSizeInner,_ref3$tickSizeOuter=_ref3.tickSizeOuter,tickSizeOuter=void 0===_ref3$tickSizeOuter?6:_ref3$tickSizeOuter,_ref3$tickPadding=_ref3.tickPadding,tickPadding=void 0===_ref3$tickPadding?3:_ref3$tickPadding,size=_ref3.size,shift=_ref3.shift,style=_ref3.style,transform=_ref3.transform,spacing=Math.max(tickSizeInner,0)+tickPadding,range0=shift,range1=size,k="top"===orient||"left"===orient?-1:1,D3Tick="left"===orient||"right"===orient?D3HorizontalTick:D3VerticalTick,values=scale.ticks().map((function(d){return"number"==typeof d?{value:d,label:d+""}:d}));return react_default.a.createElement("g",{transform:transform},values.map((function(d){return react_default.a.createElement(D3Tick,{key:d.value,pos:scale(d.value),name:d.label,spacing:spacing,tickSizeInner:tickSizeInner,orient:orient,style:style})})),react_default.a.createElement("path",{className:"axisLine-"+style.id,d:"left"===orient||"right"===orient?tickSizeOuter?"M"+k*tickSizeOuter+","+range0+"H0.5V"+range1+"H"+k*tickSizeOuter:"M0.5,"+range0+"V"+range1:tickSizeOuter?"M"+range0+","+k*tickSizeOuter+"V0.5H"+range1+"V"+k*tickSizeOuter:"M"+range0+",0.5H"+range1}))}var UpSetAxis=react_default.a.memo((function(_ref){var size=_ref.size,style=_ref.style,data=_ref.data,setPosGen=addonPositionGenerator(size.sets.w+size.labels.w+size.cs.w),combinationPosGen=addonPositionGenerator(size.cs.h+size.sets.h),csNameOffset="auto"===style.cs.offset?data.cs.labelOffset:style.cs.offset,setNameOffset="auto"===style.sets.offset?data.sets.labelOffset:style.sets.offset;return react_default.a.createElement("g",null,react_default.a.createElement("g",{transform:"translate("+size.cs.x+","+size.cs.y+")","data-upset":"csaxis"},react_default.a.createElement(D3Axis,{scale:data.cs.y,orient:"left",size:size.cs.h,shift:size.cs.h-data.cs.yAxisWidth,style:style}),react_default.a.createElement("line",{x1:0,x2:size.cs.w,y1:size.cs.h+1,y2:size.cs.h+1,className:"axisLine-"+style.id}),react_default.a.createElement("text",{className:clsx("cChartTextStyle-"+style.id,style.classNames.chartLabel),style:style.styles.chartLabel,transform:"translate("+-csNameOffset+", "+size.cs.h/2+")rotate(-90)"},style.cs.name),size.cs.addons.map((function(addon){return react_default.a.createElement("text",{key:addon.name,className:clsx("cChartTextStyle-"+style.id,style.classNames.chartLabel),style:style.styles.chartLabel,transform:"translate("+-csNameOffset+", "+(combinationPosGen(addon)+addon.size/2)+")rotate(-90)"},addon.name)}))),react_default.a.createElement("g",{transform:"translate("+size.sets.x+","+size.sets.y+")","data-upset":"setaxis"},react_default.a.createElement(D3Axis,{scale:data.sets.x,orient:"bottom",size:size.sets.w,shift:size.sets.w-data.sets.xAxisWidth,transform:"translate(0, "+size.sets.h+")",style:style}),react_default.a.createElement("text",{className:clsx("sChartTextStyle-"+style.id,style.classNames.chartLabel),style:style.styles.chartLabel,transform:"translate("+size.sets.w/2+", "+(size.sets.h+setNameOffset)+")"},style.sets.name),size.sets.addons.map((function(addon){return react_default.a.createElement("text",{key:addon.name,className:clsx("sChartTextStyle-"+style.id,style.classNames.chartLabel),style:style.styles.chartLabel,transform:"translate("+(setPosGen(addon)+addon.size/2)+", "+(size.sets.h+setNameOffset)+")"},addon.name)}))))})),UpSetDot=react_default.a.memo((function(_ref){var cx=_ref.cx,r=_ref.r,cy=_ref.cy,name=_ref.name,className=_ref.className,style=_ref.style;return react_default.a.createElement("circle",{r:r,cx:cx,cy:cy,className:className,style:style},react_default.a.createElement("title",null,name))})),CombinationChart=react_default.a.memo((function(_ref){var d=_ref.d,onClick=_ref.onClick,onMouseEnter=_ref.onMouseEnter,onMouseLeave=_ref.onMouseLeave,onContextMenu=_ref.onContextMenu,className=_ref.className,data=_ref.data,size=_ref.size,style=_ref.style,children=_ref.children,y=data.cs.y(d.cardinality),genPosition=addonPositionGenerator(size.cs.h+size.sets.h);return react_default.a.createElement("g",{transform:"translate("+data.cs.x(d)+", 0)",onMouseEnter:onMouseEnter(d),onMouseLeave:onMouseLeave,onClick:onClick(d),onContextMenu:onContextMenu(d),className:className,"data-cardinality":d.cardinality},react_default.a.createElement("title",null,d.name,": ",data.cs.format(d.cardinality)),react_default.a.createElement("rect",{y:-size.cs.before,width:data.cs.bandWidth,height:size.sets.h+size.cs.h+size.cs.before+size.cs.after,className:"hoverBar-"+style.id}),react_default.a.createElement("rect",{y:y,height:size.cs.h-y,width:data.cs.bandWidth,className:clsx("fillPrimary-"+style.id,style.classNames.bar),style:style.styles.bar}),react_default.a.createElement("text",{y:y-style.barLabelOffset,x:data.cs.bandWidth/2,style:style.styles.barLabel,className:clsx("cBarTextStyle-"+style.id,style.classNames.barLabel)},data.cs.format(d.cardinality)),react_default.a.createElement("text",{y:-style.barLabelOffset-size.cs.before,x:data.cs.bandWidth/2,style:style.styles.barLabel,className:clsx("hoverBarTextStyle-"+style.id,style.classNames.barLabel)},d.name),data.sets.v.map((function(s,i){return react_default.a.createElement(UpSetDot,{key:data.sets.keys[i],r:data.r,cx:data.cs.cx,cy:data.sets.y(s)+data.sets.cy,name:data.cs.has(d,s)?s.name:d.name,style:style.styles.dot,className:clsx(d.sets.has(s)?"fillPrimary-"+style.id:"fillNotMember-"+style.id,style.classNames.dot)})})),1<d.sets.size&&react_default.a.createElement("line",{x1:data.cs.cx,y1:data.sets.y(data.sets.v.find((function(p){return data.cs.has(d,p)})))+data.sets.cy,x2:data.cs.cx,y2:data.sets.y(data.sets.rv.find((function(p){return data.cs.has(d,p)})))+data.sets.cy,className:"upsetLine-"+data.id}),size.cs.addons.map((function(addon){return react_default.a.createElement("g",{key:addon.name,transform:"translate(0,"+genPosition(addon)+")"},addon.render({set:d,width:data.cs.bandWidth,height:addon.size,theme:style.theme}))})),children)})),SetChart=react_default.a.memo((function(_ref){var d=_ref.d,i=_ref.i,onMouseEnter=_ref.onMouseEnter,onMouseLeave=_ref.onMouseLeave,onClick=_ref.onClick,onContextMenu=_ref.onContextMenu,className=_ref.className,size=_ref.size,data=_ref.data,style=_ref.style,children=_ref.children,x=data.sets.x(d.cardinality),genPosition=addonPositionGenerator(size.sets.w+size.labels.w+size.cs.w);return react_default.a.createElement("g",{transform:"translate(0, "+data.sets.y(d)+")",onMouseEnter:onMouseEnter(d),onMouseLeave:onMouseLeave,onClick:onClick(d),onContextMenu:onContextMenu(d),className:className,"data-cardinality":d.cardinality},react_default.a.createElement("title",null,d.name,": ",data.sets.format(d.cardinality)),react_default.a.createElement("rect",{x:-size.sets.before,width:size.sets.w+size.labels.w+size.cs.w+size.sets.after,height:data.sets.bandWidth,className:"hoverBar-"+style.id}),1==i%2&&react_default.a.createElement("rect",{x:size.sets.w,width:size.labels.w+size.cs.w+size.sets.after,height:data.sets.bandWidth,className:"fillAlternating-"+style.id}),react_default.a.createElement("rect",{x:x,width:size.sets.w-x,height:data.sets.bandWidth,className:clsx("fillPrimary-"+style.id,style.classNames.bar),style:style.styles.bar}),react_default.a.createElement("text",{x:x,dx:-style.barLabelOffset,y:data.sets.bandWidth/2,style:style.styles.barLabel,className:clsx("sBarTextStyle-"+style.id,style.classNames.barLabel)},data.sets.format(d.cardinality)),react_default.a.createElement("text",{x:size.sets.w+size.labels.w/2,y:data.sets.bandWidth/2,className:clsx("setTextStyle-"+style.id,style.classNames.setLabel),style:style.styles.setLabel,clipPath:"url(#clip-"+size.id+")"},d.name),size.sets.addons.map((function(addon){return react_default.a.createElement("g",{key:addon.name,transform:"translate("+genPosition(addon)+",0)"},addon.render({set:d,width:addon.size,height:data.sets.bandWidth,theme:style.theme}))})),children)})),UpSetChart=react_default.a.memo((function(_ref){var data=_ref.data,size=_ref.size,style=_ref.style,onHover=_ref.onHover,onClick=_ref.onClick,onContextMenu=_ref.onContextMenu,setChildrenFactory=_ref.setChildrenFactory,combinationChildrenFactory=_ref.combinationChildrenFactory,_React$useMemo=react_default.a.useMemo((function(){return[wrap(onClick),wrap(onHover),wrap(onContextMenu),onHover?function(evt){return onHover(null,evt.nativeEvent)}:void 0]}),[onClick,onHover,onContextMenu]),onClickImpl=_React$useMemo[0],onMouseEnterImpl=_React$useMemo[1],onContextMenuImpl=_React$useMemo[2],onMouseLeaveImpl=_React$useMemo[3];return react_default.a.createElement("g",{className:onClick?"clickAble-"+style.id:void 0},react_default.a.createElement("g",{transform:"translate("+size.sets.x+","+size.sets.y+")","data-upset":"sets"},data.sets.v.map((function(d,i){return react_default.a.createElement(SetChart,{key:data.sets.keys[i],d:d,i:i,onClick:onClickImpl,onMouseEnter:onMouseEnterImpl,onMouseLeave:onMouseLeaveImpl,onContextMenu:onContextMenuImpl,className:onClick||onHover?"interactive-"+style.id:void 0,data:data,style:style,size:size},setChildrenFactory&&setChildrenFactory(d))}))),react_default.a.createElement("g",{transform:"translate("+size.cs.x+","+size.cs.y+")","data-upset":"cs"},data.cs.v.map((function(d,i){return react_default.a.createElement(CombinationChart,{key:data.cs.keys[i],d:d,onClick:onClickImpl,onMouseEnter:onMouseEnterImpl,onMouseLeave:onMouseLeaveImpl,onContextMenu:onContextMenuImpl,className:onClick||onHover?"interactive-"+style.id:void 0,data:data,style:style,size:size},combinationChildrenFactory&&combinationChildrenFactory(d))}))))}));function CombinationSelectionChart(_ref){var data=_ref.data,size=_ref.size,style=_ref.style,elemOverlap=_ref.elemOverlap,secondary=_ref.secondary,tooltip=_ref.tooltip,suffix=_ref.suffix,transform=_ref.transform,empty=_ref.empty,combinationAddons=_ref.combinationAddons,width=data.cs.bandWidth,totalHeight=size.cs.h+size.sets.h,height=size.cs.h,className=clsx("fill"+suffix,!tooltip&&"pnone-"+style.id,style.classNames.bar);return react_default.a.createElement("g",{transform:transform,"data-upset":secondary?"cs-q":"cs-s"},data.cs.v.map((function(d,i){var x=data.cs.x(d),key=data.cs.keys[i];if(empty&&!secondary)return react_default.a.createElement("rect",{key:key,x:x,y:height,height:0,width:width,className:className,style:style.styles.bar},tooltip&&react_default.a.createElement("title",null));var o=elemOverlap(d);if(0===o)return null;var y=data.cs.y(o),title=tooltip&&react_default.a.createElement("title",null,d.name+" ∩ "+tooltip+": "+o),content=secondary?react_default.a.createElement("path",{key:key,transform:"translate("+x+", "+y+")",d:"M0,-1 l"+width+",0 l0,2 l"+-width+",0 L-"+data.triangleSize+",-"+data.triangleSize+" L-"+data.triangleSize+","+data.triangleSize+" Z",className:className,"data-i":i,"data-cardinality":o},title):react_default.a.createElement("rect",{key:key,x:x,y:y,height:height-y,"data-i":i,"data-cardinality":o,width:width,className:className,style:style.styles.bar},title),genPosition=addonPositionGenerator(totalHeight),addons=combinationAddons.map((function(addon){var v=genPosition(addon),content=addon.render({set:d,width:width,height:addon.size,theme:style.theme});return content?react_default.a.createElement("g",{key:addon.name,transform:"translate("+x+","+v+")"},content):null})).filter(Boolean);return 0===addons.length?content:react_default.a.createElement("g",{key:key},content,addons)})))}function SetSelectionChart(_ref){var data=_ref.data,size=_ref.size,style=_ref.style,elemOverlap=_ref.elemOverlap,suffix=_ref.suffix,secondary=_ref.secondary,empty=_ref.empty,tooltip=_ref.tooltip,setAddons=_ref.setAddons,transform=_ref.transform,width=size.sets.w,totalWidth=size.sets.w+size.labels.w+size.cs.w,height=data.sets.bandWidth,className=clsx("fill"+suffix,!tooltip&&" pnone-"+style.id,style.classNames.bar);return react_default.a.createElement("g",{transform:transform,"data-upset":secondary?"sets-q":"sets-s"},data.sets.v.map((function(d,i){var y=data.sets.y(d),key=data.sets.keys[i];if(empty&&!secondary)return react_default.a.createElement("rect",{key:key,x:width,y:y,width:0,height:height,className:className,style:style.styles.bar},tooltip&&react_default.a.createElement("title",null));var o=elemOverlap(d);if(0===o)return null;var x=data.sets.x(o),title=tooltip&&react_default.a.createElement("title",null,d.name+" ∩ "+tooltip+": "+o),content=secondary?react_default.a.createElement("path",{key:key,transform:"translate("+x+", "+(y+height)+")",d:"M1,0 l0,"+-height+" l-2,0 l0,"+height+" L-"+data.triangleSize+","+data.triangleSize+" L"+data.triangleSize+","+data.triangleSize+" Z","data-i":i,"data-cardinality":o,className:className},title):react_default.a.createElement("rect",{key:key,"data-i":i,"data-cardinality":o,x:x,y:y,width:width-x,height:height,className:className,style:style.styles.bar},title),genPosition=addonPositionGenerator(totalWidth),addons=setAddons.map((function(addon){var v=genPosition(addon),content=addon.render({set:d,width:addon.size,height:height,theme:style.theme});return content?react_default.a.createElement("g",{key:addon.name,transform:"translate("+v+","+y+")"},content):null})).filter(Boolean);return 0===addons.length?content:react_default.a.createElement("g",{key:key},content,addons)})))}var EMPTY_ARRAY$1=[],UpSetQueries=react_default.a.memo((function(_ref){var size=_ref.size,data=_ref.data,style=_ref.style,onHover=_ref.onHover,secondary=_ref.secondary,queries=_ref.queries,someAddon=size.sets.addons.some((function(s){return null!=s.renderQuery}))||size.cs.addons.some((function(s){return null!=s.renderQuery})),qs=Object(react.useMemo)((function(){return queries.map((function(q){return react_esm_extends(react_esm_extends({},q),{},{overlap:queryOverlap(q,"intersection",data.toElemKey),elemOverlap:someAddon?queryElemOverlap(q,"intersection",data.toElemKey):null})}))}),[queries,someAddon,data.toElemKey]);function wrapAddon(addon,query,overlapper,secondary){return react_esm_extends(react_esm_extends({},addon),{},{render:function(props){var overlap=overlapper(props.set);return addon.renderQuery?addon.renderQuery(react_esm_extends({query:query,overlap:overlap,secondary:secondary},props)):null}})}return react_default.a.createElement("g",{className:onHover&&!secondary?"pnone-"+style.id:void 0},react_default.a.createElement("g",{transform:"translate("+size.sets.x+","+size.sets.y+")"},qs.map((function(q,i){return react_default.a.createElement(SetSelectionChart,{key:q.name,data:data,size:size,style:style,elemOverlap:q.overlap,suffix:"Q"+i+"-"+data.id,secondary:secondary||0<i,tooltip:onHover&&!(secondary||0<i)?void 0:q.name,setAddons:0===size.sets.addons.length?EMPTY_ARRAY$1:size.sets.addons.map((function(a){return wrapAddon(a,q,q.elemOverlap,secondary||0<i)}))})}))),react_default.a.createElement("g",{transform:"translate("+size.cs.x+","+size.cs.y+")"},qs.map((function(q,i){return react_default.a.createElement(CombinationSelectionChart,{key:q.name,data:data,size:size,style:style,elemOverlap:q.overlap,suffix:"Q"+i+"-"+data.id,secondary:secondary||0<i,tooltip:onHover&&!(secondary||0<i)?void 0:q.name,combinationAddons:0===size.cs.addons.length?EMPTY_ARRAY$1:size.cs.addons.map((function(a){return wrapAddon(a,q,q.elemOverlap,secondary||0<i)}))})}))))}));function LabelsSelection(_ref){var data=_ref.data,size=_ref.size,style=_ref.style,selection=_ref.selection;return selection&&"set"===selection.type?react_default.a.createElement("rect",{y:data.sets.y(selection),width:size.labels.w+size.cs.w+size.sets.after,height:data.sets.bandWidth,className:"selectionHint-"+style.id}):null}function UpSetSelectionChart(_ref){var data=_ref.data,size=_ref.size,style=_ref.style,selection=_ref.selection,cy=data.sets.bandWidth/2,cx=data.cs.cx,r=data.r,height=size.sets.h+size.sets.after,width=data.cs.bandWidth;if(!selection||"set"===selection.type)return null;var d=selection,index=data.cs.keys.indexOf(data.toKey(d));return react_default.a.createElement("g",{transform:"translate("+(size.labels.w+data.cs.x(d))+", 0)","data-upset":"cs-ss","data-i":index},react_default.a.createElement("rect",{width:width,height:height,className:"selectionHint-"+style.id}),data.sets.v.filter((function(s){return data.cs.has(d,s)})).map((function(s){return react_default.a.createElement(UpSetDot,{key:data.toKey(s),r:1.1*r,cx:cx,cy:data.sets.y(s)+cy,name:s.name,className:clsx("fillSelection-"+style.id,"pnone-"+style.id,style.classNames.dot),style:style.styles.dot})})),1<d.sets.size&&react_default.a.createElement("line",{x1:cx,y1:data.sets.y(data.sets.v.find((function(p){return data.cs.has(d,p)})))+cy,x2:cx,y2:data.sets.y(data.sets.rv.find((function(p){return data.cs.has(d,p)})))+cy,className:"upsetSelectionLine-"+data.id}))}var EMPTY_ARRAY$2=[];function react_esm_isSetLike(s){return null!=s&&!Array.isArray(s)}function elemOverlapOf(query,toElemKey){var f=setOverlapFactory(query,toElemKey);return function(s){return f(s.elems).intersection}}function noOverlap(){return 0}function UpSetSelection(_ref){var size=_ref.size,data=_ref.data,style=_ref.style,selection=_ref.selection,onHover=_ref.onHover,empty=style.emptySelection,selectionOverlap=function(){if(!selection)return noOverlap;if("function"==typeof selection)return selection;if(Array.isArray(selection))return elemOverlapOf(selection,data.toElemKey);var ss=selection;if(ss.overlap)return ss.overlap;var f=elemOverlapOf(ss.elems,data.toElemKey);return function(s){return s.overlap?s.overlap(ss):f(s)}}(),selectionName=Array.isArray(selection)?"Array("+selection.length+")":"function"==typeof selection?"?":null==selection?void 0:selection.name,someAddon=size.sets.addons.some((function(s){return null!=s.renderSelection}))||size.cs.addons.some((function(s){return null!=s.renderSelection})),selectionElemOverlap=selection&&"function"!=typeof selection&&someAddon?function elemElemOverlapOf(query,toElemKey){var f=setElemOverlapFactory(query,toElemKey);return function(s){return f(s.elems).intersection}}(Array.isArray(selection)?selection:selection.elems,data.toElemKey):null;function wrapAddon(addon){return react_esm_extends(react_esm_extends({},addon),{},{render:function(props){var overlap=selectionElemOverlap?selectionElemOverlap(props.set):null;return addon.renderSelection?addon.renderSelection(react_esm_extends({selection:selection,selectionColor:style.selectionColor,overlap:overlap},props)):null}})}return react_default.a.createElement("g",{className:onHover?"pnone-"+style.id:void 0},(selection||empty)&&react_default.a.createElement(CombinationSelectionChart,{data:data,size:size,style:style,transform:"translate("+size.cs.x+","+size.cs.y+")",empty:empty&&!selection,elemOverlap:selectionOverlap,suffix:"Selection-"+style.id,tooltip:onHover?void 0:selectionName,combinationAddons:0===size.cs.addons.length?EMPTY_ARRAY$2:size.cs.addons.map(wrapAddon)}),(selection||empty)&&react_default.a.createElement(SetSelectionChart,{data:data,size:size,style:style,transform:"translate("+size.sets.x+","+size.sets.y+")",empty:empty&&!selection,elemOverlap:selectionOverlap,suffix:"Selection-"+style.id,tooltip:onHover?void 0:selectionName,setAddons:0===size.sets.addons.length?EMPTY_ARRAY$2:size.sets.addons.map(wrapAddon)}),react_default.a.createElement("g",{transform:"translate("+size.labels.x+","+size.labels.y+")"},react_esm_isSetLike(selection)&&react_default.a.createElement(LabelsSelection,{data:data,size:size,style:style,selection:selection}),react_esm_isSetLike(selection)&&react_default.a.createElement(UpSetSelectionChart,{data:data,size:size,style:style,selection:selection})))}var lightTheme={selectionColor:"#ffa500",color:"#000000",textColor:"#000000",hoverHintColor:"#cccccc",notMemberColor:"#d3d3d3",alternatingBackgroundColor:"#0000000d"},darkTheme={selectionColor:"#ffa500",color:"#cccccc",textColor:"#ffffff",hoverHintColor:"#d9d9d9",notMemberColor:"#666666",alternatingBackgroundColor:"#ffffff33"};function fillDefaults(props){var combinations,theme=function getTheme(theme){return"dark"===theme?darkTheme:lightTheme}(props.theme);return Object.assign({theme:"light",padding:20,barPadding:.3,dotPadding:.7,combinations:DEFAULT_COMBINATIONS,selection:null,combinationName:null==props.combinations||(combinations=props.combinations,Array.isArray(combinations))||"union"!==props.combinations.type?"Intersection Size":"Union Size",barLabelOffset:2,setNameAxisOffset:"auto",combinationNameAxisOffset:"auto",setName:"Set Size",fontFamily:"sans-serif",widthRatios:DEFAULT_WIDTH_RATIO,heightRatios:DEFAULT_HEIGHT_RATIO,queries:EMPTY_ARRAY,queryLegend:null!=props.queries&&0<props.queries.length,exportButtons:!0,numericScale:"linear",bandScale:"band",className:"",fontSizes:DEFAULT_FONTSIZES,classNames:EMPTY_OBJECT,style:EMPTY_OBJECT,styles:EMPTY_OBJECT,childrenFactories:EMPTY_OBJECT,setAddons:EMPTY_ARRAY,combinationAddons:EMPTY_ARRAY,emptySelection:!0,toKey:model_esm_toKey},theme,props,props.fontSizes?{fontSizes:Object.assign({},DEFAULT_FONTSIZES,props.fontSizes)}:EMPTY_OBJECT)}var UpSetJS=Object(react.forwardRef)((function(props,ref){var _fillDefaults=fillDefaults(props),id=_fillDefaults.id,className=_fillDefaults.className,style=_fillDefaults.style,width=_fillDefaults.width,height=_fillDefaults.height,margin=_fillDefaults.padding,barPadding=_fillDefaults.barPadding,sets=_fillDefaults.sets,toKey=_fillDefaults.toKey,toElemKey=_fillDefaults.toElemKey,combinations=_fillDefaults.combinations,_fillDefaults$selecti=_fillDefaults.selection,selection=void 0===_fillDefaults$selecti?null:_fillDefaults$selecti,_onClick=_fillDefaults.onClick,onContextMenu=_fillDefaults.onContextMenu,onHover=_fillDefaults.onHover,theme=_fillDefaults.theme,dotPadding=_fillDefaults.dotPadding,setChildrenFactory=_fillDefaults.setChildrenFactory,combinationChildrenFactory=_fillDefaults.combinationChildrenFactory,widthRatios=_fillDefaults.widthRatios,heightRatios=_fillDefaults.heightRatios,_fillDefaults$queries=_fillDefaults.queries,queries=void 0===_fillDefaults$queries?[]:_fillDefaults$queries,setAddons=_fillDefaults.setAddons,combinationAddons=_fillDefaults.combinationAddons,alternatingBackgroundColor=_fillDefaults.alternatingBackgroundColor,bandScale=_fillDefaults.bandScale,barLabelOffset=_fillDefaults.barLabelOffset,classNames=_fillDefaults.classNames,color=_fillDefaults.color,combinationName=_fillDefaults.combinationName,combinationNameAxisOffset=_fillDefaults.combinationNameAxisOffset,exportButtons=_fillDefaults.exportButtons,fontFamily=_fillDefaults.fontFamily,fontSizes=_fillDefaults.fontSizes,hoverHintColor=_fillDefaults.hoverHintColor,notMemberColor=_fillDefaults.notMemberColor,numericScale=_fillDefaults.numericScale,queryLegend=_fillDefaults.queryLegend,selectionColor=_fillDefaults.selectionColor,setName=_fillDefaults.setName,setNameAxisOffset=_fillDefaults.setNameAxisOffset,cStyles=_fillDefaults.styles,textColor=_fillDefaults.textColor,emptySelection=_fillDefaults.emptySelection,fontAxisTick=fontSizes.axisTick,fontBarLabel=fontSizes.barLabel,fontChartLabel=fontSizes.chartLabel,fontLegend=fontSizes.legend,fontSetLabel=fontSizes.setLabel,styleId=Object(react.useMemo)((function(){return id||generateId()}),[id,fontFamily,fontAxisTick,fontBarLabel,fontChartLabel,fontLegend,fontSetLabel,textColor,hoverHintColor,color,selectionColor,notMemberColor,alternatingBackgroundColor]),styleInfo=Object(react.useMemo)((function(){return function deriveStyleDependent(theme,styles,classNames,combinationName,combinationNameAxisOffset,setName,setNameAxisOffset,styleId,barLabelOffset,selectionColor,emptySelection){return{theme:theme,styles:styles,classNames:classNames,cs:{name:combinationName,offset:combinationNameAxisOffset},sets:{name:setName,offset:setNameAxisOffset},emptySelection:emptySelection,id:styleId,barLabelOffset:barLabelOffset,selectionColor:selectionColor}}(theme,cStyles,classNames,combinationName,combinationNameAxisOffset,setName,setNameAxisOffset,styleId,barLabelOffset,selectionColor,emptySelection)}),[theme,cStyles,classNames,barLabelOffset,combinationName,combinationNameAxisOffset,setName,setNameAxisOffset,styleId,selectionColor,emptySelection]),sizeInfo=Object(react.useMemo)((function(){return function deriveSizeDependent(width,height,margin,barPadding,widthRatios,heightRatios,setAddons,combinationAddons,id){var setAddonsBefore=setAddons.reduce((function(acc,a){return acc+("before"===a.position?a.size:0)}),0),setAddonsAfter=setAddons.reduce((function(acc,a){return acc+("before"!==a.position?a.size:0)}),0),combnationAddonsBefore=combinationAddons.reduce((function(acc,a){return acc+("before"===a.position?a.size:0)}),0),combinationAddonsAfter=combinationAddons.reduce((function(acc,a){return acc+("before"!==a.position?a.size:0)}),0),h=height-2*margin-20-combinationAddonsAfter-combnationAddonsBefore,w=width-2*margin-setAddonsBefore-setAddonsAfter,setWidth=w*widthRatios[0],labelsWidth=w*widthRatios[1],combinationHeight=h*heightRatios[0];return{id:id||generateId(),cs:{before:combnationAddonsBefore,after:combinationAddonsAfter,x:setAddonsBefore+setWidth+labelsWidth,y:combnationAddonsBefore,w:w-setWidth-labelsWidth,h:combinationHeight,addons:combinationAddons},labels:{x:setAddonsBefore+setWidth,y:combnationAddonsBefore+combinationHeight,w:labelsWidth,h:h-combinationHeight},sets:{before:setAddonsBefore,after:setAddonsAfter,x:setAddonsBefore,y:combnationAddonsBefore+combinationHeight,w:setWidth,h:h-combinationHeight,addons:setAddons},padding:barPadding,legend:{x:width/2},margin:margin,w:width,h:height}}(width,height,margin,barPadding,widthRatios,heightRatios,setAddons,combinationAddons,id)}),[width,height,margin,barPadding,widthRatios,heightRatios,setAddons,combinationAddons,id]),dataInfo=Object(react.useMemo)((function(){return deriveDataDependent(sets,combinations,sizeInfo,numericScale,bandScale,barLabelOffset+Number.parseInt(null!=fontBarLabel?fontBarLabel:"10"),dotPadding,barPadding,Number.parseInt(null!=fontAxisTick?fontAxisTick:"10"),toKey,toElemKey,id)}),[sets,combinations,sizeInfo,numericScale,bandScale,barLabelOffset,fontBarLabel,dotPadding,barPadding,fontAxisTick,toKey,toElemKey,id]),rules="\n  .root-"+styleId+" {\n    "+(fontFamily?"font-family: "+fontFamily+";":"")+"\n  }\n  .axisTextStyle-"+styleId+" {\n    fill: "+textColor+";\n    "+(fontAxisTick?"font-size: "+fontAxisTick+";":"")+"\n    text-anchor: middle;\n  }\n  .barTextStyle-"+styleId+" {\n    fill: "+textColor+";\n    "+(fontBarLabel?"font-size: "+fontBarLabel+";":"")+"\n  }\n  .cBarTextStyle-"+styleId+" {\n    fill: "+textColor+";\n    "+(fontBarLabel?"font-size: "+fontBarLabel+";":"")+"\n    text-anchor: middle;\n  }\n  .sBarTextStyle-"+styleId+" {\n    fill: "+textColor+";\n    "+(fontBarLabel?"font-size: "+fontBarLabel+";":"")+"\n    text-anchor: end;\n    dominant-baseline: central;\n  }\n  .hoverBarTextStyle-"+styleId+" {\n    "+(fontBarLabel?"font-size: "+fontBarLabel+";":"")+"\n    fill: "+hoverHintColor+";\n    display: none;\n    text-anchor: middle;\n  }\n  .setTextStyle-"+styleId+" {\n    fill: "+textColor+";\n    "+(fontSetLabel?"font-size: "+fontSetLabel+";":"")+"\n    text-anchor: middle;\n    dominant-baseline: central;\n  }\n  .cChartTextStyle-"+styleId+" {\n    fill: "+textColor+";\n    "+(fontChartLabel?"font-size: "+fontChartLabel+";":"")+"\n    text-anchor: middle;\n  }\n  .sChartTextStyle-"+styleId+" {\n    fill: "+textColor+";\n    "+(fontChartLabel?"font-size: "+fontChartLabel+";":"")+"\n    text-anchor: middle;\n    dominant-baseline: hanging;\n  }\n  .exportTextStyle-"+styleId+" {\n    fill: "+textColor+";\n    "+(fontBarLabel?"font-size: "+fontBarLabel+";":"")+"\n  }\n  .legendTextStyle-"+styleId+" {\n    fill: "+textColor+";\n    "+(fontLegend?"font-size: "+fontLegend+";":"")+"\n    text-anchor: middle;\n    dominant-baseline: hanging;\n    pointer-events: none;\n  }\n  .startText-"+styleId+" {\n    text-anchor: start;\n  }\n  .endText-"+styleId+" {\n    text-anchor: end;\n  }\n  .pnone-"+styleId+" {\n    pointer-events: none;\n  }\n  .fillPrimary-"+styleId+" { fill: "+color+"; }\n  .fillSelection-"+styleId+" { fill: "+selectionColor+"; }\n  .fillNotMember-"+styleId+" { fill: "+notMemberColor+"; }\n  .fillAlternating-"+styleId+" { fill: "+(alternatingBackgroundColor||"transparent")+"; }\n  .fillTransparent-"+styleId+" { fill: transparent; }\n\n  .selectionHint-"+styleId+" {\n    fill: transparent;\n    pointer-events: none;\n    stroke: "+selectionColor+";\n  }\n\n  .axisLine-"+styleId+" {\n    fill: none;\n    stroke: "+textColor+";\n  }\n  .clickAble-"+styleId+" {\n    cursor: pointer;\n  }\n\n  .hoverBar-"+styleId+" {\n    fill: transparent;\n  }\n\n  .interactive-"+styleId+":hover > .hoverBar-"+styleId+" {\n    stroke: "+hoverHintColor+";\n  }\n  .interactive-"+styleId+":hover > .hoverBarTextStyle-"+styleId+" {\n    display: unset;\n  }\n\n  .exportButtons-"+styleId+" {\n    text-anchor: middle;\n  }\n  .exportButton-"+styleId+" {\n    cursor: pointer;\n    opacity: 0.5;\n  }\n  .exportButton-"+styleId+":hover {\n    opacity: 1;\n  }\n  .exportButton-"+styleId+" > rect {\n    fill: none;\n    stroke: "+textColor+";\n  }\n\n  .upsetLine-"+dataInfo.id+" {\n    stroke-width: "+.6*dataInfo.r+";\n    stroke: "+color+";\n  }\n\n  .upsetSelectionLine-"+dataInfo.id+" {\n    stroke-width: "+.6*dataInfo.r*1.1+";\n    stroke: "+selectionColor+";\n    pointer-events: none;\n  }\n  "+queries.map((function(q,i){return".fillQ"+i+"-"+dataInfo.id+" {\n    fill: "+q.color+";\n  }"})).join("\n")+"\n  ";return react_default.a.createElement("svg",{id:id,className:clsx("root-"+styleId,className),style:style,width:width,height:height,ref:ref,viewBox:"0 0 "+width+" "+height,"data-theme":null!=theme?theme:"light"},react_default.a.createElement("style",null,rules),react_default.a.createElement("defs",null,react_default.a.createElement("clipPath",{id:"clip-"+sizeInfo.id},react_default.a.createElement("rect",{x:sizeInfo.sets.w,y:0,width:sizeInfo.labels.w,height:sizeInfo.sets.h}))),queryLegend&&react_default.a.createElement(QueryLegend,{queries:queries,size:sizeInfo,style:styleInfo,data:dataInfo}),exportButtons&&react_default.a.createElement(ExportButtons,{transform:"translate("+(sizeInfo.w-2)+","+(sizeInfo.h-3)+")",styleId:styleId}),react_default.a.createElement("g",{transform:"translate("+margin+","+margin+")","data-upset":"base"},_onClick&&react_default.a.createElement("rect",{width:sizeInfo.cs.x,height:sizeInfo.sets.y,onClick:function(evt){return _onClick(null,evt.nativeEvent)},className:"fillTransparent-"+styleId}),react_default.a.createElement(UpSetAxis,{size:sizeInfo,style:styleInfo,data:dataInfo}),react_default.a.createElement(UpSetChart,{size:sizeInfo,style:styleInfo,data:dataInfo,onClick:_onClick,onHover:onHover,onContextMenu:onContextMenu,setChildrenFactory:setChildrenFactory,combinationChildrenFactory:combinationChildrenFactory}),react_default.a.createElement(UpSetSelection,{size:sizeInfo,style:styleInfo,data:dataInfo,onHover:onHover,selection:selection}),react_default.a.createElement(UpSetQueries,{size:sizeInfo,style:styleInfo,data:dataInfo,onHover:onHover,queries:queries,secondary:null!=onHover||null!=selection})),props.children)}));UpSetJS.__docgenInfo={description:"UpSetJS main React component 2",methods:[],displayName:"UpSetJS"};var react_esm=UpSetJS;"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../../.yarn/$$virtual/@upsetjs-react-virtual-66d30e5a77/1/packages/react/dist/react.esm.js"]={name:"UpSetJS",docgenInfo:UpSetJS.__docgenInfo,path:"../../.yarn/$$virtual/@upsetjs-react-virtual-66d30e5a77/1/packages/react/dist/react.esm.js"});__webpack_exports__.default={parameters:{storySource:{source:"/**\n * @upsetjs/addons\n * https://github.com/upsetjs/upsetjs\n *\n * Copyright (c) 2020 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport React from 'react';\nimport { boxplotAddon } from './Boxplot';\nimport UpSetJS, { extractSets } from '@upsetjs/react';\n\nexport default {\n  title: 'Box plot Addon',\n};\n\ninterface IElem {\n  name: string;\n  sets: string[];\n  value: number;\n}\n\nexport const Default = () => {\n  const elems: IElem[] = [\n    { name: '1', sets: ['one', 'two', 'three'], value: Math.random() },\n    { name: '2', sets: ['one', 'two'], value: Math.random() },\n    { name: '3', sets: ['one'], value: Math.random() },\n    { name: '4', sets: ['two'], value: Math.random() },\n    { name: '5', sets: ['one', 'two', 'three'], value: Math.random() },\n    { name: '6', sets: ['three'], value: Math.random() },\n    { name: '7', sets: ['one', 'three'], value: Math.random() },\n    { name: '8', sets: ['one', 'three'], value: Math.random() },\n    { name: '9', sets: ['three'], value: Math.random() },\n    { name: '10', sets: ['two', 'three'], value: Math.random() },\n    { name: '11', sets: ['one'], value: Math.random() },\n    { name: '12', sets: ['one', 'three'], value: Math.random() },\n    { name: '13', sets: ['one', 'three'], value: Math.random() },\n  ];\n  const sets = extractSets(elems);\n\n  return (\n    <UpSetJS\n      sets={sets}\n      width={1200}\n      height={500}\n      setAddons={[boxplotAddon('value', elems)]}\n      combinationAddons={[boxplotAddon('value', elems, { orient: 'vertical' })]}\n    />\n  );\n};\n",locationsMap:{"box-plot-addon--default":{startLoc:{col:23,line:22},endLoc:{col:1,line:49},startBody:{col:23,line:22},endBody:{col:1,line:49}}}}},title:"Box plot Addon"};var Default=function(){var elems=[{name:"1",sets:["one","two","three"],value:Math.random()},{name:"2",sets:["one","two"],value:Math.random()},{name:"3",sets:["one"],value:Math.random()},{name:"4",sets:["two"],value:Math.random()},{name:"5",sets:["one","two","three"],value:Math.random()},{name:"6",sets:["three"],value:Math.random()},{name:"7",sets:["one","three"],value:Math.random()},{name:"8",sets:["one","three"],value:Math.random()},{name:"9",sets:["three"],value:Math.random()},{name:"10",sets:["two","three"],value:Math.random()},{name:"11",sets:["one"],value:Math.random()},{name:"12",sets:["one","three"],value:Math.random()},{name:"13",sets:["one","three"],value:Math.random()}],sets=function extractSets(elements,acc){void 0===acc&&(acc=function(e){return e.sets});var sets=new Map;return elements.forEach((function(elem){acc(elem).forEach((function(set){sets.has(set)?sets.get(set).push(elem):sets.set(set,[elem])}))})),Array.from(sets).map((function(_ref){var set=_ref[0],elems=_ref[1];return{type:"set",elems:elems,name:set.toString(),cardinality:elems.length}}))}(elems);return react_default.a.createElement(react_esm,{sets:sets,width:1200,height:500,setAddons:[Object(Boxplot.a)("value",elems)],combinationAddons:[Object(Boxplot.a)("value",elems,{orient:"vertical"})]})};Default.displayName="Default",Default.__docgenInfo={description:"",methods:[],displayName:"Default"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Addon.stories.tsx"]={name:"Default",docgenInfo:Default.__docgenInfo,path:"src/components/Addon.stories.tsx"})},511:function(module,exports,__webpack_require__){__webpack_require__(512),__webpack_require__(654),__webpack_require__(655),__webpack_require__(784),__webpack_require__(1403),__webpack_require__(1435),module.exports=__webpack_require__(1439)},574:function(module,exports){},655:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(222)}},[[511,1,2]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,