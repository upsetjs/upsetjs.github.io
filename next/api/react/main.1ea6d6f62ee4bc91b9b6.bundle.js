(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{1448:function(module,exports,__webpack_require__){"use strict";__webpack_require__(1),__webpack_require__(33),__webpack_require__(46),__webpack_require__(59),__webpack_require__(38),__webpack_require__(219),__webpack_require__(220),__webpack_require__(7),__webpack_require__(47);var _clientApi=__webpack_require__(104),_clientLogger=__webpack_require__(57),_configFilename=__webpack_require__(1449);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var source,i=1;i<arguments.length;i++)source=null!=arguments[i]?arguments[i]:{},i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}));return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(_configFilename.args||_configFilename.argTypes)&&_clientLogger.logger.warn("Invalid args/argTypes in config, ignoring.",JSON.stringify({args:_configFilename.args,argTypes:_configFilename.argTypes})),_configFilename.decorators&&_configFilename.decorators.forEach((function(decorator){return(0,_clientApi.addDecorator)(decorator)})),(_configFilename.parameters||_configFilename.globalArgs||_configFilename.globalArgTypes)&&(0,_clientApi.addParameters)(_objectSpread(_objectSpread({},_configFilename.parameters),{},{globalArgs:_configFilename.globalArgs,globalArgTypes:_configFilename.globalArgTypes})),_configFilename.argTypesEnhancers&&_configFilename.argTypesEnhancers.forEach((function(enhancer){return(0,_clientApi.addArgTypesEnhancer)(enhancer)}))},1449:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var _storybook_react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(221),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(135);Object(_storybook_react__WEBPACK_IMPORTED_MODULE_0__.addParameters)({docs:{page:function page(){return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment,{},[react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.Title,{}),react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.Subtitle,{}),react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.Description,{}),react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.Props,{}),react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.Stories,{includePrimary:!0})])}}})},1450:function(module,exports,__webpack_require__){"use strict";(function(module){var _framework=__webpack_require__(221);module._StorybookPreserveDecorators=!0,(0,_framework.configure)([__webpack_require__(1451)],module)}).call(this,__webpack_require__(121)(module))},1451:function(module,exports,__webpack_require__){var map={"./UpSetJS.stories.tsx":1452,"./index.stories.tsx":1460};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=1451},1452:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Default",(function(){return Default})),__webpack_require__.d(__webpack_exports__,"Unions",(function(){return Unions})),__webpack_require__.d(__webpack_exports__,"Interactivity",(function(){return Interactivity})),__webpack_require__.d(__webpack_exports__,"DarkTheme",(function(){return DarkTheme})),__webpack_require__.d(__webpack_exports__,"Click",(function(){return Click})),__webpack_require__.d(__webpack_exports__,"Queries",(function(){return Queries})),__webpack_require__.d(__webpack_exports__,"SmallSets",(function(){return SmallSets})),__webpack_require__.d(__webpack_exports__,"Addon",(function(){return Addon}));__webpack_require__(1),__webpack_require__(13),__webpack_require__(25),__webpack_require__(33),__webpack_require__(29),__webpack_require__(19),__webpack_require__(11),__webpack_require__(20),__webpack_require__(23),__webpack_require__(2),__webpack_require__(4),__webpack_require__(10),__webpack_require__(24),__webpack_require__(17),__webpack_require__(16);var react__WEBPACK_IMPORTED_MODULE_15__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_15___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_15__),_UpSetJS__WEBPACK_IMPORTED_MODULE_16__=__webpack_require__(72),_upsetjs_model__WEBPACK_IMPORTED_MODULE_17__=__webpack_require__(40);function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _extends(){return(_extends=Object.assign||function(target){for(var source,i=1;i<arguments.length;i++)for(var key in source=arguments[i])Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key]);return target}).apply(this,arguments)}__webpack_exports__.default={parameters:{storySource:{source:"/**\n * @UpSetJSjs/react\n * https://github.com/UpSetJSjs/UpSetJSjs\n *\n * Copyright (c) 2020 Samuel Gratzl <sam@sgratzl.com>\n */\n\nimport React from 'react';\nimport { UpSetJS } from './UpSetJS';\nimport { extractSets, ISetLike, generateCombinations, asSets } from '@upsetjs/model';\nimport { UpSetAddonProps } from './interfaces';\n\nexport default {\n  component: UpSetJS,\n  title: 'UpSetJS',\n};\n\nconst style = {};\nconst elems = [\n  {\n    name: 'Alton Lannister',\n    sets: ['was killed', 'Lannister', 'male'],\n  },\n  {\n    name: 'Arya Stark',\n    sets: ['Stark', 'female'],\n  },\n  {\n    name: 'Benjen Stark',\n    sets: ['was killed', 'Stark', 'male'],\n  },\n  {\n    name: 'Bran Stark',\n    sets: ['royal', 'Stark', 'male'],\n  },\n  {\n    name: 'Brandon Stark',\n    sets: ['was killed', 'Stark'],\n  },\n  {\n    name: 'Catelyn Stark',\n    sets: ['was killed', 'Stark', 'female'],\n  },\n  {\n    name: 'Cersei Lannister',\n    sets: ['royal', 'was killed', 'Lannister', 'female'],\n  },\n  {\n    name: 'Eddard Stark',\n    sets: ['was killed', 'Stark', 'male'],\n  },\n  {\n    name: 'Jaime Lannister',\n    sets: ['was killed', 'Lannister', 'male'],\n  },\n  {\n    name: 'Jon Snow',\n    sets: ['royal', 'was killed', 'Stark', 'male'],\n  },\n  {\n    name: 'Kevan Lannister',\n    sets: ['was killed', 'Lannister', 'male'],\n  },\n  {\n    name: 'Lancel Lannister',\n    sets: ['was killed', 'Lannister', 'male'],\n  },\n  {\n    name: 'Lyanna Stark',\n    sets: ['was killed', 'Stark', 'female'],\n  },\n  {\n    name: 'Martyn Lannister',\n    sets: ['was killed', 'Lannister', 'male'],\n  },\n  {\n    name: 'Rickard Stark',\n    sets: ['was killed', 'Stark', 'male'],\n  },\n  {\n    name: 'Rickon Stark',\n    sets: ['was killed', 'Stark', 'male'],\n  },\n  {\n    name: 'Robb Stark',\n    sets: ['royal', 'was killed', 'Stark', 'male'],\n  },\n  {\n    name: 'Sansa Stark',\n    sets: ['royal', 'Stark', 'female'],\n  },\n  {\n    name: 'Tyrion Lannister',\n    sets: ['Lannister', 'male'],\n  },\n  {\n    name: 'Tywin Lannister',\n    sets: ['was killed', 'Lannister', 'male'],\n  },\n  {\n    name: 'Willem Lannister',\n    sets: ['was killed', 'Lannister', 'male'],\n  },\n];\nconst sets = extractSets(elems);\n\nconst queries = [\n  { name: 'Q1', color: 'steelblue', elems: elems.filter(() => Math.random() > 0.7) },\n  { name: 'Q2', color: 'red', elems: elems.filter(() => Math.random() > 0.8) },\n];\n\nconst common = { sets, width: 1200, height: 500, style };\n\nexport const Default = () => {\n  return <UpSetJS sets={sets} width={1200} height={500} />;\n};\n\nexport const Unions = () => {\n  return (\n    <UpSetJS {...common} combinations={generateCombinations(sets, { type: 'union' })} combinationName=\"Union Size\" />\n  );\n};\n\nexport const Interactivity = () => {\n  const [selection, setSelection] = React.useState(null as ISetLike<any> | null);\n  return <UpSetJS {...common} selection={selection} onHover={setSelection} />;\n};\n\nexport const DarkTheme = () => {\n  const [selection, setSelection] = React.useState(null as ISetLike<any> | null);\n  return (\n    <UpSetJS\n      {...common}\n      selection={selection}\n      onHover={setSelection}\n      theme=\"dark\"\n      style={{ backgroundColor: '#303030' }}\n    />\n  );\n};\n\nexport const Click = () => {\n  const [selection, setSelection] = React.useState(null as ISetLike<any> | null);\n  return <UpSetJS {...common} selection={selection} onClick={setSelection} />;\n};\n\nexport const Queries = () => {\n  return <UpSetJS {...common} queries={queries} queryLegend />;\n};\n\nexport const SmallSets = () => {\n  return (\n    <div>\n      <UpSetJS\n        {...common}\n        sets={asSets([\n          { name: 'one', elems: [1, 2, 3, 5, 7, 8, 11, 12, 13] },\n          { name: 'two', elems: [1, 2, 4, 5, 10] },\n          { name: 'three', elems: [1, 5, 6, 7, 8, 9, 10, 12, 13] },\n        ])}\n      />\n      <UpSetJS\n        {...common}\n        sets={asSets([\n          { name: 'one', elems: [1, 2, 3] },\n          { name: 'two', elems: [1, 2, 4, 5] },\n          { name: 'three', elems: [1, 5] },\n        ])}\n      />\n    </div>\n  );\n};\n\nconst SetAddon: React.FC<UpSetAddonProps<ISetLike<any>, any>> = ({ width, height }) => {\n  return <rect x={1} y={1} width={width - 2} height={height - 2} fill=\"red\"></rect>;\n};\n\nconst SetAddon2: React.FC<UpSetAddonProps<ISetLike<any>, any>> = ({ width, height }) => {\n  return <rect x={1} y={1} width={width - 2} height={height - 2} fill=\"green\"></rect>;\n};\n\nexport const Addon = () => {\n  const [selection, setSelection] = React.useState(null as ISetLike<any> | null);\n  return (\n    <UpSetJS\n      {...common}\n      selection={selection}\n      onHover={setSelection}\n      setAddons={[\n        {\n          name: 'red',\n          size: 40,\n          render: SetAddon,\n        },\n        {\n          name: 'green',\n          position: 'before',\n          size: 20,\n          render: SetAddon2,\n        },\n      ]}\n      combinationAddons={[\n        {\n          name: 'red',\n          size: 40,\n          render: SetAddon,\n        },\n        {\n          name: 'green',\n          position: 'before',\n          size: 20,\n          render: SetAddon2,\n        },\n      ]}\n    />\n  );\n};\n",locationsMap:{"upsetjs--default":{startLoc:{col:23,line:114},endLoc:{col:1,line:116},startBody:{col:23,line:114},endBody:{col:1,line:116}},"upsetjs--unions":{startLoc:{col:22,line:118},endLoc:{col:1,line:122},startBody:{col:22,line:118},endBody:{col:1,line:122}},"upsetjs--interactivity":{startLoc:{col:29,line:124},endLoc:{col:1,line:127},startBody:{col:29,line:124},endBody:{col:1,line:127}},"upsetjs--dark-theme":{startLoc:{col:25,line:129},endLoc:{col:1,line:140},startBody:{col:25,line:129},endBody:{col:1,line:140}},"upsetjs--click":{startLoc:{col:21,line:142},endLoc:{col:1,line:145},startBody:{col:21,line:142},endBody:{col:1,line:145}},"upsetjs--queries":{startLoc:{col:23,line:147},endLoc:{col:1,line:149},startBody:{col:23,line:147},endBody:{col:1,line:149}},"upsetjs--small-sets":{startLoc:{col:25,line:151},endLoc:{col:1,line:172},startBody:{col:25,line:151},endBody:{col:1,line:172}},"upsetjs--addon":{startLoc:{col:21,line:182},endLoc:{col:1,line:217},startBody:{col:21,line:182},endBody:{col:1,line:217}}}}},component:_UpSetJS__WEBPACK_IMPORTED_MODULE_16__.UpSetJS,title:"UpSetJS"};var elems=[{name:"Alton Lannister",sets:["was killed","Lannister","male"]},{name:"Arya Stark",sets:["Stark","female"]},{name:"Benjen Stark",sets:["was killed","Stark","male"]},{name:"Bran Stark",sets:["royal","Stark","male"]},{name:"Brandon Stark",sets:["was killed","Stark"]},{name:"Catelyn Stark",sets:["was killed","Stark","female"]},{name:"Cersei Lannister",sets:["royal","was killed","Lannister","female"]},{name:"Eddard Stark",sets:["was killed","Stark","male"]},{name:"Jaime Lannister",sets:["was killed","Lannister","male"]},{name:"Jon Snow",sets:["royal","was killed","Stark","male"]},{name:"Kevan Lannister",sets:["was killed","Lannister","male"]},{name:"Lancel Lannister",sets:["was killed","Lannister","male"]},{name:"Lyanna Stark",sets:["was killed","Stark","female"]},{name:"Martyn Lannister",sets:["was killed","Lannister","male"]},{name:"Rickard Stark",sets:["was killed","Stark","male"]},{name:"Rickon Stark",sets:["was killed","Stark","male"]},{name:"Robb Stark",sets:["royal","was killed","Stark","male"]},{name:"Sansa Stark",sets:["royal","Stark","female"]},{name:"Tyrion Lannister",sets:["Lannister","male"]},{name:"Tywin Lannister",sets:["was killed","Lannister","male"]},{name:"Willem Lannister",sets:["was killed","Lannister","male"]}],sets=Object(_upsetjs_model__WEBPACK_IMPORTED_MODULE_17__.c)(elems),queries=[{name:"Q1",color:"steelblue",elems:elems.filter((function(){return.7<Math.random()}))},{name:"Q2",color:"red",elems:elems.filter((function(){return.8<Math.random()}))}],common={sets:sets,width:1200,height:500,style:{}},_ref=react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement(_UpSetJS__WEBPACK_IMPORTED_MODULE_16__.UpSetJS,{sets:sets,width:1200,height:500}),Default=function(){return _ref};Default.displayName="Default";var Unions=function(){return react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement(_UpSetJS__WEBPACK_IMPORTED_MODULE_16__.UpSetJS,_extends({},common,{combinations:Object(_upsetjs_model__WEBPACK_IMPORTED_MODULE_17__.d)(sets,{type:"union"}),combinationName:"Union Size"}))};Unions.displayName="Unions";var Interactivity=function(){var _React$useState2=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_15___default.a.useState(null),2),selection=_React$useState2[0],setSelection=_React$useState2[1];return react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement(_UpSetJS__WEBPACK_IMPORTED_MODULE_16__.UpSetJS,_extends({},common,{selection:selection,onHover:setSelection}))};Interactivity.displayName="Interactivity";var DarkTheme=function(){var _React$useState4=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_15___default.a.useState(null),2),selection=_React$useState4[0],setSelection=_React$useState4[1];return react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement(_UpSetJS__WEBPACK_IMPORTED_MODULE_16__.UpSetJS,_extends({},common,{selection:selection,onHover:setSelection,theme:"dark",style:{backgroundColor:"#303030"}}))};DarkTheme.displayName="DarkTheme";var Click=function(){var _React$useState6=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_15___default.a.useState(null),2),selection=_React$useState6[0],setSelection=_React$useState6[1];return react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement(_UpSetJS__WEBPACK_IMPORTED_MODULE_16__.UpSetJS,_extends({},common,{selection:selection,onClick:setSelection}))};Click.displayName="Click";var Queries=function(){return react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement(_UpSetJS__WEBPACK_IMPORTED_MODULE_16__.UpSetJS,_extends({},common,{queries:queries,queryLegend:!0}))};Queries.displayName="Queries";var SmallSets=function(){return react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement(_UpSetJS__WEBPACK_IMPORTED_MODULE_16__.UpSetJS,_extends({},common,{sets:Object(_upsetjs_model__WEBPACK_IMPORTED_MODULE_17__.a)([{name:"one",elems:[1,2,3,5,7,8,11,12,13]},{name:"two",elems:[1,2,4,5,10]},{name:"three",elems:[1,5,6,7,8,9,10,12,13]}])})),react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement(_UpSetJS__WEBPACK_IMPORTED_MODULE_16__.UpSetJS,_extends({},common,{sets:Object(_upsetjs_model__WEBPACK_IMPORTED_MODULE_17__.a)([{name:"one",elems:[1,2,3]},{name:"two",elems:[1,2,4,5]},{name:"three",elems:[1,5]}])})))};SmallSets.displayName="SmallSets";var SetAddon=function(_ref2){var width=_ref2.width,height=_ref2.height;return react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement("rect",{x:1,y:1,width:width-2,height:height-2,fill:"red"})};SetAddon.displayName="SetAddon";var SetAddon2=function(_ref3){var width=_ref3.width,height=_ref3.height;return react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement("rect",{x:1,y:1,width:width-2,height:height-2,fill:"green"})};SetAddon2.displayName="SetAddon2";var Addon=function(){var _React$useState8=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_15___default.a.useState(null),2),selection=_React$useState8[0],setSelection=_React$useState8[1];return react__WEBPACK_IMPORTED_MODULE_15___default.a.createElement(_UpSetJS__WEBPACK_IMPORTED_MODULE_16__.UpSetJS,_extends({},common,{selection:selection,onHover:setSelection,setAddons:[{name:"red",size:40,render:SetAddon},{name:"green",position:"before",size:20,render:SetAddon2}],combinationAddons:[{name:"red",size:40,render:SetAddon},{name:"green",position:"before",size:20,render:SetAddon2}]}))};Addon.displayName="Addon",Default.__docgenInfo={description:"",methods:[],displayName:"Default"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/UpSetJS.stories.tsx"]={name:"Default",docgenInfo:Default.__docgenInfo,path:"src/UpSetJS.stories.tsx"}),Unions.__docgenInfo={description:"",methods:[],displayName:"Unions"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/UpSetJS.stories.tsx"]={name:"Unions",docgenInfo:Unions.__docgenInfo,path:"src/UpSetJS.stories.tsx"}),Interactivity.__docgenInfo={description:"",methods:[],displayName:"Interactivity"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/UpSetJS.stories.tsx"]={name:"Interactivity",docgenInfo:Interactivity.__docgenInfo,path:"src/UpSetJS.stories.tsx"}),DarkTheme.__docgenInfo={description:"",methods:[],displayName:"DarkTheme"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/UpSetJS.stories.tsx"]={name:"DarkTheme",docgenInfo:DarkTheme.__docgenInfo,path:"src/UpSetJS.stories.tsx"}),Click.__docgenInfo={description:"",methods:[],displayName:"Click"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/UpSetJS.stories.tsx"]={name:"Click",docgenInfo:Click.__docgenInfo,path:"src/UpSetJS.stories.tsx"}),Queries.__docgenInfo={description:"",methods:[],displayName:"Queries"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/UpSetJS.stories.tsx"]={name:"Queries",docgenInfo:Queries.__docgenInfo,path:"src/UpSetJS.stories.tsx"}),SmallSets.__docgenInfo={description:"",methods:[],displayName:"SmallSets"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/UpSetJS.stories.tsx"]={name:"SmallSets",docgenInfo:SmallSets.__docgenInfo,path:"src/UpSetJS.stories.tsx"}),Addon.__docgenInfo={description:"",methods:[],displayName:"Addon"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/UpSetJS.stories.tsx"]={name:"Addon",docgenInfo:Addon.__docgenInfo,path:"src/UpSetJS.stories.tsx"})},1460:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default={title:"Welcome UpSet.js React"};try{indexstories.displayName="indexstories",indexstories.__docgenInfo={description:"@upsetjs /react\nhttps://github.com/upsetjs/upsetjs\n\nCopyright (c) 2020 Samuel Gratzl <sam\n@sgratzl .com>",displayName:"indexstories",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/index.stories.tsx#indexstories"]={docgenInfo:indexstories.__docgenInfo,name:"indexstories",path:"src/index.stories.tsx#indexstories"})}catch(__react_docgen_typescript_loader_error){}},15:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"d",(function(){return wrap})),__webpack_require__.d(__webpack_exports__,"b",(function(){return clsx})),__webpack_require__.d(__webpack_exports__,"a",(function(){return addonPositionGenerator})),__webpack_require__.d(__webpack_exports__,"c",(function(){return generateId}));__webpack_require__(33),__webpack_require__(62),__webpack_require__(20),__webpack_require__(23),__webpack_require__(10),__webpack_require__(24);function noop(){}function wrap(f){return f?function(set){return function(evt){return f.call(this,set,evt.nativeEvent)}}:noop}function clsx(){for(var _len=arguments.length,clazzes=Array(_len),_key=0;_key<_len;_key++)clazzes[_key]=arguments[_key];return clazzes.filter(Boolean).join(" ")}function addonPositionGenerator(total){var beforeAcc=0,afterAcc=0;return function(addon){var x=0;return"before"===addon.position?x=-(beforeAcc+=addon.size):(x=total+afterAcc,afterAcc+=addon.size),x}}function generateId(){return"upset-".concat(Math.random().toString(36).slice(4))}try{wrap.displayName="wrap",wrap.__docgenInfo={description:"",displayName:"wrap",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/utils.ts#wrap"]={docgenInfo:wrap.__docgenInfo,name:"wrap",path:"src/components/utils.ts#wrap"})}catch(__react_docgen_typescript_loader_error){}try{clsx.displayName="clsx",clsx.__docgenInfo={description:"",displayName:"clsx",props:{length:{defaultValue:null,description:"Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",name:"length",required:!0,type:{name:"number"}},toString:{defaultValue:null,description:"Returns a string representation of an array.",name:"toString",required:!1,type:{name:"() => string"}},toLocaleString:{defaultValue:null,description:"Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",name:"toLocaleString",required:!1,type:{name:"() => string"}},pop:{defaultValue:null,description:"Removes the last element from an array and returns it.",name:"pop",required:!0,type:{name:"() => string | boolean"}},push:{defaultValue:null,description:"Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",name:"push",required:!0,type:{name:"(...items: (string | boolean)[]) => number"}},concat:{defaultValue:null,description:"Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",name:"concat",required:!0,type:{name:"{ (...items: ConcatArray<string | boolean>[]): (string | boolean)[]; (...items: (string | boolean | ConcatArray<string | boolean>)[]): (string | boolean)[]; }"}},join:{defaultValue:null,description:"Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",name:"join",required:!0,type:{name:"(separator?: string) => string"}},reverse:{defaultValue:null,description:"Reverses the elements in an Array.",name:"reverse",required:!0,type:{name:"() => (string | boolean)[]"}},shift:{defaultValue:null,description:"Removes the first element from an array and returns it.",name:"shift",required:!0,type:{name:"() => string | boolean"}},slice:{defaultValue:null,description:"Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.",name:"slice",required:!0,type:{name:"(start?: number, end?: number) => (string | boolean)[]"}},sort:{defaultValue:null,description:"Sorts an array.\n@param compareFn Function used to determine the order of the elements. It is expected to return\ra negative value if first argument is less than second argument, zero if they're equal and a positive\rvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r```ts\r[11,2,22,1].sort((a, b) => a - b)\r```",name:"sort",required:!0,type:{name:"(compareFn?: (a: string | boolean, b: string | boolean) => number) => (string | boolean)[]"}},splice:{defaultValue:null,description:"Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",name:"splice",required:!0,type:{name:"{ (start: number, deleteCount?: number): (string | boolean)[]; (start: number, deleteCount: number, ...items: (string | boolean)[]): (string | boolean)[]; }"}},unshift:{defaultValue:null,description:"Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",name:"unshift",required:!0,type:{name:"(...items: (string | boolean)[]) => number"}},indexOf:{defaultValue:null,description:"Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",name:"indexOf",required:!0,type:{name:"(searchElement: string | boolean, fromIndex?: number) => number"}},lastIndexOf:{defaultValue:null,description:"Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",name:"lastIndexOf",required:!0,type:{name:"(searchElement: string | boolean, fromIndex?: number) => number"}},every:{defaultValue:null,description:"Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls\rthe callbackfn function for each element in the array until the callbackfn returns a value\rwhich is coercible to the Boolean value false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function.\rIf thisArg is omitted, undefined is used as the this value.",name:"every",required:!0,type:{name:"(callbackfn: (value: string | boolean, index: number, array: (string | boolean)[]) => unknown, thisArg?: any) => boolean"}},some:{defaultValue:null,description:"Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls\rthe callbackfn function for each element in the array until the callbackfn returns a value\rwhich is coercible to the Boolean value true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function.\rIf thisArg is omitted, undefined is used as the this value.",name:"some",required:!0,type:{name:"(callbackfn: (value: string | boolean, index: number, array: (string | boolean)[]) => unknown, thisArg?: any) => boolean"}},forEach:{defaultValue:null,description:"Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",name:"forEach",required:!0,type:{name:"(callbackfn: (value: string | boolean, index: number, array: (string | boolean)[]) => void, thisArg?: any) => void"}},map:{defaultValue:null,description:"Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",name:"map",required:!0,type:{name:"<U>(callbackfn: (value: string | boolean, index: number, array: (string | boolean)[]) => U, thisArg?: any) => U[]"}},filter:{defaultValue:null,description:"Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",name:"filter",required:!0,type:{name:"{ <S extends string | boolean>(callbackfn: (value: string | boolean, index: number, array: (string | boolean)[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: string | boolean, index: number, array: (string | boolean)[]) => unknown, thisArg?: any): (string | boolean)[]; }"}},reduce:{defaultValue:null,description:"Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",name:"reduce",required:!0,type:{name:"{ (callbackfn: (previousValue: string | boolean, currentValue: string | boolean, currentIndex: number, array: (string | boolean)[]) => string | boolean): string | boolean; (callbackfn: (previousValue: string | boolean, currentValue: string | boolean, currentIndex: number, array: (string | boolean)[]) => string | boo..."}},reduceRight:{defaultValue:null,description:"Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",name:"reduceRight",required:!0,type:{name:"{ (callbackfn: (previousValue: string | boolean, currentValue: string | boolean, currentIndex: number, array: (string | boolean)[]) => string | boolean): string | boolean; (callbackfn: (previousValue: string | boolean, currentValue: string | boolean, currentIndex: number, array: (string | boolean)[]) => string | boo..."}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/utils.ts#clsx"]={docgenInfo:clsx.__docgenInfo,name:"clsx",path:"src/components/utils.ts#clsx"})}catch(__react_docgen_typescript_loader_error){}try{addonPositionGenerator.displayName="addonPositionGenerator",addonPositionGenerator.__docgenInfo={description:"",displayName:"addonPositionGenerator",props:{toString:{defaultValue:null,description:"Returns a string representation of an object.\n@param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.",name:"toString",required:!1,type:{name:"(radix?: number) => string"}},toFixed:{defaultValue:null,description:"Returns a string representing a number in fixed-point notation.\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.",name:"toFixed",required:!0,type:{name:"(fractionDigits?: number) => string"}},toExponential:{defaultValue:null,description:"Returns a string containing a number represented in exponential notation.\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.",name:"toExponential",required:!0,type:{name:"(fractionDigits?: number) => string"}},toPrecision:{defaultValue:null,description:"Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\n@param precision Number of significant digits. Must be in the range 1 - 21, inclusive.",name:"toPrecision",required:!0,type:{name:"(precision?: number) => string"}},valueOf:{defaultValue:null,description:"Returns the primitive value of the specified object.",name:"valueOf",required:!1,type:{name:"() => number"}},toLocaleString:{defaultValue:null,description:"Converts a number to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",name:"toLocaleString",required:!1,type:{name:"(locales?: string | string[], options?: NumberFormatOptions) => string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/utils.ts#addonPositionGenerator"]={docgenInfo:addonPositionGenerator.__docgenInfo,name:"addonPositionGenerator",path:"src/components/utils.ts#addonPositionGenerator"})}catch(__react_docgen_typescript_loader_error){}try{generateId.displayName="generateId",generateId.__docgenInfo={description:"",displayName:"generateId",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/utils.ts#generateId"]={docgenInfo:generateId.__docgenInfo,name:"generateId",path:"src/components/utils.ts#generateId"})}catch(__react_docgen_typescript_loader_error){}},230:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__(2);var react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__),UpSetDot=react__WEBPACK_IMPORTED_MODULE_1___default.a.memo((function(_ref){var cx=_ref.cx,r=_ref.r,cy=_ref.cy,name=_ref.name,className=_ref.className,style=_ref.style;return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("circle",{r:r,cx:cx,cy:cy,className:className,style:style},react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("title",null,name))}));__webpack_exports__.a=UpSetDot},231:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__(12),__webpack_require__(33),__webpack_require__(11),__webpack_require__(9),__webpack_require__(2),__webpack_require__(10),__webpack_require__(16);var react__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_7__),_utils__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(15),_ref2=react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement("title",null);function CombinationSelectionChart(_ref){var data=_ref.data,size=_ref.size,style=_ref.style,elemOverlap=_ref.elemOverlap,secondary=_ref.secondary,tooltip=_ref.tooltip,suffix=_ref.suffix,transform=_ref.transform,empty=_ref.empty,combinationAddons=_ref.combinationAddons,width=data.cs.bandWidth,totalHeight=size.cs.h+size.sets.h,height=size.cs.h,className=Object(_utils__WEBPACK_IMPORTED_MODULE_8__.b)("fill".concat(suffix),!tooltip&&"pnone-".concat(style.id),style.classNames.bar);return react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement("g",{transform:transform,"data-upset":secondary?"cs-q":"cs-s"},data.cs.v.map((function(d,i){var x=data.cs.x(d),key=data.cs.keys[i];if(empty&&!secondary)return react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement("rect",{key:key,x:x,y:height,height:0,width:width,className:className,style:style.styles.bar},tooltip&&_ref2);var o=elemOverlap(d);if(0===o)return null;var y=data.cs.y(o),title=tooltip&&react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement("title",null,"".concat(d.name," ∩ ").concat(tooltip,": ").concat(o)),content=secondary?react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement("path",{key:key,transform:"translate(".concat(x,", ").concat(y,")"),d:"M0,-1 l".concat(width,",0 l0,2 l").concat(-width,",0 L-").concat(data.triangleSize,",-").concat(data.triangleSize," L-").concat(data.triangleSize,",").concat(data.triangleSize," Z"),className:className,"data-i":i,"data-cardinality":o},title):react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement("rect",{key:key,x:x,y:y,height:height-y,"data-i":i,"data-cardinality":o,width:width,className:className,style:style.styles.bar},title),genPosition=Object(_utils__WEBPACK_IMPORTED_MODULE_8__.a)(totalHeight),addons=combinationAddons.map((function(addon){var v=genPosition(addon),content=addon.render({set:d,width:width,height:addon.size,theme:style.theme});return content?react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement("g",{key:addon.name,transform:"translate(".concat(x,",").concat(v,")")},content):null})).filter(Boolean);return 0===addons.length?content:react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement("g",{key:key},content,addons)})))}CombinationSelectionChart.displayName="CombinationSelectionChart",CombinationSelectionChart.__docgenInfo={description:"",methods:[],displayName:"CombinationSelectionChart"},__webpack_exports__.a=CombinationSelectionChart;try{CombinationSelectionChart.displayName="CombinationSelectionChart",CombinationSelectionChart.__docgenInfo={description:"",displayName:"CombinationSelectionChart",props:{transform:{defaultValue:null,description:"",name:"transform",required:!1,type:{name:"string"}},data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"UpSetDataInfo<T>"}},size:{defaultValue:null,description:"",name:"size",required:!0,type:{name:"{ id: string; cs: { before: number; after: number; x: number; y: number; w: number; h: number; addons: readonly UpSetAddon<any, any>[]; }; labels: { x: number; y: number; w: number; h: number; }; sets: { before: number; ... 5 more ...; addons: readonly UpSetAddon<...>[]; }; ... 4 more ...; h: number; }"}},style:{defaultValue:null,description:"",name:"style",required:!0,type:{name:'{ theme: "light" | "dark"; styles: any; classNames: any; cs: { name: ReactNode; offset: number | "auto"; }; sets: { name: ReactNode; offset: number | "auto"; }; emptySelection: boolean; id: string; barLabelOffset: number; selectionColor: string; }'}},suffix:{defaultValue:null,description:"",name:"suffix",required:!0,type:{name:"string"}},empty:{defaultValue:null,description:"",name:"empty",required:!1,type:{name:"boolean"}},elemOverlap:{defaultValue:null,description:"",name:"elemOverlap",required:!0,type:{name:"(s: ISetLike<T>) => number"}},secondary:{defaultValue:null,description:"",name:"secondary",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"",name:"tooltip",required:!1,type:{name:"string"}},combinationAddons:{defaultValue:null,description:"",name:"combinationAddons",required:!0,type:{name:"UpSetAddons<ISetCombination<T>, T>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/CombinationSelectionChart.tsx#CombinationSelectionChart"]={docgenInfo:CombinationSelectionChart.__docgenInfo,name:"CombinationSelectionChart",path:"src/components/CombinationSelectionChart.tsx#CombinationSelectionChart"})}catch(__react_docgen_typescript_loader_error){}"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/CombinationSelectionChart.tsx"]={name:"CombinationSelectionChart",docgenInfo:CombinationSelectionChart.__docgenInfo,path:"src/components/CombinationSelectionChart.tsx"})},232:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__(12),__webpack_require__(33),__webpack_require__(11),__webpack_require__(9),__webpack_require__(2),__webpack_require__(10),__webpack_require__(16);var react__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_7__),_utils__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(15),_ref2=react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement("title",null);function SetSelectionChart(_ref){var data=_ref.data,size=_ref.size,style=_ref.style,elemOverlap=_ref.elemOverlap,suffix=_ref.suffix,secondary=_ref.secondary,empty=_ref.empty,tooltip=_ref.tooltip,setAddons=_ref.setAddons,transform=_ref.transform,width=size.sets.w,totalWidth=size.sets.w+size.labels.w+size.cs.w,height=data.sets.bandWidth,className=Object(_utils__WEBPACK_IMPORTED_MODULE_8__.b)("fill".concat(suffix),!tooltip&&" pnone-".concat(style.id),style.classNames.bar);return react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement("g",{transform:transform,"data-upset":secondary?"sets-q":"sets-s"},data.sets.v.map((function(d,i){var y=data.sets.y(d),key=data.sets.keys[i];if(empty&&!secondary)return react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement("rect",{key:key,x:width,y:y,width:0,height:height,className:className,style:style.styles.bar},tooltip&&_ref2);var o=elemOverlap(d);if(0===o)return null;var x=data.sets.x(o),title=tooltip&&react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement("title",null,"".concat(d.name," ∩ ").concat(tooltip,": ").concat(o)),content=secondary?react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement("path",{key:key,transform:"translate(".concat(x,", ").concat(y+height,")"),d:"M1,0 l0,".concat(-height," l-2,0 l0,").concat(height," L-").concat(data.triangleSize,",").concat(data.triangleSize," L").concat(data.triangleSize,",").concat(data.triangleSize," Z"),"data-i":i,"data-cardinality":o,className:className},title):react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement("rect",{key:key,"data-i":i,"data-cardinality":o,x:x,y:y,width:width-x,height:height,className:className,style:style.styles.bar},title),genPosition=Object(_utils__WEBPACK_IMPORTED_MODULE_8__.a)(totalWidth),addons=setAddons.map((function(addon){var v=genPosition(addon),content=addon.render({set:d,width:addon.size,height:height,theme:style.theme});return content?react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement("g",{key:addon.name,transform:"translate(".concat(v,",").concat(y,")")},content):null})).filter(Boolean);return 0===addons.length?content:react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement("g",{key:key},content,addons)})))}SetSelectionChart.displayName="SetSelectionChart",SetSelectionChart.__docgenInfo={description:"",methods:[],displayName:"SetSelectionChart"},__webpack_exports__.a=SetSelectionChart;try{SetSelectionChart.displayName="SetSelectionChart",SetSelectionChart.__docgenInfo={description:"",displayName:"SetSelectionChart",props:{data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"UpSetDataInfo<T>"}},size:{defaultValue:null,description:"",name:"size",required:!0,type:{name:"{ id: string; cs: { before: number; after: number; x: number; y: number; w: number; h: number; addons: readonly UpSetAddon<any, any>[]; }; labels: { x: number; y: number; w: number; h: number; }; sets: { before: number; ... 5 more ...; addons: readonly UpSetAddon<...>[]; }; ... 4 more ...; h: number; }"}},style:{defaultValue:null,description:"",name:"style",required:!0,type:{name:'{ theme: "light" | "dark"; styles: any; classNames: any; cs: { name: ReactNode; offset: number | "auto"; }; sets: { name: ReactNode; offset: number | "auto"; }; emptySelection: boolean; id: string; barLabelOffset: number; selectionColor: string; }'}},suffix:{defaultValue:null,description:"",name:"suffix",required:!0,type:{name:"string"}},empty:{defaultValue:null,description:"",name:"empty",required:!1,type:{name:"boolean"}},elemOverlap:{defaultValue:null,description:"",name:"elemOverlap",required:!0,type:{name:"(s: ISetLike<T>) => number"}},secondary:{defaultValue:null,description:"",name:"secondary",required:!1,type:{name:"boolean"}},tooltip:{defaultValue:null,description:"",name:"tooltip",required:!1,type:{name:"string"}},transform:{defaultValue:null,description:"",name:"transform",required:!1,type:{name:"string"}},setAddons:{defaultValue:null,description:"",name:"setAddons",required:!0,type:{name:"UpSetAddons<ISet<T>, T>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/SetSelectionChart.tsx#SetSelectionChart"]={docgenInfo:SetSelectionChart.__docgenInfo,name:"SetSelectionChart",path:"src/components/SetSelectionChart.tsx#SetSelectionChart"})}catch(__react_docgen_typescript_loader_error){}"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/SetSelectionChart.tsx"]={name:"SetSelectionChart",docgenInfo:SetSelectionChart.__docgenInfo,path:"src/components/SetSelectionChart.tsx"})},40:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return asSets})),__webpack_require__.d(__webpack_exports__,"b",(function(){return bandScale})),__webpack_require__.d(__webpack_exports__,"c",(function(){return extractSets})),__webpack_require__.d(__webpack_exports__,"d",(function(){return generateCombinations})),__webpack_require__.d(__webpack_exports__,"e",(function(){return isElemQuery})),__webpack_require__.d(__webpack_exports__,"f",(function(){return isSetQuery})),__webpack_require__.d(__webpack_exports__,"g",(function(){return linearScale})),__webpack_require__.d(__webpack_exports__,"h",(function(){return logScale})),__webpack_require__.d(__webpack_exports__,"i",(function(){return queryElemOverlap})),__webpack_require__.d(__webpack_exports__,"j",(function(){return queryOverlap})),__webpack_require__.d(__webpack_exports__,"k",(function(){return setElemOverlapFactory})),__webpack_require__.d(__webpack_exports__,"l",(function(){return setOverlapFactory})),__webpack_require__.d(__webpack_exports__,"m",(function(){return toKey}));__webpack_require__(1),__webpack_require__(13),__webpack_require__(25),__webpack_require__(12),__webpack_require__(189),__webpack_require__(498),__webpack_require__(33),__webpack_require__(1454),__webpack_require__(1455),__webpack_require__(46),__webpack_require__(29),__webpack_require__(88),__webpack_require__(18),__webpack_require__(19),__webpack_require__(11),__webpack_require__(62),__webpack_require__(9),__webpack_require__(60),__webpack_require__(20),__webpack_require__(414),__webpack_require__(1457),__webpack_require__(23),__webpack_require__(270),__webpack_require__(2),__webpack_require__(289),__webpack_require__(1458),__webpack_require__(127),__webpack_require__(1459),__webpack_require__(324),__webpack_require__(4),__webpack_require__(7),__webpack_require__(10),__webpack_require__(28),__webpack_require__(24),__webpack_require__(190),__webpack_require__(89),__webpack_require__(17),__webpack_require__(67),__webpack_require__(157),__webpack_require__(47),__webpack_require__(16);function len(a){return a instanceof Set?a.size:a.length}function setOverlapFactory(a,toElemKey){var elems=toElemKey?new Set((a instanceof Set?Array.from(a):a).map(toElemKey)):a instanceof Set?a:new Set(a),setA=elems.size,same={setA:setA,setB:setA,union:setA,intersection:setA};return function(b){if(b===a)return same;var intersection=0;b.forEach((function(e){(toElemKey&&elems.has(toElemKey(e))||!toElemKey&&elems.has(e))&&intersection++}));var setB=len(b);return{setA:setA,setB:setB,intersection:intersection,union:setA+setB-intersection}}}function setElemOverlapFactory(a,toElemKey){var elems=toElemKey?new Set((a instanceof Set?Array.from(a):a).map(toElemKey)):a instanceof Set?a:new Set(a),setA=Array.isArray(a)?a:Array.from(a),same={setA:setA,setB:setA,union:setA,intersection:setA};return function(b){if(b===a)return same;var intersection=[],union=setA.slice();return b.forEach((function(e){toElemKey&&elems.has(toElemKey(e))||!toElemKey&&elems.has(e)?intersection.push(e):union.push(e)})),{setA:setA,setB:Array.isArray(b)?b:Array.from(b),intersection:intersection,union:union}}}function isElemQuery(q){return Array.isArray(q.elems)}function isCalcQuery(q){return"function"==typeof q.overlap}function isSetQuery(q){return null!=q.set}function queryOverlap(q,what,toElemKey){if(isCalcQuery(q))return q.overlap;if(isSetQuery(q)&&q.set.overlap)return q.set.overlap;var f=setOverlapFactory(isElemQuery(q)?q.elems:q.set.elems,toElemKey);return function(s){return s.overlap&&isElemQuery(q)&&Array.isArray(q.elems)?s.overlap(q.elems):s.overlap&&isSetQuery(q)?s.overlap(q.set):f(s.elems)[what]}}function queryElemOverlap(q,what,toElemKey){if(isCalcQuery(q))return function(){return null};if("intersection"===what){var _f=function setElemIntersectionFactory(a,toElemKey){var arr=a instanceof Set?Array.from(a):a,elems=toElemKey?new Set(arr.map(toElemKey)):a instanceof Set?a:new Set(a);return function(b){if(b===a)return arr;var intersection=[];return b.forEach((function(e){(toElemKey&&elems.has(toElemKey(e))||!toElemKey&&elems.has(e))&&intersection.push(e)})),intersection}}(isElemQuery(q)?q.elems:q.set.elems,toElemKey);return function(s){return _f(s.elems)}}var f=setElemOverlapFactory(isElemQuery(q)?q.elems:q.set.elems,toElemKey);return function(s){return f(s.elems)[what]}}function isBaseSet(v){return null!=v&&"number"==typeof v.cardinality&&"string"==typeof v.name&&Array.isArray(v.elems)}function isSet(v){return isBaseSet(v)&&"set"===v.type}function isSetCombination(v){var vt=v;return isBaseSet(v)&&["composite","union","intersection"].includes(vt.type)&&vt.sets instanceof Set&&"number"==typeof vt.degree}function isSetLike(v){return isSet(v)||isSetCombination(v)}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _createForOfIteratorHelperLoose(o){var i=0;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(o=function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}(o)))return function(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}};throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(i=o[Symbol.iterator]()).next.bind(i)}function byName(a,b){return a.name.localeCompare(b.name)}function byCardinality(a,b){return b.cardinality-a.cardinality}function byDegree(a,b){return a.degree-b.degree}function byComposite(func){return function(a,b){return func.reduce((function(acc,f){return 0===acc?f(a,b):acc}),0)}}function negate(func){return function(a,b){return-func(a,b)}}function byGroup(sets){return function(a,b){var fixNotFound=function(v){return 0>v?Number.POSITIVE_INFINITY:v};return fixNotFound(sets.findIndex((function(s){return a.sets.has(s)})))-fixNotFound(sets.findIndex((function(s){return b.sets.has(s)})))}}function postprocessCombinations(sets,combinations,options){void 0===options&&(options={});var r=combinations;return options.order&&(r=r.sort(function toOrder(sets,order){if(!order)return byName;var arr=Array.isArray(order)?order:[order];return 0===arr.length?byName:byComposite(arr.map((function(o){switch(o){case"cardinality":case"cardinality:desc":return byCardinality;case"cardinality:asc":return negate(byCardinality);case"name:desc":return negate(byName);case"degree":case"degree:asc":return byDegree;case"degree:desc":return negate(byDegree);case"group":case"group:asc":return byGroup(sets);case"group:desc":return negate(byGroup(sets));default:return byName}})))}(sets,options.order))),null!=options.limit?r.slice(0,options.limit):r}function powerSetNumber(arr,onSet,_temp){for(var _ref=void 0===_temp?{}:_temp,_ref$min=_ref.min,min=void 0===_ref$min?0:_ref$min,_ref$max=_ref.max,max=void 0===_ref$max?1/0:_ref$max,total=Math.pow(2,arr.length),lastBit=0,lastBitAcc=1,i=0;i<total;i++){i>=lastBitAcc&&(lastBit++,lastBitAcc<<=1);for(var sub=[],j=0;j<lastBit;j++)i&1<<j&&sub.push(arr[j]);sub.length>=min&&sub.length<=max&&onSet(sub)}}function powerSetBigInt(arr,onSet,_temp2){for(var _ref2=void 0===_temp2?{}:_temp2,_ref2$min=_ref2.min,min=void 0===_ref2$min?0:_ref2$min,_ref2$max=_ref2.max,max=void 0===_ref2$max?1/0:_ref2$max,zero=BigInt(0),one=BigInt(1),total=BigInt(2)<<BigInt(arr.length),lastBit=0,lastBitAcc=one,bits=arr.map((function(_,i){return one<<BigInt(i)})),i=zero;i<total;i+=one){i>=lastBitAcc&&(lastBit++,lastBitAcc<<=one);for(var sub=[],j=0;j<lastBit;j++)(i&bits[j])!==zero&&sub.push(arr[j]);sub.length>=min&&sub.length<=max&&onSet(sub)}}function powerSetRecursive(arr,onSet,_temp3){var _ref3=void 0===_temp3?{}:_temp3,_ref3$min=_ref3.min,min=void 0===_ref3$min?0:_ref3$min,_ref3$max=_ref3.max,max=void 0===_ref3$max?1/0:_ref3$max,check=function(len){return len>=min&&len<=max};check(0)&&onSet([]),function iter(subset,start){if(!(subset.length>=max))for(var i=start;i<arr.length;i++)subset.push(arr[i]),check(subset.length)&&onSet(subset.slice()),iter(subset,i+1),subset.pop()}([],0)}var SET_JOINERS={intersection:" ∩ ",union:" ∪ ",composite:","};function intersectionBuilder(sets,allElements,notPartOfAnySet,toElemKey){var setElems=new Map(sets.map((function(s){return[s,toElemKey?new Set(s.elems.map(toElemKey)):new Set(s.elems)]}))),setDirectElems=toElemKey?null:setElems,setKeyElems=toElemKey?setElems:null;return function(intersection){if(0===intersection.length){if(Array.isArray(notPartOfAnySet))return notPartOfAnySet;if(setKeyElems&&toElemKey){var _lookup=Array.from(setKeyElems.values());return allElements.filter((function(e){var k=toElemKey(e);return _lookup.every((function(s){return!s.has(k)}))}))}var lookup=Array.from(setDirectElems.values());return allElements.filter((function(e){return lookup.every((function(s){return!s.has(e)}))}))}if(1===intersection.length)return intersection[0].elems;var smallest=intersection.reduce((function(acc,d){return!acc||acc.length>d.elems.length?d.elems:acc}),null);return setKeyElems&&toElemKey?smallest.filter((function(elem){var key=toElemKey(elem);return intersection.every((function(s){return setKeyElems.get(s).has(key)}))})):smallest.filter((function(elem){return intersection.every((function(s){return setDirectElems.get(s).has(elem)}))}))}}function unionBuilder(sets,allElements,notPartOfAnySet,toElemKey){return function(union){if(0===union.length){if(Array.isArray(notPartOfAnySet))return notPartOfAnySet;if(toElemKey){var _lookup2=new Set;return sets.forEach((function(set){set.elems.forEach((function(e){return _lookup2.add(toElemKey(e))}))})),allElements.filter((function(e){return!_lookup2.has(toElemKey(e))}))}var lookup=new Set;return sets.forEach((function(set){set.elems.forEach((function(e){return lookup.add(e)}))})),allElements.filter((function(e){return!lookup.has(e)}))}if(1===union.length)return union[0].elems;var largest=union.reduce((function(acc,d){return!acc||acc.length<d.elems.length?d.elems:acc}),null),all=largest.slice(),contained=toElemKey?new Set(all.map(toElemKey)):new Set(all);return union.forEach((function(set){set.elems!==largest&&set.elems.forEach((function(elem){if(toElemKey){var key=toElemKey(elem);contained.has(key)||(all.push(elem),contained.add(key))}else contained.has(elem)||(all.push(elem),contained.add(elem))}))})),all}}function generateCombinations(sets,_temp){var _SET_JOINERS$type,_ref=void 0===_temp?{}:_temp,_ref$type=_ref.type,type=void 0===_ref$type?"intersection":_ref$type,_ref$min=_ref.min,min=void 0===_ref$min?0:_ref$min,_ref$max=_ref.max,max=void 0===_ref$max?1/0:_ref$max,_ref$empty=_ref.empty,empty=void 0!==_ref$empty&&_ref$empty,_ref$elems=_ref.elems,allElements=void 0===_ref$elems?[]:_ref$elems,notPartOfAnySet=_ref.notPartOfAnySet,toElemKey=_ref.toElemKey,postprocess=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],0<=excluded.indexOf(key)||(target[key]=source[key]);return target}(_ref,["type","min","max","empty","elems","notPartOfAnySet","toElemKey"]),joiner=null!==(_SET_JOINERS$type=SET_JOINERS[type])&&void 0!==_SET_JOINERS$type?_SET_JOINERS$type:SET_JOINERS.intersection,combinations=[],compute=("union"===type?unionBuilder:intersectionBuilder)(sets,allElements,notPartOfAnySet,toElemKey);return function powerSet(arr,options){void 0===options&&(options={});var asForEach=function(f){return{forEach:function(cb){return f(arr,cb,options)}}};return Math.pow(2,arr.length)<Number.MAX_SAFE_INTEGER?asForEach(powerSetNumber):void 0!==window.BigInt?asForEach(powerSetBigInt):asForEach(powerSetRecursive)}(sets,{min:min,max:max}).forEach((function(combo){if(0===combo.length&&"number"==typeof notPartOfAnySet&&0<notPartOfAnySet)combinations.push({type:"composite",elems:[],sets:new Set,name:"()",cardinality:notPartOfAnySet,overlap:function(s){return s===this||isSetLike(s)&&s.name===this.name&&s.cardinality===this.cardinality?this.cardinality:0},degree:0});else{var elems=compute(combo);(empty||0!==elems.length)&&combinations.push({type:0===combo.length?"composite":type,elems:elems,sets:new Set(combo),name:1===combo.length?combo[0].name:"("+combo.map((function(d){return d.name})).join(joiner)+")",cardinality:elems.length,degree:combo.length})}})),postprocessCombinations(sets,combinations,postprocess)}function asSet(set){return Object.assign({type:"set",cardinality:set.elems.length},set)}function postprocessSets(sets,options){void 0===options&&(options={});var r=sets;if(options.order){var order=function toOrder$1(order){if(!order)return byName;switch(order){case"cardinality":case"cardinality:desc":return byComposite([byCardinality,byName]);case"cardinality:asc":return byComposite([negate(byCardinality),byName]);case"name:desc":return negate(byName);default:return byName}}(options.order);r=r.slice().sort(order)}return null!=options.limit?r.slice(0,options.limit):r}function asSets(sets,options){return void 0===options&&(options={}),postprocessSets(sets.map(asSet),options)}function extractSets(elements,acc){void 0===acc&&(acc=function(e){return e.sets});var sets=new Map;return elements.forEach((function(elem){acc(elem).forEach((function(set){sets.has(set)?sets.get(set).push(elem):sets.set(set,[elem])}))})),Array.from(sets).map((function(_ref){var set=_ref[0],elems=_ref[1];return{type:"set",elems:elems,name:set.toString(),cardinality:elems.length}}))}function toKey(s){return s.name+":"+s.type+"#"+s.cardinality}var bandScale=function(domain,size,padding){var blocks=domain.length+padding,step=size/Math.max(1,blocks),start=size-step*domain.length,lookup=new Map(domain.map((function(d,i){return[d,i]}))),scale=function(v){var index=lookup.get(v);if(null!=index)return start+step*index};return scale.bandwidth=function(){return step/(1+padding)},scale};function hasOverlap(positions,heights,stride){void 0===stride&&(stride=1);for(var i=0;i<positions.length-stride;i+=stride){var pos_i=positions[i],pos_n=positions[i+1];if(pos_i<pos_n){if(pos_i+heights[i]/2>pos_n-heights[i+1]/2)return!0}else{var _left=pos_i-heights[i]/2;if(pos_n+heights[i+1]/2>_left)return!0}}return!1}function ensureLast(ticks,max,scale,heightPerTick,toStr){var last=ticks[ticks.length-1];if(!last.label)for(var j=ticks.length-2;0<j;--j)if(ticks[j].label){last=ticks[j];break}if(last.value<max){var pos_l=scale(last.value),pos_max=scale(max);if(pos_l<pos_max){pos_l+heightPerTick(last.value)/2<pos_max-heightPerTick(max)/2&&ticks.push({value:max,label:toStr(max)})}else{var _left2=pos_l-heightPerTick(last.value)/2;pos_max+heightPerTick(max)/2<_left2&&ticks.push({value:max,label:toStr(max)})}}return ticks}function genTicks(values,toStr,stride){return void 0===toStr&&(toStr=String),void 0===stride&&(stride=1),values.map((function(v,i){return{value:v,label:1===stride||0==i%stride?toStr(v):void 0}}))}function checkValues(values,scale,heightPerTick,max,toStr){var positions=values.map((function(v){return scale(v)})),heights=values.map((function(v){return heightPerTick(v)}));return hasOverlap(positions,heights)&&hasOverlap(positions,heights,2)?null:ensureLast(genTicks(values,toStr),max,scale,heightPerTick,toStr)}function toStr(v){return v.toLocaleString()}function range(max,inc){void 0===inc&&(inc=1);for(var values=[],v=0;v<=max;v+=inc)values.push(v);return values}function distributeTicks(max,maxCount,scale,heightPerTick){if(0>=maxCount)return[];for(var _step,_iterator=_createForOfIteratorHelperLoose(function niceFactors(max,maxCount){void 0===maxCount&&(maxCount=11);var digits=Math.max(0,Math.floor(Math.log10(max)-.5)),factor=Math.pow(10,digits),factors=[1,2,5],r=factors.map((function(f){return f*factor}));0<digits&&r.unshift(factors[factors.length-1]*Math.pow(10,digits-1)),r.push(factors[0]*Math.pow(10,digits+1));var lower=Math.ceil(max/maxCount);return r.filter((function(d){return d>=lower&&d<=max}))}(max,maxCount));!(_step=_iterator()).done;){var r=checkValues(range(max,_step.value),scale,heightPerTick,max,toStr);if(r)return r}return genTicks([0,max],toStr)}var linearScale=function(max,range,options){var size=range[1]-range[0],scale=function(v){return range[0]+v/max*size};return scale.ticks=function(count){if(void 0===count&&(count=10),"vertical"===options.orientation){var heightPerTick=Math.ceil(1.4*options.fontSizeHint);return distributeTicks(max,count+1,scale,(function(){return heightPerTick}))}var widthPerChar=options.fontSizeHint/1.4;return distributeTicks(max,count+1,scale,(function(v){return Math.ceil(toStr(v).length*widthPerChar)}))},scale.tickFormat=function(){return toStr},scale};function toStr$1(v){var orders=["","k","M","G"],order=Math.max(0,Math.min(Math.floor(Math.log10(v)/3),orders.length-1));return""+(Math.round(v/Math.pow(10,3*order-1))/10).toLocaleString()+orders[order]}function range$1(max,factor){for(var values=[],inc=Math.pow(10,factor),v=1;v<=max;v*=inc)values.push(v);return values}function generateInnerTicks(max,factor){for(var values=[],v=1,i=0;v<=max;v*=10,i++){values.push({value:v,label:1===factor||0==i%factor?toStr$1(v):void 0});for(var vv=v+v;vv<10*v&&vv<max;vv+=v*factor)values.push({value:vv})}return values}function distributeTicks$1(max,maxCount,scale,heightPerTick){if(0>=maxCount)return[];for(var _i=0,_arr=[1,2,5];_i<_arr.length;_i++){var factor=_arr[_i];if(checkValues(range$1(max,factor),scale,heightPerTick,max,toStr$1))return ensureLast(generateInnerTicks(max,factor),max,scale,heightPerTick,toStr$1)}return genTicks([0,max],toStr$1)}var logScale=function(max,range,options){var size=range[1]-range[0],domain=1>max?1:Math.log10(max),scale=function(v){var n=1>=v?0:Math.log10(v)/domain;return range[0]+n*size};return scale.ticks=function(count){if(void 0===count&&(count=10),"vertical"===options.orientation){var heightPerTick=Math.ceil(1.4*options.fontSizeHint);return distributeTicks$1(max,count+1,scale,(function(){return heightPerTick}))}var widthPerChar=options.fontSizeHint/1.4;return distributeTicks$1(max,count+1,scale,(function(v){return Math.ceil(toStr$1(v).length*widthPerChar)}))},scale.tickFormat=function(){return toStr$1},scale}},48:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"g",(function(){return EMPTY_OBJECT})),__webpack_require__.d(__webpack_exports__,"f",(function(){return EMPTY_ARRAY})),__webpack_require__.d(__webpack_exports__,"c",(function(){return DEFAULT_FONTSIZES})),__webpack_require__.d(__webpack_exports__,"e",(function(){return DEFAULT_WIDTH_RATIO})),__webpack_require__.d(__webpack_exports__,"d",(function(){return DEFAULT_HEIGHT_RATIO})),__webpack_require__.d(__webpack_exports__,"b",(function(){return DEFAULT_COMBINATIONS})),__webpack_require__.d(__webpack_exports__,"a",(function(){return DARK_BACKGROUND_COLOR}));var EMPTY_OBJECT={},EMPTY_ARRAY=[],DEFAULT_FONTSIZES={setLabel:"16px",axisTick:"10px",chartLabel:"16px",barLabel:"10px",legend:"10px"},DEFAULT_WIDTH_RATIO=[.18,.12,.7],DEFAULT_HEIGHT_RATIO=[.6,.4],DEFAULT_COMBINATIONS={type:"intersection"},DARK_BACKGROUND_COLOR="#303030";try{EMPTY_OBJECT.displayName="EMPTY_OBJECT",EMPTY_OBJECT.__docgenInfo={description:"@upsetjs /react\nhttps://github.com/upsetjs/upsetjs\n\nCopyright (c) 2020 Samuel Gratzl <sam\n@sgratzl .com>",displayName:"EMPTY_OBJECT",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/defaults.ts#EMPTY_OBJECT"]={docgenInfo:EMPTY_OBJECT.__docgenInfo,name:"EMPTY_OBJECT",path:"src/defaults.ts#EMPTY_OBJECT"})}catch(__react_docgen_typescript_loader_error){}},511:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return fillDefaults}));__webpack_require__(19),__webpack_require__(4);var _upsetjs_model__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(40),_defaults__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(48),lightTheme={selectionColor:"#ffa500",color:"#000000",textColor:"#000000",hoverHintColor:"#cccccc",notMemberColor:"#d3d3d3",alternatingBackgroundColor:"#0000000d"},darkTheme={selectionColor:"#ffa500",color:"#cccccc",textColor:"#ffffff",hoverHintColor:"#d9d9d9",notMemberColor:"#666666",alternatingBackgroundColor:"#ffffff33"};function fillDefaults(props){var combinations,theme=function getTheme(theme){return"dark"===theme?darkTheme:lightTheme}(props.theme);return Object.assign({theme:"light",padding:20,barPadding:.3,dotPadding:.7,combinations:_defaults__WEBPACK_IMPORTED_MODULE_3__.b,selection:null,combinationName:null==props.combinations||(combinations=props.combinations,Array.isArray(combinations))||"union"!==props.combinations.type?"Intersection Size":"Union Size",barLabelOffset:2,setNameAxisOffset:"auto",combinationNameAxisOffset:"auto",setName:"Set Size",fontFamily:"sans-serif",widthRatios:_defaults__WEBPACK_IMPORTED_MODULE_3__.e,heightRatios:_defaults__WEBPACK_IMPORTED_MODULE_3__.d,queries:_defaults__WEBPACK_IMPORTED_MODULE_3__.f,queryLegend:null!=props.queries&&0<props.queries.length,exportButtons:!0,numericScale:"linear",bandScale:"band",className:"",fontSizes:_defaults__WEBPACK_IMPORTED_MODULE_3__.c,classNames:_defaults__WEBPACK_IMPORTED_MODULE_3__.g,style:_defaults__WEBPACK_IMPORTED_MODULE_3__.g,styles:_defaults__WEBPACK_IMPORTED_MODULE_3__.g,childrenFactories:_defaults__WEBPACK_IMPORTED_MODULE_3__.g,setAddons:_defaults__WEBPACK_IMPORTED_MODULE_3__.f,combinationAddons:_defaults__WEBPACK_IMPORTED_MODULE_3__.f,emptySelection:!0,toKey:_upsetjs_model__WEBPACK_IMPORTED_MODULE_2__.m},theme,props,props.fontSizes?{fontSizes:Object.assign({},_defaults__WEBPACK_IMPORTED_MODULE_3__.c,props.fontSizes)}:_defaults__WEBPACK_IMPORTED_MODULE_3__.g)}try{fillDefaults.displayName="fillDefaults",fillDefaults.__docgenInfo={description:"",displayName:"fillDefaults",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/fillDefaults.ts#fillDefaults"]={docgenInfo:fillDefaults.__docgenInfo,name:"fillDefaults",path:"src/fillDefaults.ts#fillDefaults"})}catch(__react_docgen_typescript_loader_error){}},512:function(module,__webpack_exports__,__webpack_require__){"use strict";function deriveStyleDependent(theme,styles,classNames,combinationName,combinationNameAxisOffset,setName,setNameAxisOffset,styleId,barLabelOffset,selectionColor,emptySelection){return{theme:theme,styles:styles,classNames:classNames,cs:{name:combinationName,offset:combinationNameAxisOffset},sets:{name:setName,offset:setNameAxisOffset},emptySelection:emptySelection,id:styleId,barLabelOffset:barLabelOffset,selectionColor:selectionColor}}__webpack_require__.d(__webpack_exports__,"a",(function(){return deriveStyleDependent}))},513:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return deriveSizeDependent}));__webpack_require__(60);var _utils__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(15);function deriveSizeDependent(width,height,margin,barPadding,widthRatios,heightRatios,setAddons,combinationAddons,id){var setAddonsBefore=setAddons.reduce((function(acc,a){return acc+("before"===a.position?a.size:0)}),0),setAddonsAfter=setAddons.reduce((function(acc,a){return acc+("before"!==a.position?a.size:0)}),0),combnationAddonsBefore=combinationAddons.reduce((function(acc,a){return acc+("before"===a.position?a.size:0)}),0),combinationAddonsAfter=combinationAddons.reduce((function(acc,a){return acc+("before"!==a.position?a.size:0)}),0),h=height-2*margin-20-combinationAddonsAfter-combnationAddonsBefore,w=width-2*margin-setAddonsBefore-setAddonsAfter,setWidth=w*widthRatios[0],labelsWidth=w*widthRatios[1],combinationHeight=h*heightRatios[0];return{id:id||Object(_utils__WEBPACK_IMPORTED_MODULE_1__.c)(),cs:{before:combnationAddonsBefore,after:combinationAddonsAfter,x:setAddonsBefore+setWidth+labelsWidth,y:combnationAddonsBefore,w:w-setWidth-labelsWidth,h:combinationHeight,addons:combinationAddons},labels:{x:setAddonsBefore+setWidth,y:combnationAddonsBefore+combinationHeight,w:labelsWidth,h:h-combinationHeight},sets:{before:setAddonsBefore,after:setAddonsAfter,x:setAddonsBefore,y:combnationAddonsBefore+combinationHeight,w:setWidth,h:h-combinationHeight,addons:setAddons},padding:barPadding,legend:{x:width/2},margin:margin,w:width,h:height}}},514:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return deriveDataDependent}));__webpack_require__(29),__webpack_require__(19),__webpack_require__(9),__webpack_require__(60),__webpack_require__(499),__webpack_require__(20),__webpack_require__(146),__webpack_require__(17);var _upsetjs_model__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(40),_utils__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(15);function deriveDataDependent(sets,combinations,sizes,numericScale,bandScale,barLabelFontSize,dotPadding,barPadding,tickFontSize,toKey,toElemKey,id){var numericScaleFactory=function resolveNumericScale(factory){return"linear"===factory?_upsetjs_model__WEBPACK_IMPORTED_MODULE_8__.g:"log"===factory?_upsetjs_model__WEBPACK_IMPORTED_MODULE_8__.h:factory}(numericScale),bandScaleFactory=function resolveBandScale(factory){return"band"===factory?_upsetjs_model__WEBPACK_IMPORTED_MODULE_8__.b:factory}(bandScale),cs=function areCombinations(combinations){return Array.isArray(combinations)}(combinations)?combinations:Object(_upsetjs_model__WEBPACK_IMPORTED_MODULE_8__.d)(sets,combinations),combinationX=bandScaleFactory(cs.map(toKey),sizes.cs.w,sizes.padding),maxCSCardinality=cs.reduce((function(acc,d){return Math.max(acc,d.cardinality)}),0),combinationY=numericScaleFactory(maxCSCardinality,[sizes.cs.h,barLabelFontSize],{orientation:"vertical",fontSizeHint:tickFontSize}),guessLabelWidth=function(v){return Math.floor(barLabelFontSize/1.4*.7*combinationY.tickFormat()(v).length)},maxSetCardinality=sets.reduce((function(acc,d){return Math.max(acc,d.cardinality)}),0),largestSetLabelWidth=guessLabelWidth(maxSetCardinality),largestCSLabelWidth=guessLabelWidth(maxCSCardinality),setX=numericScaleFactory(maxSetCardinality,[sizes.sets.w,largestSetLabelWidth],{orientation:"horizontal",fontSizeHint:tickFontSize}),setKeys=sets.map(toKey),setY=bandScaleFactory(setKeys.slice().reverse(),sizes.sets.h,sizes.padding),r=Math.min(setY.bandwidth(),combinationX.bandwidth())/2*dotPadding,triangleSize=Math.max(2,Math.min(setY.bandwidth(),combinationX.bandwidth())/2*barPadding);return{id:id||Object(_utils__WEBPACK_IMPORTED_MODULE_9__.c)(),r:r,triangleSize:triangleSize,sets:{v:sets,keys:setKeys,rv:sets.slice().reverse(),x:setX,xAxisWidth:sizes.sets.w-largestSetLabelWidth,y:function y(s){return setY(toKey(s))},bandWidth:setY.bandwidth(),cy:setY.bandwidth()/2+sizes.cs.h,format:setX.tickFormat(),labelOffset:barLabelFontSize+9+2},cs:{v:cs,keys:cs.map(toKey),x:function x(s){return combinationX(toKey(s))},y:combinationY,yAxisWidth:sizes.cs.h-barLabelFontSize,cx:combinationX.bandwidth()/2,bandWidth:combinationX.bandwidth(),format:combinationY.tickFormat(),has:function has(v,s){var sk=toKey(s);return Array.from(v.sets).some((function(ss){return toKey(ss)===sk}))},labelOffset:largestCSLabelWidth+9+6},toKey:toKey,toElemKey:toElemKey}}},515:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__(12),__webpack_require__(11),__webpack_require__(9),__webpack_require__(2),__webpack_require__(10),__webpack_require__(190),__webpack_require__(17),__webpack_require__(16);var react__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_8___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_8__),_upsetjs_model__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(40),_utils__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(15),QueryLegend=react__WEBPACK_IMPORTED_MODULE_8___default.a.memo((function(_ref){var queries=_ref.queries,size=_ref.size,style=_ref.style,data=_ref.data;return react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement("text",{transform:"translate(".concat(size.legend.x,",4)"),style:style.styles.legend,className:Object(_utils__WEBPACK_IMPORTED_MODULE_10__.b)("legendTextStyle-".concat(style.id),style.classNames.legend)},queries.map((function(q,i){var count=null;return Object(_upsetjs_model__WEBPACK_IMPORTED_MODULE_9__.f)(q)?count=q.set.cardinality:Object(_upsetjs_model__WEBPACK_IMPORTED_MODULE_9__.e)(q)&&(count=q.elems instanceof Set?q.elems.size:q.elems.length),react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_8___default.a.Fragment,{key:q.name},react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement("tspan",{className:"fillQ".concat(i,"-").concat(data.id)},"  ⬤ "),react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement("tspan",null,q.name,null!=count?": ".concat(data.sets.format(count)):""))})))}));__webpack_exports__.a=QueryLegend},516:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__(1),__webpack_require__(12),__webpack_require__(33),__webpack_require__(46),__webpack_require__(9),__webpack_require__(146),__webpack_require__(2),__webpack_require__(59),__webpack_require__(38),__webpack_require__(219),__webpack_require__(220),__webpack_require__(7),__webpack_require__(47);var _upsetjs_model__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(40),react__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_14___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_14__),_CombinationSelectionChart__WEBPACK_IMPORTED_MODULE_15__=__webpack_require__(231),_SetSelectionChart__WEBPACK_IMPORTED_MODULE_16__=__webpack_require__(232);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var source,i=1;i<arguments.length;i++)source=null!=arguments[i]?arguments[i]:{},i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}));return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var EMPTY_ARRAY=[];__webpack_exports__.a=react__WEBPACK_IMPORTED_MODULE_14___default.a.memo((function(_ref){var size=_ref.size,data=_ref.data,style=_ref.style,onHover=_ref.onHover,secondary=_ref.secondary,queries=_ref.queries,someAddon=size.sets.addons.some((function(s){return null!=s.renderQuery}))||size.cs.addons.some((function(s){return null!=s.renderQuery})),qs=Object(react__WEBPACK_IMPORTED_MODULE_14__.useMemo)((function(){return queries.map((function(q){return _objectSpread(_objectSpread({},q),{},{overlap:Object(_upsetjs_model__WEBPACK_IMPORTED_MODULE_13__.j)(q,"intersection",data.toElemKey),elemOverlap:someAddon?Object(_upsetjs_model__WEBPACK_IMPORTED_MODULE_13__.i)(q,"intersection",data.toElemKey):null})}))}),[queries,someAddon,data.toElemKey]);function wrapAddon(addon,query,overlapper,secondary){return _objectSpread(_objectSpread({},addon),{},{render:function render(props){var overlap=overlapper(props.set);return addon.renderQuery?addon.renderQuery(_objectSpread({query:query,overlap:overlap,secondary:secondary},props)):null}})}return react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement("g",{className:onHover&&!secondary?"pnone-".concat(style.id):void 0},react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement("g",{transform:"translate(".concat(size.sets.x,",").concat(size.sets.y,")")},qs.map((function(q,i){return react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(_SetSelectionChart__WEBPACK_IMPORTED_MODULE_16__.a,{key:q.name,data:data,size:size,style:style,elemOverlap:q.overlap,suffix:"Q".concat(i,"-").concat(data.id),secondary:secondary||0<i,tooltip:onHover&&!(secondary||0<i)?void 0:q.name,setAddons:0===size.sets.addons.length?EMPTY_ARRAY:size.sets.addons.map((function(a){return wrapAddon(a,q,q.elemOverlap,secondary||0<i)}))})}))),react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement("g",{transform:"translate(".concat(size.cs.x,",").concat(size.cs.y,")")},qs.map((function(q,i){return react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement(_CombinationSelectionChart__WEBPACK_IMPORTED_MODULE_15__.a,{key:q.name,data:data,size:size,style:style,elemOverlap:q.overlap,suffix:"Q".concat(i,"-").concat(data.id),secondary:secondary||0<i,tooltip:onHover&&!(secondary||0<i)?void 0:q.name,combinationAddons:0===size.cs.addons.length?EMPTY_ARRAY:size.cs.addons.map((function(a){return wrapAddon(a,q,q.elemOverlap,secondary||0<i)}))})}))))}))},517:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return ExportButtons}));var react=__webpack_require__(0),react_default=__webpack_require__.n(react),defaults=(__webpack_require__(1),__webpack_require__(12),__webpack_require__(498),__webpack_require__(33),__webpack_require__(107),__webpack_require__(46),__webpack_require__(29),__webpack_require__(88),__webpack_require__(11),__webpack_require__(9),__webpack_require__(499),__webpack_require__(20),__webpack_require__(2),__webpack_require__(127),__webpack_require__(324),__webpack_require__(4),__webpack_require__(59),__webpack_require__(38),__webpack_require__(219),__webpack_require__(220),__webpack_require__(7),__webpack_require__(10),__webpack_require__(28),__webpack_require__(89),__webpack_require__(17),__webpack_require__(122),__webpack_require__(317),__webpack_require__(47),__webpack_require__(16),__webpack_require__(154),__webpack_require__(149),__webpack_require__(48));function exportSVG(node,_ref){var _ref$type=_ref.type,type=void 0===_ref$type?"png":_ref$type,_ref$title=_ref.title,title=void 0===_ref$title?"UpSet":_ref$title,toRemove=_ref.toRemove,theme=node.dataset.theme,clone=node.cloneNode(!0);clone.style.backgroundColor="dark"===theme?defaults.a:"white",toRemove&&Array.from(clone.querySelectorAll(toRemove)).forEach((function(d){return d.remove()}));var b=new Blob([(new XMLSerializer).serializeToString(clone)],{type:"image/svg+xml;charset=utf-8"}),url=URL.createObjectURL(b);return"svg"===type?(downloadUrl(url,"".concat(title,".").concat(type),node.ownerDocument),URL.revokeObjectURL(url),Promise.resolve()):function toPNG(url,node){var canvas=node.ownerDocument.createElement("canvas"),bb=node.getBoundingClientRect();canvas.width=bb.width,canvas.height=bb.height;var ctx=canvas.getContext("2d"),img=new Image(canvas.width,canvas.height);return new Promise((function(resolve){img.onload=function(){ctx.drawImage(img,0,0);var png=canvas.toDataURL("image/png");resolve(png)},img.src=url}))}(url,node).then((function(purl){downloadUrl(purl,"".concat(title,".").concat(type),node.ownerDocument),URL.revokeObjectURL(url)}))}function downloadUrl(url,title,doc){var a=doc.createElement("a");a.href=url,a.style.position="absolute",a.style.left="-10000px",a.style.top="-10000px",a.download=title,document.body.appendChild(a),a.click(),a.remove()}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var source,i=1;i<arguments.length;i++)source=null!=arguments[i]?arguments[i]:{},i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}));return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function exportChart(evt){var svg=evt.currentTarget.closest("svg"),type=evt.currentTarget.dataset.type||"png";"vega"!==type?exportSVG(svg,{type:type,toRemove:".".concat(evt.currentTarget.getAttribute("class"))}):function exportVegaLite(svg){var _ref2,_svg$ownerDocument,_svg$ownerDocument$de,_svg$querySelector$da,_svg$querySelector,_ref=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},_ref$title=_ref.title,title=void 0===_ref$title?"UpSet":_ref$title,resolveStyle=null!==(_ref2=svg.getComputedStyle||(null===(_svg$ownerDocument=svg.ownerDocument)||void 0===_svg$ownerDocument||null===(_svg$ownerDocument$de=_svg$ownerDocument.defaultView)||void 0===_svg$ownerDocument$de?void 0:_svg$ownerDocument$de.getComputedStyle))&&void 0!==_ref2?_ref2:window.getComputedStyle,theme=svg.dataset.theme,styleId=Array.from(svg.classList).find((function(d){return d.startsWith("root-")})).slice(5),sets=Array.from(svg.querySelectorAll("[data-upset=sets] [data-cardinality]")).map((function(set){return{name:set.querySelector("text.setTextStyle-".concat(styleId)).textContent,cardinality:Number.parseInt(set.dataset.cardinality,10)}})).reverse(),barLabelOffset=-Number.parseInt(svg.querySelector(".sBarTextStyle-".concat(styleId)).getAttribute("dx"),10),color=resolveStyle(svg.querySelector(".fillPrimary-".concat(styleId))).fill,fillNotMember=resolveStyle(svg.querySelector(".fillNotMember-".concat(styleId))).fill,textColor=resolveStyle(svg.querySelector("text")).fill,csName=svg.querySelector(".cChartTextStyle-".concat(styleId)).textContent,setName=svg.querySelector(".sChartTextStyle-".concat(styleId)).textContent,combinations=Array.from(svg.querySelectorAll("[data-upset=cs] [data-cardinality]")).map((function(set){return{name:set.querySelector("text.hoverBarTextStyle-".concat(styleId)).textContent,cardinality:Number.parseInt(set.dataset.cardinality,10),sets:Array.from(set.querySelectorAll(".fillPrimary-".concat(styleId," > title"))).map((function(n){return n.textContent}))}})),translateX=function(v){return Number.parseInt(v.getAttribute("transform").match(/(\d+),/)[1],10)},base=svg.querySelector("[data-upset=base]"),padding=translateX(base),setWidth=translateX(svg.querySelector("[data-upset=csaxis]")),csWidth=Number.parseInt(base.querySelector("g").firstElementChild.children[1].getAttribute("x2"),10),csHeight=function translateY(v){return Number.parseInt(v.getAttribute("transform").match(/,(\d+)/)[1],10)}(svg.querySelector("[data-upset=setaxis]")),labelWidth=Number.parseInt(svg.querySelector("defs rect").getAttribute("width"),10),setHeight=Number.parseInt(svg.querySelector("defs rect").getAttribute("height"),10),radius=Number.parseInt(svg.querySelector("[data-cardinality] circle").getAttribute("r"),10),hasPrimarySelection=null!=svg.querySelector("[data-upset=sets-s] [data-cardinality]"),hasQuery=null!=svg.querySelector("[data-upset=sets-q] [data-cardinality]"),hasSelection=hasPrimarySelection||hasQuery,selectionColor="orange";hasSelection&&(Array.from(svg.querySelectorAll("[data-upset=sets-".concat(hasPrimarySelection?"s]":"q]:first-of-type"," [data-cardinality]"))).forEach((function(elem){var i=sets.length-Number.parseInt(elem.dataset.i,10)-1;sets[i].selection=Number.parseInt(elem.dataset.cardinality,10)})),Array.from(svg.querySelectorAll("[data-upset=cs-".concat(hasPrimarySelection?"s]":"q:first-of-type"," [data-cardinality]"))).forEach((function(elem){var i=Number.parseInt(elem.dataset.i,10);combinations[i].selection=Number.parseInt(elem.dataset.cardinality,10)})),selectionColor=resolveStyle(svg.querySelector("[data-upset=sets-".concat(hasPrimarySelection?"s":"q","] [data-cardinality]"))).fill);var highlightedCombination=Number.parseInt(null!==(_svg$querySelector$da=null===(_svg$querySelector=svg.querySelector("[data-upset=cs-ss]"))||void 0===_svg$querySelector?void 0:_svg$querySelector.dataset.i)&&void 0!==_svg$querySelector$da?_svg$querySelector$da:"-1",10),filter=0<=highlightedCombination?{field:"partOf",oneOf:[1,2]}:{field:"partOf",equal:1},spec={$schema:"https://vega.github.io/schema/vega-lite/v4.json",title:title,datasets:{sets:sets,combinations:combinations.map((function(c,i){return Object.assign({},c,{partOf:highlightedCombination===i?2:1,nsets:[""]})})).concat(combinations.map((function(c){return{name:c.name,cardinality:c.cardinality,partOf:0,sets:[""],nsets:sets.filter((function(s){return!c.sets.includes(s.name)})).map((function(s){return s.name}))}})))},vconcat:[{hconcat:[{mark:"bar",width:setWidth+labelWidth-40,height:csHeight},{width:csWidth,height:csHeight,data:{name:"combinations"},transform:[{filter:filter}],layer:[{mark:{type:"bar",tooltip:!0}},{mark:{type:"text",align:"center",baseline:"bottom",dy:-barLabelOffset},encoding:{text:{field:"cardinality",type:"quantitative"}}},hasSelection&&{mark:{type:"bar",fill:selectionColor,tooltip:!0},encoding:{y:{field:"selection",type:"quantitative"}}}].filter(Boolean),encoding:{x:{field:"name",type:"ordinal",axis:null,sort:null},y:{field:"cardinality",type:"quantitative",axis:{grid:!1},title:csName}}}]},{hconcat:[{width:setWidth,height:setHeight,data:{name:"sets"},layer:[{mark:{type:"bar",tooltip:!0}},{mark:{type:"text",align:"right",baseline:"middle",dx:-barLabelOffset},encoding:{text:{field:"cardinality",type:"quantitative"}}},hasSelection&&{mark:{type:"bar",fill:selectionColor,tooltip:!0},encoding:{x:{field:"selection",type:"quantitative"}}}].filter(Boolean),encoding:{y:{field:"name",type:"ordinal",axis:null,sort:null},x:{field:"cardinality",type:"quantitative",title:setName,sort:"descending",axis:{grid:!1}}}},{data:{name:"sets"},width:labelWidth,height:setHeight,mark:{type:"text",align:"center",baseline:"middle",fontSize:Number.parseInt(resolveStyle(svg.querySelector(".setTextStyle-".concat(styleId))).fontSize,10)},encoding:{y:{field:"name",type:"ordinal",axis:null,sort:null},text:{field:"name",type:"ordinal"}}},{width:csWidth,height:setHeight,data:{name:"combinations"},transform:[{flatten:["sets"],as:["has_set"]},{flatten:["nsets"],as:["has_not_set"]},{calculate:"datum.has_set+datum.has_not_set",as:"set"}],layer:[{mark:{type:"circle",size:radius*radius*Math.PI,tooltip:!0},encoding:{color:{field:"partOf",type:"nominal",legend:null,scale:{range:[fillNotMember,color].concat(0<=highlightedCombination?[selectionColor]:[])}},y:{field:"set",type:"ordinal",axis:null,sort:null}}},{mark:"rule",transform:[{filter:filter},{calculate:"datum.sets[datum.sets.length -1]",as:"set_end"}],encoding:_objectSpread({y:{field:"sets[0]",type:"ordinal",axis:null,sort:null},y2:{field:"set_end"}},0>highlightedCombination?{}:{color:{field:"partOf",type:"nominal",legend:null,scale:{range:[color,selectionColor]}}})}],encoding:{x:{field:"name",type:"ordinal",axis:null,sort:null}}}]}],config:{padding:padding,background:"dark"===theme?defaults.a:"white",concat:{spacing:0},view:{stroke:null},bar:{fill:color},circle:{opacity:1},rule:{stroke:color,strokeWidth:Number.parseInt(resolveStyle(svg.querySelector("[data-upset=cs] [data-cardinality] line")).strokeWidth,10)},axis:{labelColor:textColor,labelFontSize:Number.parseInt(resolveStyle(svg.querySelector(".axisTextStyle-".concat(styleId))).fontSize,10),titleColor:textColor,titleFontSize:Number.parseInt(resolveStyle(svg.querySelector(".cChartTextStyle-".concat(styleId))).fontSize,10)},title:{color:textColor},text:{fill:textColor,fontSize:Number.parseInt(resolveStyle(svg.querySelector(".sBarTextStyle-".concat(styleId))).fontSize,10)}}},url=URL.createObjectURL(new Blob([JSON.stringify(spec,null,2)],{type:"application/json"}));downloadUrl(url,"".concat(title,".json"),svg.ownerDocument),URL.revokeObjectURL(url)}(svg)}var ExportButtons_ref2=react_default.a.createElement("title",null,"Download PNG Image"),_ref3=react_default.a.createElement("rect",{y:-9,width:24,height:11,rx:2,ry:2}),_ref4=react_default.a.createElement("title",null,"Download SVG Image"),_ref5=react_default.a.createElement("rect",{y:-9,width:24,height:11,rx:2,ry:2}),_ref6=react_default.a.createElement("title",null,"Download VEGA-Lite Specification"),_ref7=react_default.a.createElement("rect",{y:-9,width:32,height:11,rx:2,ry:2});function ExportButtons(_ref){var transform=_ref.transform,styleId=_ref.styleId;return react_default.a.createElement("g",{className:"exportButtons-".concat(styleId),transform:transform},react_default.a.createElement("g",{className:"exportButton-".concat(styleId),onClick:exportChart,"data-type":"png",transform:"translate(-50, 0)"},ExportButtons_ref2,_ref3,react_default.a.createElement("text",{className:"exportTextStyle-".concat(styleId),x:12},"PNG")),react_default.a.createElement("g",{className:"exportButton-".concat(styleId),onClick:exportChart,"data-type":"svg",transform:"translate(-24, 0)"},_ref4,_ref5,react_default.a.createElement("text",{className:"exportTextStyle-".concat(styleId),x:12},"SVG")),react_default.a.createElement("g",{className:"exportButton-".concat(styleId),onClick:exportChart,"data-type":"vega",transform:"translate(-84, 0)"},_ref6,_ref7,react_default.a.createElement("text",{className:"exportTextStyle-".concat(styleId),x:16},"VEGA")))}ExportButtons.displayName="ExportButtons";try{ExportButtons.displayName="ExportButtons",ExportButtons.__docgenInfo={description:"",displayName:"ExportButtons",props:{transform:{defaultValue:null,description:"",name:"transform",required:!0,type:{name:"string"}},styleId:{defaultValue:null,description:"",name:"styleId",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/ExportButtons.tsx#ExportButtons"]={docgenInfo:ExportButtons.__docgenInfo,name:"ExportButtons",path:"src/components/ExportButtons.tsx#ExportButtons"})}catch(__react_docgen_typescript_loader_error){}ExportButtons.__docgenInfo={description:"",methods:[],displayName:"ExportButtons",props:{transform:{required:!0,tsType:{name:"string"},description:""},styleId:{required:!0,tsType:{name:"string"},description:""}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/ExportButtons.tsx"]={name:"ExportButtons",docgenInfo:ExportButtons.__docgenInfo,path:"src/components/ExportButtons.tsx"})},518:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__(1),__webpack_require__(13),__webpack_require__(25),__webpack_require__(12),__webpack_require__(29),__webpack_require__(19),__webpack_require__(11),__webpack_require__(9),__webpack_require__(20),__webpack_require__(23),__webpack_require__(2),__webpack_require__(10),__webpack_require__(24),__webpack_require__(17),__webpack_require__(16);var react=__webpack_require__(0),react_default=__webpack_require__.n(react),UpSetDot=(__webpack_require__(107),__webpack_require__(230)),utils=__webpack_require__(15),components_CombinationChart=react_default.a.memo((function(_ref){var d=_ref.d,onClick=_ref.onClick,onMouseEnter=_ref.onMouseEnter,onMouseLeave=_ref.onMouseLeave,onContextMenu=_ref.onContextMenu,className=_ref.className,data=_ref.data,size=_ref.size,style=_ref.style,children=_ref.children,y=data.cs.y(d.cardinality),genPosition=Object(utils.a)(size.cs.h+size.sets.h);return react_default.a.createElement("g",{transform:"translate(".concat(data.cs.x(d),", 0)"),onMouseEnter:onMouseEnter(d),onMouseLeave:onMouseLeave,onClick:onClick(d),onContextMenu:onContextMenu(d),className:className,"data-cardinality":d.cardinality},react_default.a.createElement("title",null,d.name,": ",data.cs.format(d.cardinality)),react_default.a.createElement("rect",{y:-size.cs.before,width:data.cs.bandWidth,height:size.sets.h+size.cs.h+size.cs.before+size.cs.after,className:"hoverBar-".concat(style.id)}),react_default.a.createElement("rect",{y:y,height:size.cs.h-y,width:data.cs.bandWidth,className:Object(utils.b)("fillPrimary-".concat(style.id),style.classNames.bar),style:style.styles.bar}),react_default.a.createElement("text",{y:y-style.barLabelOffset,x:data.cs.bandWidth/2,style:style.styles.barLabel,className:Object(utils.b)("cBarTextStyle-".concat(style.id),style.classNames.barLabel)},data.cs.format(d.cardinality)),react_default.a.createElement("text",{y:-style.barLabelOffset-size.cs.before,x:data.cs.bandWidth/2,style:style.styles.barLabel,className:Object(utils.b)("hoverBarTextStyle-".concat(style.id),style.classNames.barLabel)},d.name),data.sets.v.map((function(s,i){return react_default.a.createElement(UpSetDot.a,{key:data.sets.keys[i],r:data.r,cx:data.cs.cx,cy:data.sets.y(s)+data.sets.cy,name:data.cs.has(d,s)?s.name:d.name,style:style.styles.dot,className:Object(utils.b)(d.sets.has(s)?"fillPrimary-".concat(style.id):"fillNotMember-".concat(style.id),style.classNames.dot)})})),1<d.sets.size&&react_default.a.createElement("line",{x1:data.cs.cx,y1:data.sets.y(data.sets.v.find((function(p){return data.cs.has(d,p)})))+data.sets.cy,x2:data.cs.cx,y2:data.sets.y(data.sets.rv.find((function(p){return data.cs.has(d,p)})))+data.sets.cy,className:"upsetLine-".concat(data.id)}),size.cs.addons.map((function(addon){return react_default.a.createElement("g",{key:addon.name,transform:"translate(0,".concat(genPosition(addon),")")},addon.render({set:d,width:data.cs.bandWidth,height:addon.size,theme:style.theme}))})),children)})),components_SetChart=react_default.a.memo((function(_ref){var d=_ref.d,i=_ref.i,onMouseEnter=_ref.onMouseEnter,onMouseLeave=_ref.onMouseLeave,onClick=_ref.onClick,onContextMenu=_ref.onContextMenu,className=_ref.className,size=_ref.size,data=_ref.data,style=_ref.style,children=_ref.children,x=data.sets.x(d.cardinality),genPosition=Object(utils.a)(size.sets.w+size.labels.w+size.cs.w);return react_default.a.createElement("g",{transform:"translate(0, ".concat(data.sets.y(d),")"),onMouseEnter:onMouseEnter(d),onMouseLeave:onMouseLeave,onClick:onClick(d),onContextMenu:onContextMenu(d),className:className,"data-cardinality":d.cardinality},react_default.a.createElement("title",null,d.name,": ",data.sets.format(d.cardinality)),react_default.a.createElement("rect",{x:-size.sets.before,width:size.sets.w+size.labels.w+size.cs.w+size.sets.after,height:data.sets.bandWidth,className:"hoverBar-".concat(style.id)}),1==i%2&&react_default.a.createElement("rect",{x:size.sets.w,width:size.labels.w+size.cs.w+size.sets.after,height:data.sets.bandWidth,className:"fillAlternating-".concat(style.id)}),react_default.a.createElement("rect",{x:x,width:size.sets.w-x,height:data.sets.bandWidth,className:Object(utils.b)("fillPrimary-".concat(style.id),style.classNames.bar),style:style.styles.bar}),react_default.a.createElement("text",{x:x,dx:-style.barLabelOffset,y:data.sets.bandWidth/2,style:style.styles.barLabel,className:Object(utils.b)("sBarTextStyle-".concat(style.id),style.classNames.barLabel)},data.sets.format(d.cardinality)),react_default.a.createElement("text",{x:size.sets.w+size.labels.w/2,y:data.sets.bandWidth/2,className:Object(utils.b)("setTextStyle-".concat(style.id),style.classNames.setLabel),style:style.styles.setLabel,clipPath:"url(#clip-".concat(size.id,")")},d.name),size.sets.addons.map((function(addon){return react_default.a.createElement("g",{key:addon.name,transform:"translate(".concat(genPosition(addon),",0)")},addon.render({set:d,width:addon.size,height:data.sets.bandWidth,theme:style.theme}))})),children)}));function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var UpSetChart=react_default.a.memo((function(_ref){var data=_ref.data,size=_ref.size,style=_ref.style,onHover=_ref.onHover,onClick=_ref.onClick,onContextMenu=_ref.onContextMenu,setChildrenFactory=_ref.setChildrenFactory,combinationChildrenFactory=_ref.combinationChildrenFactory,_React$useMemo2=_slicedToArray(react_default.a.useMemo((function(){return[Object(utils.d)(onClick),Object(utils.d)(onHover),Object(utils.d)(onContextMenu),onHover?function(evt){return onHover(null,evt.nativeEvent)}:void 0]}),[onClick,onHover,onContextMenu]),4),onClickImpl=_React$useMemo2[0],onMouseEnterImpl=_React$useMemo2[1],onContextMenuImpl=_React$useMemo2[2],onMouseLeaveImpl=_React$useMemo2[3];return react_default.a.createElement("g",{className:onClick?"clickAble-".concat(style.id):void 0},react_default.a.createElement("g",{transform:"translate(".concat(size.sets.x,",").concat(size.sets.y,")"),"data-upset":"sets"},data.sets.v.map((function(d,i){return react_default.a.createElement(components_SetChart,{key:data.sets.keys[i],d:d,i:i,onClick:onClickImpl,onMouseEnter:onMouseEnterImpl,onMouseLeave:onMouseLeaveImpl,onContextMenu:onContextMenuImpl,className:onClick||onHover?"interactive-".concat(style.id):void 0,data:data,style:style,size:size},setChildrenFactory&&setChildrenFactory(d))}))),react_default.a.createElement("g",{transform:"translate(".concat(size.cs.x,",").concat(size.cs.y,")"),"data-upset":"cs"},data.cs.v.map((function(d,i){return react_default.a.createElement(components_CombinationChart,{key:data.cs.keys[i],d:d,onClick:onClickImpl,onMouseEnter:onMouseEnterImpl,onMouseLeave:onMouseLeaveImpl,onContextMenu:onContextMenuImpl,className:onClick||onHover?"interactive-".concat(style.id):void 0,data:data,style:style,size:size},combinationChildrenFactory&&combinationChildrenFactory(d))}))))}));__webpack_exports__.a=UpSetChart;try{UpSetChart.displayName="UpSetChart",UpSetChart.__docgenInfo={description:"",displayName:"UpSetChart",props:{size:{defaultValue:null,description:"",name:"size",required:!0,type:{name:"{ id: string; cs: { before: number; after: number; x: number; y: number; w: number; h: number; addons: readonly UpSetAddon<any, any>[]; }; labels: { x: number; y: number; w: number; h: number; }; sets: { before: number; ... 5 more ...; addons: readonly UpSetAddon<...>[]; }; ... 4 more ...; h: number; }"}},style:{defaultValue:null,description:"",name:"style",required:!0,type:{name:'{ theme: "light" | "dark"; styles: any; classNames: any; cs: { name: ReactNode; offset: number | "auto"; }; sets: { name: ReactNode; offset: number | "auto"; }; emptySelection: boolean; id: string; barLabelOffset: number; selectionColor: string; }'}},data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"UpSetDataInfo<T>"}},onHover:{defaultValue:null,description:"",name:"onHover",required:!1,type:{name:"(selection: ISetLike<T>, evt: MouseEvent) => void"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"(selection: ISetLike<T>, evt: MouseEvent) => void"}},onContextMenu:{defaultValue:null,description:"",name:"onContextMenu",required:!1,type:{name:"(selection: ISetLike<T>, evt: MouseEvent) => void"}},setChildrenFactory:{defaultValue:null,description:"",name:"setChildrenFactory",required:!1,type:{name:"(set: ISet<T>) => any"}},combinationChildrenFactory:{defaultValue:null,description:"",name:"combinationChildrenFactory",required:!1,type:{name:"(combination: ISetCombination<T>) => any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/UpSetChart.tsx#UpSetChart"]={docgenInfo:UpSetChart.__docgenInfo,name:"UpSetChart",path:"src/components/UpSetChart.tsx#UpSetChart"})}catch(__react_docgen_typescript_loader_error){}},519:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return UpSetSelection}));__webpack_require__(1),__webpack_require__(12),__webpack_require__(33),__webpack_require__(46),__webpack_require__(19),__webpack_require__(9),__webpack_require__(146),__webpack_require__(2),__webpack_require__(59),__webpack_require__(38),__webpack_require__(219),__webpack_require__(220),__webpack_require__(7),__webpack_require__(47);var model_esm=__webpack_require__(40),react=__webpack_require__(0),react_default=__webpack_require__.n(react),CombinationSelectionChart=__webpack_require__(231);function LabelsSelection(_ref){var data=_ref.data,size=_ref.size,style=_ref.style,selection=_ref.selection;return selection&&"set"===selection.type?react_default.a.createElement("rect",{y:data.sets.y(selection),width:size.labels.w+size.cs.w+size.sets.after,height:data.sets.bandWidth,className:"selectionHint-".concat(style.id)}):null}LabelsSelection.displayName="LabelsSelection";try{LabelsSelection.displayName="LabelsSelection",LabelsSelection.__docgenInfo={description:"",displayName:"LabelsSelection",props:{data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"UpSetDataInfo<T>"}},size:{defaultValue:null,description:"",name:"size",required:!0,type:{name:"{ id: string; cs: { before: number; after: number; x: number; y: number; w: number; h: number; addons: readonly UpSetAddon<any, any>[]; }; labels: { x: number; y: number; w: number; h: number; }; sets: { before: number; ... 5 more ...; addons: readonly UpSetAddon<...>[]; }; ... 4 more ...; h: number; }"}},style:{defaultValue:null,description:"",name:"style",required:!0,type:{name:'{ theme: "light" | "dark"; styles: any; classNames: any; cs: { name: ReactNode; offset: number | "auto"; }; sets: { name: ReactNode; offset: number | "auto"; }; emptySelection: boolean; id: string; barLabelOffset: number; selectionColor: string; }'}},selection:{defaultValue:null,description:"",name:"selection",required:!0,type:{name:"ISetLike<T>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/LabelsSelection.tsx#LabelsSelection"]={docgenInfo:LabelsSelection.__docgenInfo,name:"LabelsSelection",path:"src/components/LabelsSelection.tsx#LabelsSelection"})}catch(__react_docgen_typescript_loader_error){}LabelsSelection.__docgenInfo={description:"",methods:[],displayName:"LabelsSelection"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/LabelsSelection.tsx"]={name:"LabelsSelection",docgenInfo:LabelsSelection.__docgenInfo,path:"src/components/LabelsSelection.tsx"});var SetSelectionChart=__webpack_require__(232),UpSetDot=(__webpack_require__(107),__webpack_require__(18),__webpack_require__(11),__webpack_require__(10),__webpack_require__(16),__webpack_require__(230)),utils=__webpack_require__(15);function UpSetSelectionChart(_ref){var data=_ref.data,size=_ref.size,style=_ref.style,selection=_ref.selection,cy=data.sets.bandWidth/2,cx=data.cs.cx,r=data.r,height=size.sets.h+size.sets.after,width=data.cs.bandWidth;if(!selection||"set"===selection.type)return null;var d=selection,index=data.cs.keys.indexOf(data.toKey(d));return react_default.a.createElement("g",{transform:"translate(".concat(size.labels.w+data.cs.x(d),", 0)"),"data-upset":"cs-ss","data-i":index},react_default.a.createElement("rect",{width:width,height:height,className:"selectionHint-".concat(style.id)}),data.sets.v.filter((function(s){return data.cs.has(d,s)})).map((function(s){return react_default.a.createElement(UpSetDot.a,{key:data.toKey(s),r:1.1*r,cx:cx,cy:data.sets.y(s)+cy,name:s.name,className:Object(utils.b)("fillSelection-".concat(style.id),"pnone-".concat(style.id),style.classNames.dot),style:style.styles.dot})})),1<d.sets.size&&react_default.a.createElement("line",{x1:cx,y1:data.sets.y(data.sets.v.find((function(p){return data.cs.has(d,p)})))+cy,x2:cx,y2:data.sets.y(data.sets.rv.find((function(p){return data.cs.has(d,p)})))+cy,className:"upsetSelectionLine-".concat(data.id)}))}UpSetSelectionChart.displayName="UpSetSelectionChart",UpSetSelectionChart.__docgenInfo={description:"",methods:[],displayName:"UpSetSelectionChart"};var components_UpSetSelectionChart=UpSetSelectionChart;try{UpSetSelectionChart.displayName="UpSetSelectionChart",UpSetSelectionChart.__docgenInfo={description:"",displayName:"UpSetSelectionChart",props:{data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"UpSetDataInfo<T>"}},size:{defaultValue:null,description:"",name:"size",required:!0,type:{name:"{ id: string; cs: { before: number; after: number; x: number; y: number; w: number; h: number; addons: readonly UpSetAddon<any, any>[]; }; labels: { x: number; y: number; w: number; h: number; }; sets: { before: number; ... 5 more ...; addons: readonly UpSetAddon<...>[]; }; ... 4 more ...; h: number; }"}},style:{defaultValue:null,description:"",name:"style",required:!0,type:{name:'{ theme: "light" | "dark"; styles: any; classNames: any; cs: { name: ReactNode; offset: number | "auto"; }; sets: { name: ReactNode; offset: number | "auto"; }; emptySelection: boolean; id: string; barLabelOffset: number; selectionColor: string; }'}},selection:{defaultValue:null,description:"",name:"selection",required:!0,type:{name:"ISetLike<T>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/UpSetSelectionChart.tsx#UpSetSelectionChart"]={docgenInfo:UpSetSelectionChart.__docgenInfo,name:"UpSetSelectionChart",path:"src/components/UpSetSelectionChart.tsx#UpSetSelectionChart"})}catch(__react_docgen_typescript_loader_error){}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var source,i=1;i<arguments.length;i++)source=null!=arguments[i]?arguments[i]:{},i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}));return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/UpSetSelectionChart.tsx"]={name:"UpSetSelectionChart",docgenInfo:UpSetSelectionChart.__docgenInfo,path:"src/components/UpSetSelectionChart.tsx"});var EMPTY_ARRAY=[];function isSetLike(s){return null!=s&&!Array.isArray(s)}function elemOverlapOf(query,toElemKey){var f=Object(model_esm.l)(query,toElemKey);return function(s){return f(s.elems).intersection}}function noOverlap(){return 0}function UpSetSelection(_ref){var _ref2,size=_ref.size,data=_ref.data,style=_ref.style,selection=_ref.selection,onHover=_ref.onHover,empty=style.emptySelection,selectionOverlap=function(){if(!selection)return noOverlap;if("function"==typeof selection)return selection;if(Array.isArray(selection))return elemOverlapOf(selection,data.toElemKey);var ss=selection;if(ss.overlap)return ss.overlap;var f=elemOverlapOf(ss.elems,data.toElemKey);return function(s){return s.overlap?s.overlap(ss):f(s)}}(),selectionName=Array.isArray(selection)?"Array(".concat(selection.length,")"):"function"==typeof selection?"?":null===(_ref2=selection)||void 0===_ref2?void 0:_ref2.name,someAddon=size.sets.addons.some((function(s){return null!=s.renderSelection}))||size.cs.addons.some((function(s){return null!=s.renderSelection})),selectionElemOverlap=selection&&"function"!=typeof selection&&someAddon?function elemElemOverlapOf(query,toElemKey){var f=Object(model_esm.k)(query,toElemKey);return function(s){return f(s.elems).intersection}}(Array.isArray(selection)?selection:selection.elems,data.toElemKey):null;function wrapAddon(addon){return _objectSpread(_objectSpread({},addon),{},{render:function render(props){var overlap=selectionElemOverlap?selectionElemOverlap(props.set):null;return addon.renderSelection?addon.renderSelection(_objectSpread({selection:selection,selectionColor:style.selectionColor,overlap:overlap},props)):null}})}return react_default.a.createElement("g",{className:onHover?"pnone-".concat(style.id):void 0},(selection||empty)&&react_default.a.createElement(CombinationSelectionChart.a,{data:data,size:size,style:style,transform:"translate(".concat(size.cs.x,",").concat(size.cs.y,")"),empty:empty&&!selection,elemOverlap:selectionOverlap,suffix:"Selection-".concat(style.id),tooltip:onHover?void 0:selectionName,combinationAddons:0===size.cs.addons.length?EMPTY_ARRAY:size.cs.addons.map(wrapAddon)}),(selection||empty)&&react_default.a.createElement(SetSelectionChart.a,{data:data,size:size,style:style,transform:"translate(".concat(size.sets.x,",").concat(size.sets.y,")"),empty:empty&&!selection,elemOverlap:selectionOverlap,suffix:"Selection-".concat(style.id),tooltip:onHover?void 0:selectionName,setAddons:0===size.sets.addons.length?EMPTY_ARRAY:size.sets.addons.map(wrapAddon)}),react_default.a.createElement("g",{transform:"translate(".concat(size.labels.x,",").concat(size.labels.y,")")},isSetLike(selection)&&react_default.a.createElement(LabelsSelection,{data:data,size:size,style:style,selection:selection}),isSetLike(selection)&&react_default.a.createElement(components_UpSetSelectionChart,{data:data,size:size,style:style,selection:selection})))}UpSetSelection.displayName="UpSetSelection";try{UpSetSelection.displayName="UpSetSelection",UpSetSelection.__docgenInfo={description:"",displayName:"UpSetSelection",props:{size:{defaultValue:null,description:"",name:"size",required:!0,type:{name:"{ id: string; cs: { before: number; after: number; x: number; y: number; w: number; h: number; addons: readonly UpSetAddon<any, any>[]; }; labels: { x: number; y: number; w: number; h: number; }; sets: { before: number; ... 5 more ...; addons: readonly UpSetAddon<...>[]; }; ... 4 more ...; h: number; }"}},style:{defaultValue:null,description:"",name:"style",required:!0,type:{name:'{ theme: "light" | "dark"; styles: any; classNames: any; cs: { name: ReactNode; offset: number | "auto"; }; sets: { name: ReactNode; offset: number | "auto"; }; emptySelection: boolean; id: string; barLabelOffset: number; selectionColor: string; }'}},data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"UpSetDataInfo<T>"}},onHover:{defaultValue:null,description:"",name:"onHover",required:!1,type:{name:"(selection: ISetLike<T>, evt: MouseEvent) => void"}},selection:{defaultValue:null,description:"",name:"selection",required:!0,type:{name:"ISet<T> | ISetIntersection<T> | ISetUnion<T> | ISetComposite<T> | readonly T[] | ((s: ISetLike<T>) => number)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/UpSetSelection.tsx#UpSetSelection"]={docgenInfo:UpSetSelection.__docgenInfo,name:"UpSetSelection",path:"src/components/UpSetSelection.tsx#UpSetSelection"})}catch(__react_docgen_typescript_loader_error){}UpSetSelection.__docgenInfo={description:"",methods:[],displayName:"UpSetSelection"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/UpSetSelection.tsx"]={name:"UpSetSelection",docgenInfo:UpSetSelection.__docgenInfo,path:"src/components/UpSetSelection.tsx"})},520:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__(12),__webpack_require__(9),__webpack_require__(2);var react=__webpack_require__(0),react_default=__webpack_require__.n(react),utils=__webpack_require__(15),D3HorizontalTick=react_default.a.memo((function(_ref){var pos=_ref.pos,spacing=_ref.spacing,tickSizeInner=_ref.tickSizeInner,orient=_ref.orient,name=_ref.name,style=_ref.style,k="top"===orient||"left"===orient?-1:1;return react_default.a.createElement("g",{transform:"translate(0, ".concat(pos+.5,")")},name&&react_default.a.createElement("text",{x:k*spacing,dy:"0.32em",className:Object(utils.b)("axisTextStyle-".concat(style.id),"right"===orient?"startText-".concat(style.id):"endText-".concat(style.id),style.classNames.axisTick),style:style.styles.axisTick},name),react_default.a.createElement("line",{x2:k*tickSizeInner,className:"axisLine-".concat(style.id)}))})),D3VerticalTick=react_default.a.memo((function(_ref2){var pos=_ref2.pos,name=_ref2.name,spacing=_ref2.spacing,orient=_ref2.orient,tickSizeInner=_ref2.tickSizeInner,style=_ref2.style,k="top"===orient||"left"===orient?-1:1;return react_default.a.createElement("g",{transform:"translate(".concat(pos+.5,", 0)")},name&&react_default.a.createElement("text",{y:k*spacing,dy:"top"===orient?"0em":"0.71em",className:Object(utils.b)("axisTextStyle-".concat(style.id),style.classNames.axisTick),style:style.styles.axisTick},name),react_default.a.createElement("line",{y2:k*tickSizeInner,className:"axisLine-".concat(style.id)}))}));function D3Axis(_ref3){var scale=_ref3.scale,orient=_ref3.orient,_ref3$tickSizeInner=_ref3.tickSizeInner,tickSizeInner=void 0===_ref3$tickSizeInner?6:_ref3$tickSizeInner,_ref3$tickSizeOuter=_ref3.tickSizeOuter,tickSizeOuter=void 0===_ref3$tickSizeOuter?6:_ref3$tickSizeOuter,_ref3$tickPadding=_ref3.tickPadding,tickPadding=void 0===_ref3$tickPadding?3:_ref3$tickPadding,size=_ref3.size,shift=_ref3.shift,style=_ref3.style,transform=_ref3.transform,spacing=Math.max(tickSizeInner,0)+tickPadding,range0=shift,range1=size,k="top"===orient||"left"===orient?-1:1,D3Tick="left"===orient||"right"===orient?D3HorizontalTick:D3VerticalTick,values=scale.ticks().map((function(d){return"number"==typeof d?{value:d,label:d+""}:d}));return react_default.a.createElement("g",{transform:transform},values.map((function(d){return react_default.a.createElement(D3Tick,{key:d.value,pos:scale(d.value),name:d.label,spacing:spacing,tickSizeInner:tickSizeInner,orient:orient,style:style})})),react_default.a.createElement("path",{className:"axisLine-".concat(style.id),d:"left"===orient||"right"===orient?tickSizeOuter?"M".concat(k*tickSizeOuter,",").concat(range0,"H0.5V").concat(range1,"H").concat(k*tickSizeOuter):"M0.5,".concat(range0,"V").concat(range1):tickSizeOuter?"M".concat(range0,",").concat(k*tickSizeOuter,"V0.5H").concat(range1,"V").concat(k*tickSizeOuter):"M".concat(range0,",0.5H").concat(range1)}))}D3Axis.displayName="D3Axis";try{D3Axis.displayName="D3Axis",D3Axis.__docgenInfo={description:"",displayName:"D3Axis",props:{scale:{defaultValue:null,description:"",name:"scale",required:!0,type:{name:"NumericScaleLike"}},orient:{defaultValue:null,description:"",name:"orient",required:!0,type:{name:'"top" | "bottom" | "left" | "right"'}},tickSizeInner:{defaultValue:{value:6},description:"",name:"tickSizeInner",required:!1,type:{name:"number"}},tickSizeOuter:{defaultValue:{value:6},description:"",name:"tickSizeOuter",required:!1,type:{name:"number"}},tickPadding:{defaultValue:{value:3},description:"",name:"tickPadding",required:!1,type:{name:"number"}},size:{defaultValue:null,description:"",name:"size",required:!0,type:{name:"number"}},shift:{defaultValue:null,description:"",name:"shift",required:!0,type:{name:"number"}},style:{defaultValue:null,description:"",name:"style",required:!0,type:{name:'{ theme: "light" | "dark"; styles: any; classNames: any; cs: { name: ReactNode; offset: number | "auto"; }; sets: { name: ReactNode; offset: number | "auto"; }; emptySelection: boolean; id: string; barLabelOffset: number; selectionColor: string; }'}},transform:{defaultValue:null,description:"",name:"transform",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/D3Axis.tsx#D3Axis"]={docgenInfo:D3Axis.__docgenInfo,name:"D3Axis",path:"src/components/D3Axis.tsx#D3Axis"})}catch(__react_docgen_typescript_loader_error){}D3Axis.__docgenInfo={description:"",methods:[],displayName:"D3Axis",props:{tickSizeInner:{defaultValue:{value:"6",computed:!1},required:!1},tickSizeOuter:{defaultValue:{value:"6",computed:!1},required:!1},tickPadding:{defaultValue:{value:"3",computed:!1},required:!1}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/D3Axis.tsx"]={name:"D3Axis",docgenInfo:D3Axis.__docgenInfo,path:"src/components/D3Axis.tsx"});__webpack_exports__.a=react_default.a.memo((function(_ref){var size=_ref.size,style=_ref.style,data=_ref.data,setPosGen=Object(utils.a)(size.sets.w+size.labels.w+size.cs.w),combinationPosGen=Object(utils.a)(size.cs.h+size.sets.h),csNameOffset="auto"===style.cs.offset?data.cs.labelOffset:style.cs.offset,setNameOffset="auto"===style.sets.offset?data.sets.labelOffset:style.sets.offset;return react_default.a.createElement("g",null,react_default.a.createElement("g",{transform:"translate(".concat(size.cs.x,",").concat(size.cs.y,")"),"data-upset":"csaxis"},react_default.a.createElement(D3Axis,{scale:data.cs.y,orient:"left",size:size.cs.h,shift:size.cs.h-data.cs.yAxisWidth,style:style}),react_default.a.createElement("line",{x1:0,x2:size.cs.w,y1:size.cs.h+1,y2:size.cs.h+1,className:"axisLine-".concat(style.id)}),react_default.a.createElement("text",{className:Object(utils.b)("cChartTextStyle-".concat(style.id),style.classNames.chartLabel),style:style.styles.chartLabel,transform:"translate(".concat(-csNameOffset,", ").concat(size.cs.h/2,")rotate(-90)")},style.cs.name),size.cs.addons.map((function(addon){return react_default.a.createElement("text",{key:addon.name,className:Object(utils.b)("cChartTextStyle-".concat(style.id),style.classNames.chartLabel),style:style.styles.chartLabel,transform:"translate(".concat(-csNameOffset,", ").concat(combinationPosGen(addon)+addon.size/2,")rotate(-90)")},addon.name)}))),react_default.a.createElement("g",{transform:"translate(".concat(size.sets.x,",").concat(size.sets.y,")"),"data-upset":"setaxis"},react_default.a.createElement(D3Axis,{scale:data.sets.x,orient:"bottom",size:size.sets.w,shift:size.sets.w-data.sets.xAxisWidth,transform:"translate(0, ".concat(size.sets.h,")"),style:style}),react_default.a.createElement("text",{className:Object(utils.b)("sChartTextStyle-".concat(style.id),style.classNames.chartLabel),style:style.styles.chartLabel,transform:"translate(".concat(size.sets.w/2,", ").concat(size.sets.h+setNameOffset,")")},style.sets.name),size.sets.addons.map((function(addon){return react_default.a.createElement("text",{key:addon.name,className:Object(utils.b)("sChartTextStyle-".concat(style.id),style.classNames.chartLabel),style:style.styles.chartLabel,transform:"translate(".concat(setPosGen(addon)+addon.size/2,", ").concat(size.sets.h+setNameOffset,")")},addon.name)}))))}))},522:function(module,exports,__webpack_require__){__webpack_require__(523),__webpack_require__(665),__webpack_require__(666),__webpack_require__(796),__webpack_require__(1416),__webpack_require__(1448),module.exports=__webpack_require__(1450)},585:function(module,exports){},666:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(221)},72:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"UpSetJS",(function(){return UpSetJS}));__webpack_require__(12),__webpack_require__(62),__webpack_require__(9),__webpack_require__(127),__webpack_require__(324);var react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_5__),_components_deriveDataDependent__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(514),_components_deriveSizeDependent__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(513),_components_deriveStyleDependent__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(512),_components_ExportButtons__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(517),_components_QueryLegend__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(515),_components_UpSetAxis__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(520),_components_UpSetChart__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(518),_components_UpSetQueries__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(516),_components_UpSetSelection__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__(519),_components_utils__WEBPACK_IMPORTED_MODULE_15__=__webpack_require__(15),_fillDefaults__WEBPACK_IMPORTED_MODULE_16__=__webpack_require__(511),UpSetJS=Object(react__WEBPACK_IMPORTED_MODULE_5__.forwardRef)((function(props,ref){var _fillDefaults=Object(_fillDefaults__WEBPACK_IMPORTED_MODULE_16__.a)(props),id=_fillDefaults.id,className=_fillDefaults.className,style=_fillDefaults.style,width=_fillDefaults.width,height=_fillDefaults.height,margin=_fillDefaults.padding,barPadding=_fillDefaults.barPadding,sets=_fillDefaults.sets,toKey=_fillDefaults.toKey,toElemKey=_fillDefaults.toElemKey,combinations=_fillDefaults.combinations,_fillDefaults$selecti=_fillDefaults.selection,selection=void 0===_fillDefaults$selecti?null:_fillDefaults$selecti,_onClick=_fillDefaults.onClick,onContextMenu=_fillDefaults.onContextMenu,onHover=_fillDefaults.onHover,theme=_fillDefaults.theme,dotPadding=_fillDefaults.dotPadding,setChildrenFactory=_fillDefaults.setChildrenFactory,combinationChildrenFactory=_fillDefaults.combinationChildrenFactory,widthRatios=_fillDefaults.widthRatios,heightRatios=_fillDefaults.heightRatios,_fillDefaults$queries=_fillDefaults.queries,queries=void 0===_fillDefaults$queries?[]:_fillDefaults$queries,setAddons=_fillDefaults.setAddons,combinationAddons=_fillDefaults.combinationAddons,alternatingBackgroundColor=_fillDefaults.alternatingBackgroundColor,bandScale=_fillDefaults.bandScale,barLabelOffset=_fillDefaults.barLabelOffset,classNames=_fillDefaults.classNames,color=_fillDefaults.color,combinationName=_fillDefaults.combinationName,combinationNameAxisOffset=_fillDefaults.combinationNameAxisOffset,exportButtons=_fillDefaults.exportButtons,fontFamily=_fillDefaults.fontFamily,fontSizes=_fillDefaults.fontSizes,hoverHintColor=_fillDefaults.hoverHintColor,notMemberColor=_fillDefaults.notMemberColor,numericScale=_fillDefaults.numericScale,queryLegend=_fillDefaults.queryLegend,selectionColor=_fillDefaults.selectionColor,setName=_fillDefaults.setName,setNameAxisOffset=_fillDefaults.setNameAxisOffset,cStyles=_fillDefaults.styles,textColor=_fillDefaults.textColor,emptySelection=_fillDefaults.emptySelection,fontAxisTick=fontSizes.axisTick,fontBarLabel=fontSizes.barLabel,fontChartLabel=fontSizes.chartLabel,fontLegend=fontSizes.legend,fontSetLabel=fontSizes.setLabel,styleId=Object(react__WEBPACK_IMPORTED_MODULE_5__.useMemo)((function(){return id||Object(_components_utils__WEBPACK_IMPORTED_MODULE_15__.c)([fontFamily,fontAxisTick,fontBarLabel,fontChartLabel,fontLegend,fontSetLabel,textColor,hoverHintColor,color,selectionColor,notMemberColor,alternatingBackgroundColor])}),[id,fontFamily,fontAxisTick,fontBarLabel,fontChartLabel,fontLegend,fontSetLabel,textColor,hoverHintColor,color,selectionColor,notMemberColor,alternatingBackgroundColor]),styleInfo=Object(react__WEBPACK_IMPORTED_MODULE_5__.useMemo)((function(){return Object(_components_deriveStyleDependent__WEBPACK_IMPORTED_MODULE_8__.a)(theme,cStyles,classNames,combinationName,combinationNameAxisOffset,setName,setNameAxisOffset,styleId,barLabelOffset,selectionColor,emptySelection)}),[theme,cStyles,classNames,barLabelOffset,combinationName,combinationNameAxisOffset,setName,setNameAxisOffset,styleId,selectionColor,emptySelection]),sizeInfo=Object(react__WEBPACK_IMPORTED_MODULE_5__.useMemo)((function(){return Object(_components_deriveSizeDependent__WEBPACK_IMPORTED_MODULE_7__.a)(width,height,margin,barPadding,widthRatios,heightRatios,setAddons,combinationAddons,id)}),[width,height,margin,barPadding,widthRatios,heightRatios,setAddons,combinationAddons,id]),dataInfo=Object(react__WEBPACK_IMPORTED_MODULE_5__.useMemo)((function(){return Object(_components_deriveDataDependent__WEBPACK_IMPORTED_MODULE_6__.a)(sets,combinations,sizeInfo,numericScale,bandScale,barLabelOffset+Number.parseInt(null!=fontBarLabel?fontBarLabel:"10"),dotPadding,barPadding,Number.parseInt(null!=fontAxisTick?fontAxisTick:"10"),toKey,toElemKey,id)}),[sets,combinations,sizeInfo,numericScale,bandScale,barLabelOffset,fontBarLabel,dotPadding,barPadding,fontAxisTick,toKey,toElemKey,id]),rules="\n  .root-".concat(styleId," {\n    ").concat(fontFamily?"font-family: ".concat(fontFamily,";"):"","\n  }\n  .axisTextStyle-").concat(styleId," {\n    fill: ").concat(textColor,";\n    ").concat(fontAxisTick?"font-size: ".concat(fontAxisTick,";"):"","\n    text-anchor: middle;\n  }\n  .barTextStyle-").concat(styleId," {\n    fill: ").concat(textColor,";\n    ").concat(fontBarLabel?"font-size: ".concat(fontBarLabel,";"):"","\n  }\n  .cBarTextStyle-").concat(styleId," {\n    fill: ").concat(textColor,";\n    ").concat(fontBarLabel?"font-size: ".concat(fontBarLabel,";"):"","\n    text-anchor: middle;\n  }\n  .sBarTextStyle-").concat(styleId," {\n    fill: ").concat(textColor,";\n    ").concat(fontBarLabel?"font-size: ".concat(fontBarLabel,";"):"","\n    text-anchor: end;\n    dominant-baseline: central;\n  }\n  .hoverBarTextStyle-").concat(styleId," {\n    ").concat(fontBarLabel?"font-size: ".concat(fontBarLabel,";"):"","\n    fill: ").concat(hoverHintColor,";\n    display: none;\n    text-anchor: middle;\n  }\n  .setTextStyle-").concat(styleId," {\n    fill: ").concat(textColor,";\n    ").concat(fontSetLabel?"font-size: ".concat(fontSetLabel,";"):"","\n    text-anchor: middle;\n    dominant-baseline: central;\n  }\n  .cChartTextStyle-").concat(styleId," {\n    fill: ").concat(textColor,";\n    ").concat(fontChartLabel?"font-size: ".concat(fontChartLabel,";"):"","\n    text-anchor: middle;\n  }\n  .sChartTextStyle-").concat(styleId," {\n    fill: ").concat(textColor,";\n    ").concat(fontChartLabel?"font-size: ".concat(fontChartLabel,";"):"","\n    text-anchor: middle;\n    dominant-baseline: hanging;\n  }\n  .exportTextStyle-").concat(styleId," {\n    fill: ").concat(textColor,";\n    ").concat(fontBarLabel?"font-size: ".concat(fontBarLabel,";"):"","\n  }\n  .legendTextStyle-").concat(styleId," {\n    fill: ").concat(textColor,";\n    ").concat(fontLegend?"font-size: ".concat(fontLegend,";"):"","\n    text-anchor: middle;\n    dominant-baseline: hanging;\n    pointer-events: none;\n  }\n  .startText-").concat(styleId," {\n    text-anchor: start;\n  }\n  .endText-").concat(styleId," {\n    text-anchor: end;\n  }\n  .pnone-").concat(styleId," {\n    pointer-events: none;\n  }\n  .fillPrimary-").concat(styleId," { fill: ").concat(color,"; }\n  .fillSelection-").concat(styleId," { fill: ").concat(selectionColor,"; }\n  .fillNotMember-").concat(styleId," { fill: ").concat(notMemberColor,"; }\n  .fillAlternating-").concat(styleId," { fill: ").concat(alternatingBackgroundColor||"transparent","; }\n  .fillTransparent-").concat(styleId," { fill: transparent; }\n\n  .selectionHint-").concat(styleId," {\n    fill: transparent;\n    pointer-events: none;\n    stroke: ").concat(selectionColor,";\n  }\n\n  .axisLine-").concat(styleId," {\n    fill: none;\n    stroke: ").concat(textColor,";\n  }\n  .clickAble-").concat(styleId," {\n    cursor: pointer;\n  }\n\n  .hoverBar-").concat(styleId," {\n    fill: transparent;\n  }\n\n  .interactive-").concat(styleId,":hover > .hoverBar-").concat(styleId," {\n    stroke: ").concat(hoverHintColor,";\n  }\n  .interactive-").concat(styleId,":hover > .hoverBarTextStyle-").concat(styleId," {\n    display: unset;\n  }\n\n  .exportButtons-").concat(styleId," {\n    text-anchor: middle;\n  }\n  .exportButton-").concat(styleId," {\n    cursor: pointer;\n    opacity: 0.5;\n  }\n  .exportButton-").concat(styleId,":hover {\n    opacity: 1;\n  }\n  .exportButton-").concat(styleId," > rect {\n    fill: none;\n    stroke: ").concat(textColor,";\n  }\n\n  .upsetLine-").concat(dataInfo.id," {\n    stroke-width: ").concat(.6*dataInfo.r,";\n    stroke: ").concat(color,";\n  }\n\n  .upsetSelectionLine-").concat(dataInfo.id," {\n    stroke-width: ").concat(.6*dataInfo.r*1.1,";\n    stroke: ").concat(selectionColor,";\n    pointer-events: none;\n  }\n  ").concat(queries.map((function(q,i){return".fillQ".concat(i,"-").concat(dataInfo.id," {\n    fill: ").concat(q.color,";\n  }")})).join("\n"),"\n  ");return react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("svg",{id:id,className:Object(_components_utils__WEBPACK_IMPORTED_MODULE_15__.b)("root-".concat(styleId),className),style:style,width:width,height:height,ref:ref,viewBox:"0 0 ".concat(width," ").concat(height),"data-theme":null!=theme?theme:"light"},react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("style",null,rules),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("defs",null,react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("clipPath",{id:"clip-".concat(sizeInfo.id)},react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("rect",{x:sizeInfo.sets.w,y:0,width:sizeInfo.labels.w,height:sizeInfo.sets.h}))),queryLegend&&react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(_components_QueryLegend__WEBPACK_IMPORTED_MODULE_10__.a,{queries:queries,size:sizeInfo,style:styleInfo,data:dataInfo}),exportButtons&&react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(_components_ExportButtons__WEBPACK_IMPORTED_MODULE_9__.a,{transform:"translate(".concat(sizeInfo.w-2,",").concat(sizeInfo.h-3,")"),styleId:styleId}),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("g",{transform:"translate(".concat(margin,",").concat(margin,")"),"data-upset":"base"},_onClick&&react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("rect",{width:sizeInfo.cs.x,height:sizeInfo.sets.y,onClick:function onClick(evt){return _onClick(null,evt.nativeEvent)},className:"fillTransparent-".concat(styleId)}),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(_components_UpSetAxis__WEBPACK_IMPORTED_MODULE_11__.a,{size:sizeInfo,style:styleInfo,data:dataInfo}),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(_components_UpSetChart__WEBPACK_IMPORTED_MODULE_12__.a,{size:sizeInfo,style:styleInfo,data:dataInfo,onClick:_onClick,onHover:onHover,onContextMenu:onContextMenu,setChildrenFactory:setChildrenFactory,combinationChildrenFactory:combinationChildrenFactory}),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(_components_UpSetSelection__WEBPACK_IMPORTED_MODULE_14__.a,{size:sizeInfo,style:styleInfo,data:dataInfo,onHover:onHover,selection:selection}),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(_components_UpSetQueries__WEBPACK_IMPORTED_MODULE_13__.a,{size:sizeInfo,style:styleInfo,data:dataInfo,onHover:onHover,queries:queries,secondary:null!=onHover||null!=selection})),props.children)}));UpSetJS.__docgenInfo={description:"UpSetJS main React component 2",methods:[],displayName:"UpSetJS",props:{sets:{required:!0,tsType:{name:"ISets",elements:[{name:"T"}],raw:"ISets<T>"},description:"the sets to visualize"},combinations:{required:!1,tsType:{name:"union",raw:"ISetCombinations<T> | GenerateSetCombinationsOptions<T>",elements:[{name:"ISetCombinations",elements:[{name:"T"}],raw:"ISetCombinations<T>"},{name:"GenerateSetCombinationsOptions",elements:[{name:"T"}],raw:"GenerateSetCombinationsOptions<T>"}]},description:"the combinations to visualize by default all combinations"},toKey:{required:!1,tsType:{name:"signature",type:"function",raw:"(set: ISetLike<T>) => string",signature:{arguments:[{name:"set",type:{name:"ISetLike",elements:[{name:"T"}],raw:"ISetLike<T>"}}],return:{name:"string"}}},description:"optional function to identify the same sets\n@param set the set to generate a key for"},toElemKey:{required:!1,tsType:{name:"signature",type:"function",raw:"(elem: T) => string",signature:{arguments:[{name:"elem",type:{name:"T"}}],return:{name:"string"}}},description:"optional function to identify the same elem\n@param elem the element the key for"},width:{required:!0,tsType:{name:"number"},description:"width of the chart"},height:{required:!0,tsType:{name:"number"},description:"height of the chart"},padding:{required:!1,tsType:{name:"number"},description:"padding within the svg\n@default 5"},barPadding:{required:!1,tsType:{name:"number"},description:"padding argument for scaleBand\n@default 0.1"},dotPadding:{required:!1,tsType:{name:"number"},description:"padding factor the for dots\n@default 0.7"},widthRatios:{required:!1,tsType:{name:"tuple",raw:"[number, number, number]",elements:[{name:"number"},{name:"number"},{name:"number"}]},description:"width ratios for different plots\n[set chart, set labels, intersection chart]\n@default [0.21, 0.19, 0.7]"},heightRatios:{required:!1,tsType:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}]},description:"height ratios for different plots\n[intersection chart, set chart]\n@default [0.6, 0.4]"},selectionColor:{required:!1,tsType:{name:"string"},description:""},alternatingBackgroundColor:{required:!1,tsType:{name:"union",raw:"string | false",elements:[{name:"string"},{name:"literal",value:"false"}]},description:"set to false to disable alternating pattern"},color:{required:!1,tsType:{name:"string"},description:""},textColor:{required:!1,tsType:{name:"string"},description:""},hoverHintColor:{required:!1,tsType:{name:"string"},description:""},notMemberColor:{required:!1,tsType:{name:"string"},description:""},id:{required:!1,tsType:{name:"string"},description:""},className:{required:!1,tsType:{name:"string"},description:""},classNames:{required:!1,tsType:{name:"UpSetStyleClassNames"},description:""},theme:{required:!1,tsType:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}]},description:""},barLabelOffset:{required:!1,tsType:{name:"number"},description:""},setNameAxisOffset:{required:!1,tsType:{name:"union",raw:"number | 'auto'",elements:[{name:"number"},{name:"literal",value:"'auto'"}]},description:""},combinationNameAxisOffset:{required:!1,tsType:{name:"union",raw:"number | 'auto'",elements:[{name:"number"},{name:"literal",value:"'auto'"}]},description:""},queryLegend:{required:!1,tsType:{name:"boolean"},description:"show a legend of queries\nenabled by default when queries are set"},exportButtons:{required:!1,tsType:{name:"boolean"},description:"show export buttons\n@default true"},fontFamily:{required:!1,tsType:{name:"union",raw:"string | false",elements:[{name:"string"},{name:"literal",value:"false"}]},description:"set to false to use the default font family\n@default sans-serif"},fontSizes:{required:!1,tsType:{name:"UpSetFontSizes"},description:""},numericScale:{required:!1,tsType:{name:"union",raw:"NumericScaleFactory | 'linear' | 'log'",elements:[{name:"NumericScaleFactory"},{name:"literal",value:"'linear'"},{name:"literal",value:"'log'"}]},description:""},bandScale:{required:!1,tsType:{name:"union",raw:"BandScaleFactory | 'band'",elements:[{name:"BandScaleFactory"},{name:"literal",value:"'band'"}]},description:""},setName:{required:!1,tsType:{name:"ReactNode"},description:""},combinationName:{required:!1,tsType:{name:"ReactNode"},description:""},emptySelection:{required:!1,tsType:{name:"boolean"},description:"render empty selection for better performance\n@default true"},style:{required:!1,tsType:{name:"CSSProperties"},description:""},styles:{required:!1,tsType:{name:"UpSetReactStyles"},description:""},setAddons:{required:!1,tsType:{name:"ReadonlyArray",elements:[{name:"UpSetAddon",elements:[{name:"ISet",elements:[{name:"T"}],raw:"ISet<T>"},{name:"T"}],raw:"UpSetAddon<S, T>"}],raw:"ReadonlyArray<UpSetAddon<S, T>>"},description:""},combinationAddons:{required:!1,tsType:{name:"ReadonlyArray",elements:[{name:"UpSetAddon",elements:[{name:"ISetCombination",elements:[{name:"T"}],raw:"ISetCombination<T>"},{name:"T"}],raw:"UpSetAddon<S, T>"}],raw:"ReadonlyArray<UpSetAddon<S, T>>"},description:""},setChildrenFactory:{required:!1,tsType:{name:"signature",type:"function",raw:"(set: ISet<T>) => ReactNode",signature:{arguments:[{name:"set",type:{name:"ISet",elements:[{name:"T"}],raw:"ISet<T>"}}],return:{name:"ReactNode"}}},description:""},combinationChildrenFactory:{required:!1,tsType:{name:"signature",type:"function",raw:"(combination: ISetCombination<T>) => ReactNode",signature:{arguments:[{name:"combination",type:{name:"ISetCombination",elements:[{name:"T"}],raw:"ISetCombination<T>"}}],return:{name:"ReactNode"}}},description:""},selection:{required:!1,tsType:{name:"union",raw:"ISetLike<T> | null | ReadonlyArray<T> | ((s: ISetLike<T>) => number)",elements:[{name:"ISetLike",elements:[{name:"T"}],raw:"ISetLike<T>"},{name:"null"},{name:"ReadonlyArray",elements:[{name:"T"}],raw:"ReadonlyArray<T>"},{name:"unknown"}]},description:""},onHover:{required:!1,tsType:{name:"signature",type:"function",raw:"(selection: ISetLike<T> | null, evt: MouseEvent) => void",signature:{arguments:[{name:"selection",type:{name:"union",raw:"ISetLike<T> | null",elements:[{name:"ISetLike",elements:[{name:"T"}],raw:"ISetLike<T>"},{name:"null"}]}},{name:"evt",type:{name:"MouseEvent"}}],return:{name:"void"}}},description:""},onClick:{required:!1,tsType:{name:"signature",type:"function",raw:"(selection: ISetLike<T> | null, evt: MouseEvent) => void",signature:{arguments:[{name:"selection",type:{name:"union",raw:"ISetLike<T> | null",elements:[{name:"ISetLike",elements:[{name:"T"}],raw:"ISetLike<T>"},{name:"null"}]}},{name:"evt",type:{name:"MouseEvent"}}],return:{name:"void"}}},description:""},onContextMenu:{required:!1,tsType:{name:"signature",type:"function",raw:"(selection: ISetLike<T> | null, evt: MouseEvent) => void",signature:{arguments:[{name:"selection",type:{name:"union",raw:"ISetLike<T> | null",elements:[{name:"ISetLike",elements:[{name:"T"}],raw:"ISetLike<T>"},{name:"null"}]}},{name:"evt",type:{name:"MouseEvent"}}],return:{name:"void"}}},description:""},queries:{required:!1,tsType:{name:"UpSetQueries",elements:[{name:"T"}],raw:"UpSetQueries<T>"},description:""},children:{required:!1,tsType:{name:"ReactNode"},description:""}}};try{ForwardRefExoticComponent.displayName="ForwardRefExoticComponent",ForwardRefExoticComponent.__docgenInfo={description:"",displayName:"ForwardRefExoticComponent",props:{sets:{defaultValue:null,description:"the sets to visualize",name:"sets",required:!0,type:{name:"ISets<unknown>"}},combinations:{defaultValue:null,description:"the combinations to visualize by default all combinations",name:"combinations",required:!1,type:{name:"ISetCombinations<unknown> | GenerateSetCombinationsOptions<unknown>"}},toKey:{defaultValue:null,description:"optional function to identify the same sets\n@param set the set to generate a key for",name:"toKey",required:!1,type:{name:"(set: ISetLike<unknown>) => string"}},toElemKey:{defaultValue:null,description:"optional function to identify the same elem\n@param elem the element the key for",name:"toElemKey",required:!1,type:{name:"(elem: unknown) => string"}},width:{defaultValue:null,description:"width of the chart",name:"width",required:!0,type:{name:"number"}},height:{defaultValue:null,description:"height of the chart",name:"height",required:!0,type:{name:"number"}},padding:{defaultValue:{value:"5"},description:"padding within the svg",name:"padding",required:!1,type:{name:"number"}},barPadding:{defaultValue:{value:"0.1"},description:"padding argument for scaleBand",name:"barPadding",required:!1,type:{name:"number"}},dotPadding:{defaultValue:{value:"0.7"},description:"padding factor the for dots",name:"dotPadding",required:!1,type:{name:"number"}},widthRatios:{defaultValue:{value:"[0.21, 0.19, 0.7]"},description:"width ratios for different plots\n[set chart, set labels, intersection chart]",name:"widthRatios",required:!1,type:{name:"[number, number, number]"}},heightRatios:{defaultValue:{value:"[0.6, 0.4]"},description:"height ratios for different plots\n[intersection chart, set chart]",name:"heightRatios",required:!1,type:{name:"[number, number]"}},id:{defaultValue:null,description:"",name:"id",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},classNames:{defaultValue:null,description:"",name:"classNames",required:!1,type:{name:"UpSetStyleClassNames"}},theme:{defaultValue:null,description:"",name:"theme",required:!1,type:{name:'"light" | "dark"'}},barLabelOffset:{defaultValue:null,description:"",name:"barLabelOffset",required:!1,type:{name:"number"}},setNameAxisOffset:{defaultValue:null,description:"",name:"setNameAxisOffset",required:!1,type:{name:'number | "auto"'}},combinationNameAxisOffset:{defaultValue:null,description:"",name:"combinationNameAxisOffset",required:!1,type:{name:'number | "auto"'}},queryLegend:{defaultValue:null,description:"show a legend of queries\nenabled by default when queries are set",name:"queryLegend",required:!1,type:{name:"boolean"}},exportButtons:{defaultValue:{value:"true"},description:"show export buttons",name:"exportButtons",required:!1,type:{name:"boolean"}},fontFamily:{defaultValue:{value:"sans-serif"},description:"set to false to use the default font family",name:"fontFamily",required:!1,type:{name:"string | false"}},fontSizes:{defaultValue:null,description:"",name:"fontSizes",required:!1,type:{name:"UpSetFontSizes"}},numericScale:{defaultValue:null,description:"",name:"numericScale",required:!1,type:{name:'NumericScaleFactory | "linear" | "log"'}},bandScale:{defaultValue:null,description:"",name:"bandScale",required:!1,type:{name:'BandScaleFactory | "band"'}},setName:{defaultValue:null,description:"",name:"setName",required:!1,type:{name:"ReactNode"}},combinationName:{defaultValue:null,description:"",name:"combinationName",required:!1,type:{name:"ReactNode"}},emptySelection:{defaultValue:{value:"true"},description:"render empty selection for better performance",name:"emptySelection",required:!1,type:{name:"boolean"}},selectionColor:{defaultValue:null,description:"",name:"selectionColor",required:!1,type:{name:"string"}},alternatingBackgroundColor:{defaultValue:null,description:"set to false to disable alternating pattern",name:"alternatingBackgroundColor",required:!1,type:{name:"string | false"}},color:{defaultValue:null,description:"",name:"color",required:!1,type:{name:"string"}},textColor:{defaultValue:null,description:"",name:"textColor",required:!1,type:{name:"string"}},hoverHintColor:{defaultValue:null,description:"",name:"hoverHintColor",required:!1,type:{name:"string"}},notMemberColor:{defaultValue:null,description:"",name:"notMemberColor",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},styles:{defaultValue:null,description:"",name:"styles",required:!1,type:{name:"UpSetReactStyles"}},setAddons:{defaultValue:null,description:"",name:"setAddons",required:!1,type:{name:"UpSetAddons<ISet<unknown>, unknown>"}},combinationAddons:{defaultValue:null,description:"",name:"combinationAddons",required:!1,type:{name:"UpSetAddons<ISetCombination<unknown>, unknown>"}},setChildrenFactory:{defaultValue:null,description:"",name:"setChildrenFactory",required:!1,type:{name:"(set: ISet<unknown>) => ReactNode"}},combinationChildrenFactory:{defaultValue:null,description:"",name:"combinationChildrenFactory",required:!1,type:{name:"(combination: ISetCombination<unknown>) => ReactNode"}},selection:{defaultValue:null,description:"",name:"selection",required:!1,type:{name:"ISetIntersection<unknown> | ISetUnion<unknown> | ISetComposite<unknown> | readonly unknown[] | ISet<unknown> | ((s: ISetLike<unknown>) => number)"}},onHover:{defaultValue:null,description:"",name:"onHover",required:!1,type:{name:"(selection: ISetLike<unknown>, evt: MouseEvent) => void"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"(selection: ISetLike<unknown>, evt: MouseEvent) => void"}},onContextMenu:{defaultValue:null,description:"",name:"onContextMenu",required:!1,type:{name:"(selection: ISetLike<unknown>, evt: MouseEvent) => void"}},queries:{defaultValue:null,description:"",name:"queries",required:!1,type:{name:"UpSetQueries<unknown>"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<SVGSVGElement>"}},key:{defaultValue:null,description:"",name:"key",required:!1,type:{name:"ReactText"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/UpSetJS.tsx#ForwardRefExoticComponent"]={docgenInfo:ForwardRefExoticComponent.__docgenInfo,name:"ForwardRefExoticComponent",path:"src/UpSetJS.tsx#ForwardRefExoticComponent"})}catch(__react_docgen_typescript_loader_error){}"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/UpSetJS.tsx"]={name:"UpSetJS",docgenInfo:UpSetJS.__docgenInfo,path:"src/UpSetJS.tsx"})}},[[522,1,2]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,